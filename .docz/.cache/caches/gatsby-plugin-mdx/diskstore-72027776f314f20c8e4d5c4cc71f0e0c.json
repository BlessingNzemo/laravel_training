{"expireTime":9007200985218091000,"key":"gatsby-plugin-mdx-entire-payload-2162ba416dcacf50d4f7b4198f333f68-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":109,"offset":110},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":112},"end":{"line":5,"column":29,"offset":140},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"PHP Parser","position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":7,"column":11,"offset":152},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":8,"column":11,"offset":163},"indent":[1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://coveralls.io/github/nikic/PHP-Parser?branch=master","children":[{"type":"image","title":null,"url":"https://coveralls.io/repos/github/nikic/PHP-Parser/badge.svg?branch=master","alt":"Coverage Status","position":{"start":{"line":10,"column":2,"offset":166},"end":{"line":10,"column":96,"offset":260},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":165},"end":{"line":10,"column":157,"offset":321},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":165},"end":{"line":10,"column":157,"offset":321},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a PHP parser written in PHP. Its purpose is to simplify static code analysis and\nmanipulation.","position":{"start":{"line":12,"column":1,"offset":323},"end":{"line":13,"column":14,"offset":425},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":323},"end":{"line":13,"column":14,"offset":425},"indent":[1]}},{"type":"paragraph","children":[{"type":"linkReference","identifier":"doc_master","label":"doc_master","referenceType":"full","children":[{"type":"strong","children":[{"type":"text","value":"Documentation for version 5.x","position":{"start":{"line":15,"column":4,"offset":430},"end":{"line":15,"column":33,"offset":459},"indent":[]}}],"position":{"start":{"line":15,"column":2,"offset":428},"end":{"line":15,"column":35,"offset":461},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":427},"end":{"line":15,"column":48,"offset":474},"indent":[]}},{"type":"text","value":" (current; for running on PHP >= 7.4; for parsing PHP 7.0 to PHP 8.4, with limited support for parsing PHP 5.x).","position":{"start":{"line":15,"column":48,"offset":474},"end":{"line":15,"column":160,"offset":586},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":427},"end":{"line":15,"column":160,"offset":586},"indent":[]}},{"type":"paragraph","children":[{"type":"linkReference","identifier":"doc_4_x","label":"doc_4_x","referenceType":"full","children":[{"type":"text","value":"Documentation for version 4.x","position":{"start":{"line":17,"column":2,"offset":589},"end":{"line":17,"column":31,"offset":618},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":588},"end":{"line":17,"column":41,"offset":628},"indent":[]}},{"type":"text","value":" (supported; for running on PHP >= 7.0; for parsing PHP 5.2 to PHP 8.3).","position":{"start":{"line":17,"column":41,"offset":628},"end":{"line":17,"column":113,"offset":700},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":588},"end":{"line":17,"column":113,"offset":700},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Features","position":{"start":{"line":19,"column":1,"offset":702},"end":{"line":19,"column":9,"offset":710},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":702},"end":{"line":20,"column":9,"offset":719},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The main features provided by this library are:","position":{"start":{"line":22,"column":1,"offset":721},"end":{"line":22,"column":48,"offset":768},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":721},"end":{"line":22,"column":48,"offset":768},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Parsing PHP 7, and PHP 8 code into an abstract syntax tree (AST).","position":{"start":{"line":24,"column":4,"offset":773},"end":{"line":24,"column":69,"offset":838},"indent":[]}}],"position":{"start":{"line":24,"column":4,"offset":773},"end":{"line":24,"column":69,"offset":838},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Invalid code can be parsed into a partial AST.","position":{"start":{"line":25,"column":6,"offset":844},"end":{"line":25,"column":52,"offset":890},"indent":[]}}],"position":{"start":{"line":25,"column":6,"offset":844},"end":{"line":25,"column":52,"offset":890},"indent":[]}}],"position":{"start":{"line":25,"column":4,"offset":842},"end":{"line":25,"column":52,"offset":890},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The AST contains accurate location information.","position":{"start":{"line":26,"column":6,"offset":896},"end":{"line":26,"column":53,"offset":943},"indent":[]}}],"position":{"start":{"line":26,"column":6,"offset":896},"end":{"line":26,"column":53,"offset":943},"indent":[]}}],"position":{"start":{"line":26,"column":4,"offset":894},"end":{"line":26,"column":53,"offset":943},"indent":[]}}],"position":{"start":{"line":25,"column":4,"offset":842},"end":{"line":26,"column":53,"offset":943},"indent":[4]}}],"position":{"start":{"line":24,"column":1,"offset":770},"end":{"line":26,"column":53,"offset":943},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Dumping the AST in human-readable form.","position":{"start":{"line":27,"column":4,"offset":947},"end":{"line":27,"column":43,"offset":986},"indent":[]}}],"position":{"start":{"line":27,"column":4,"offset":947},"end":{"line":27,"column":43,"offset":986},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":944},"end":{"line":27,"column":43,"offset":986},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Converting an AST back to PHP code.","position":{"start":{"line":28,"column":4,"offset":990},"end":{"line":28,"column":39,"offset":1025},"indent":[]}}],"position":{"start":{"line":28,"column":4,"offset":990},"end":{"line":28,"column":39,"offset":1025},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Formatting can be preserved for partially changed ASTs.","position":{"start":{"line":29,"column":6,"offset":1031},"end":{"line":29,"column":61,"offset":1086},"indent":[]}}],"position":{"start":{"line":29,"column":6,"offset":1031},"end":{"line":29,"column":61,"offset":1086},"indent":[]}}],"position":{"start":{"line":29,"column":4,"offset":1029},"end":{"line":29,"column":61,"offset":1086},"indent":[]}}],"position":{"start":{"line":29,"column":4,"offset":1029},"end":{"line":29,"column":61,"offset":1086},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":987},"end":{"line":29,"column":61,"offset":1086},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Infrastructure to traverse and modify ASTs.","position":{"start":{"line":30,"column":4,"offset":1090},"end":{"line":30,"column":47,"offset":1133},"indent":[]}}],"position":{"start":{"line":30,"column":4,"offset":1090},"end":{"line":30,"column":47,"offset":1133},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1087},"end":{"line":30,"column":47,"offset":1133},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Resolution of namespaced names.","position":{"start":{"line":31,"column":4,"offset":1137},"end":{"line":31,"column":35,"offset":1168},"indent":[]}}],"position":{"start":{"line":31,"column":4,"offset":1137},"end":{"line":31,"column":35,"offset":1168},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1134},"end":{"line":31,"column":35,"offset":1168},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Evaluation of constant expressions.","position":{"start":{"line":32,"column":4,"offset":1172},"end":{"line":32,"column":39,"offset":1207},"indent":[]}}],"position":{"start":{"line":32,"column":4,"offset":1172},"end":{"line":32,"column":39,"offset":1207},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1169},"end":{"line":32,"column":39,"offset":1207},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Builders to simplify AST construction for code generation.","position":{"start":{"line":33,"column":4,"offset":1211},"end":{"line":33,"column":62,"offset":1269},"indent":[]}}],"position":{"start":{"line":33,"column":4,"offset":1211},"end":{"line":33,"column":62,"offset":1269},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1208},"end":{"line":33,"column":62,"offset":1269},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Converting an AST into JSON and back.","position":{"start":{"line":34,"column":4,"offset":1273},"end":{"line":34,"column":41,"offset":1310},"indent":[]}}],"position":{"start":{"line":34,"column":4,"offset":1273},"end":{"line":34,"column":41,"offset":1310},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1270},"end":{"line":34,"column":41,"offset":1310},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":770},"end":{"line":34,"column":41,"offset":1310},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Quick Start","position":{"start":{"line":36,"column":1,"offset":1312},"end":{"line":36,"column":12,"offset":1323},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1312},"end":{"line":37,"column":12,"offset":1335},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Install the library using ","position":{"start":{"line":39,"column":1,"offset":1337},"end":{"line":39,"column":27,"offset":1363},"indent":[]}},{"type":"link","title":null,"url":"https://getcomposer.org","children":[{"type":"text","value":"composer","position":{"start":{"line":39,"column":28,"offset":1364},"end":{"line":39,"column":36,"offset":1372},"indent":[]}}],"position":{"start":{"line":39,"column":27,"offset":1363},"end":{"line":39,"column":62,"offset":1398},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":39,"column":62,"offset":1398},"end":{"line":39,"column":63,"offset":1399},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1337},"end":{"line":39,"column":63,"offset":1399},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"php composer.phar require nikic/php-parser","position":{"start":{"line":41,"column":1,"offset":1401},"end":{"line":41,"column":47,"offset":1447},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Parse some PHP code into an AST and dump the result in human-readable form:","position":{"start":{"line":43,"column":1,"offset":1449},"end":{"line":43,"column":76,"offset":1524},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1449},"end":{"line":43,"column":76,"offset":1524},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?php\nuse PhpParser\\Error;\nuse PhpParser\\NodeDumper;\nuse PhpParser\\ParserFactory;\n\n$code = <<<'CODE'\n<?php\n\nfunction test($foo)\n{\n    var_dump($foo);\n}\nCODE;\n\n$parser = (new ParserFactory())->createForNewestSupportedVersion();\ntry {\n    $ast = $parser->parse($code);\n} catch (Error $error) {\n    echo \"Parse error: {$error->getMessage()}\\n\";\n    return;\n}\n\n$dumper = new NodeDumper;\necho $dumper->dump($ast) . \"\\n\";","position":{"start":{"line":45,"column":1,"offset":1526},"end":{"line":70,"column":4,"offset":1952},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This dumps an AST looking something like this:","position":{"start":{"line":72,"column":1,"offset":1954},"end":{"line":72,"column":47,"offset":2000},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":1954},"end":{"line":72,"column":47,"offset":2000},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"array(\n    0: Stmt_Function(\n        attrGroups: array(\n        )\n        byRef: false\n        name: Identifier(\n            name: test\n        )\n        params: array(\n            0: Param(\n                attrGroups: array(\n                )\n                flags: 0\n                type: null\n                byRef: false\n                variadic: false\n                var: Expr_Variable(\n                    name: foo\n                )\n                default: null\n            )\n        )\n        returnType: null\n        stmts: array(\n            0: Stmt_Expression(\n                expr: Expr_FuncCall(\n                    name: Name(\n                        name: var_dump\n                    )\n                    args: array(\n                        0: Arg(\n                            name: null\n                            value: Expr_Variable(\n                                name: foo\n                            )\n                            byRef: false\n                            unpack: false\n                        )\n                    )\n                )\n            )\n        )\n    )\n)","position":{"start":{"line":74,"column":1,"offset":2002},"end":{"line":119,"column":4,"offset":3120},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let's traverse the AST and perform some kind of modification. For example, drop all function bodies:","position":{"start":{"line":121,"column":1,"offset":3122},"end":{"line":121,"column":101,"offset":3222},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3122},"end":{"line":121,"column":101,"offset":3222},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use PhpParser\\Node;\nuse PhpParser\\Node\\Stmt\\Function_;\nuse PhpParser\\NodeTraverser;\nuse PhpParser\\NodeVisitorAbstract;\n\n$traverser = new NodeTraverser();\n$traverser->addVisitor(new class extends NodeVisitorAbstract {\n    public function enterNode(Node $node) {\n        if ($node instanceof Function_) {\n            // Clean out the function body\n            $node->stmts = [];\n        }\n    }\n});\n\n$ast = $traverser->traverse($ast);\necho $dumper->dump($ast) . \"\\n\";","position":{"start":{"line":123,"column":1,"offset":3224},"end":{"line":141,"column":4,"offset":3700},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This gives us an AST where the ","position":{"start":{"line":143,"column":1,"offset":3702},"end":{"line":143,"column":32,"offset":3733},"indent":[]}},{"type":"inlineCode","value":"Function_::$stmts","position":{"start":{"line":143,"column":32,"offset":3733},"end":{"line":143,"column":51,"offset":3752},"indent":[]}},{"type":"text","value":" are empty:","position":{"start":{"line":143,"column":51,"offset":3752},"end":{"line":143,"column":62,"offset":3763},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":3702},"end":{"line":143,"column":62,"offset":3763},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"array(\n    0: Stmt_Function(\n        attrGroups: array(\n        )\n        byRef: false\n        name: Identifier(\n            name: test\n        )\n        params: array(\n            0: Param(\n                attrGroups: array(\n                )\n                type: null\n                byRef: false\n                variadic: false\n                var: Expr_Variable(\n                    name: foo\n                )\n                default: null\n            )\n        )\n        returnType: null\n        stmts: array(\n        )\n    )\n)","position":{"start":{"line":145,"column":1,"offset":3765},"end":{"line":172,"column":4,"offset":4307},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, we can convert the new AST back to PHP code:","position":{"start":{"line":174,"column":1,"offset":4309},"end":{"line":174,"column":54,"offset":4362},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":4309},"end":{"line":174,"column":54,"offset":4362},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use PhpParser\\PrettyPrinter;\n\n$prettyPrinter = new PrettyPrinter\\Standard;\necho $prettyPrinter->prettyPrintFile($ast);","position":{"start":{"line":176,"column":1,"offset":4364},"end":{"line":181,"column":4,"offset":4493},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This gives us our original code, minus the ","position":{"start":{"line":183,"column":1,"offset":4495},"end":{"line":183,"column":44,"offset":4538},"indent":[]}},{"type":"inlineCode","value":"var_dump()","position":{"start":{"line":183,"column":44,"offset":4538},"end":{"line":183,"column":56,"offset":4550},"indent":[]}},{"type":"text","value":" call inside the function:","position":{"start":{"line":183,"column":56,"offset":4550},"end":{"line":183,"column":82,"offset":4576},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":4495},"end":{"line":183,"column":82,"offset":4576},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?php\n\nfunction test($foo)\n{\n}","position":{"start":{"line":185,"column":1,"offset":4578},"end":{"line":191,"column":4,"offset":4619},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For a more comprehensive introduction, see the documentation.","position":{"start":{"line":193,"column":1,"offset":4621},"end":{"line":193,"column":62,"offset":4682},"indent":[]}}],"position":{"start":{"line":193,"column":1,"offset":4621},"end":{"line":193,"column":62,"offset":4682},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Documentation","position":{"start":{"line":195,"column":1,"offset":4684},"end":{"line":195,"column":14,"offset":4697},"indent":[]}}],"position":{"start":{"line":195,"column":1,"offset":4684},"end":{"line":196,"column":14,"offset":4711},"indent":[1]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/0_Introduction.markdown","children":[{"type":"text","value":"Introduction","position":{"start":{"line":198,"column":6,"offset":4718},"end":{"line":198,"column":18,"offset":4730},"indent":[]}}],"position":{"start":{"line":198,"column":5,"offset":4717},"end":{"line":198,"column":48,"offset":4760},"indent":[]}}],"position":{"start":{"line":198,"column":5,"offset":4717},"end":{"line":198,"column":48,"offset":4760},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":4713},"end":{"line":198,"column":48,"offset":4760},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/2_Usage_of_basic_components.markdown","children":[{"type":"text","value":"Usage of basic components","position":{"start":{"line":199,"column":6,"offset":4766},"end":{"line":199,"column":31,"offset":4791},"indent":[]}}],"position":{"start":{"line":199,"column":5,"offset":4765},"end":{"line":199,"column":74,"offset":4834},"indent":[]}}],"position":{"start":{"line":199,"column":5,"offset":4765},"end":{"line":199,"column":74,"offset":4834},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":4761},"end":{"line":199,"column":74,"offset":4834},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":4713},"end":{"line":199,"column":74,"offset":4834},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Component documentation:","position":{"start":{"line":201,"column":1,"offset":4836},"end":{"line":201,"column":25,"offset":4860},"indent":[]}}],"position":{"start":{"line":201,"column":1,"offset":4836},"end":{"line":201,"column":25,"offset":4860},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/component/Walking_the_AST.markdown","children":[{"type":"text","value":"Walking the AST","position":{"start":{"line":203,"column":5,"offset":4866},"end":{"line":203,"column":20,"offset":4881},"indent":[]}}],"position":{"start":{"line":203,"column":4,"offset":4865},"end":{"line":203,"column":61,"offset":4922},"indent":[]}}],"position":{"start":{"line":203,"column":4,"offset":4865},"end":{"line":203,"column":61,"offset":4922},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Node visitors","position":{"start":{"line":204,"column":6,"offset":4928},"end":{"line":204,"column":19,"offset":4941},"indent":[]}}],"position":{"start":{"line":204,"column":6,"offset":4928},"end":{"line":204,"column":19,"offset":4941},"indent":[]}}],"position":{"start":{"line":204,"column":4,"offset":4926},"end":{"line":204,"column":19,"offset":4941},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Modifying the AST from a visitor","position":{"start":{"line":205,"column":6,"offset":4947},"end":{"line":205,"column":38,"offset":4979},"indent":[]}}],"position":{"start":{"line":205,"column":6,"offset":4947},"end":{"line":205,"column":38,"offset":4979},"indent":[]}}],"position":{"start":{"line":205,"column":4,"offset":4945},"end":{"line":205,"column":38,"offset":4979},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Short-circuiting traversals","position":{"start":{"line":206,"column":6,"offset":4985},"end":{"line":206,"column":33,"offset":5012},"indent":[]}}],"position":{"start":{"line":206,"column":6,"offset":4985},"end":{"line":206,"column":33,"offset":5012},"indent":[]}}],"position":{"start":{"line":206,"column":4,"offset":4983},"end":{"line":206,"column":33,"offset":5012},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Interleaved visitors","position":{"start":{"line":207,"column":6,"offset":5018},"end":{"line":207,"column":26,"offset":5038},"indent":[]}}],"position":{"start":{"line":207,"column":6,"offset":5018},"end":{"line":207,"column":26,"offset":5038},"indent":[]}}],"position":{"start":{"line":207,"column":4,"offset":5016},"end":{"line":207,"column":26,"offset":5038},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Simple node finding API","position":{"start":{"line":208,"column":6,"offset":5044},"end":{"line":208,"column":29,"offset":5067},"indent":[]}}],"position":{"start":{"line":208,"column":6,"offset":5044},"end":{"line":208,"column":29,"offset":5067},"indent":[]}}],"position":{"start":{"line":208,"column":4,"offset":5042},"end":{"line":208,"column":29,"offset":5067},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Parent and sibling references","position":{"start":{"line":209,"column":6,"offset":5073},"end":{"line":209,"column":35,"offset":5102},"indent":[]}}],"position":{"start":{"line":209,"column":6,"offset":5073},"end":{"line":209,"column":35,"offset":5102},"indent":[]}}],"position":{"start":{"line":209,"column":4,"offset":5071},"end":{"line":209,"column":35,"offset":5102},"indent":[]}}],"position":{"start":{"line":204,"column":4,"offset":4926},"end":{"line":209,"column":35,"offset":5102},"indent":[4,4,4,4,4]}}],"position":{"start":{"line":203,"column":1,"offset":4862},"end":{"line":209,"column":35,"offset":5102},"indent":[1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/component/Name_resolution.markdown","children":[{"type":"text","value":"Name resolution","position":{"start":{"line":210,"column":5,"offset":5107},"end":{"line":210,"column":20,"offset":5122},"indent":[]}}],"position":{"start":{"line":210,"column":4,"offset":5106},"end":{"line":210,"column":61,"offset":5163},"indent":[]}}],"position":{"start":{"line":210,"column":4,"offset":5106},"end":{"line":210,"column":61,"offset":5163},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Name resolver options","position":{"start":{"line":211,"column":6,"offset":5169},"end":{"line":211,"column":27,"offset":5190},"indent":[]}}],"position":{"start":{"line":211,"column":6,"offset":5169},"end":{"line":211,"column":27,"offset":5190},"indent":[]}}],"position":{"start":{"line":211,"column":4,"offset":5167},"end":{"line":211,"column":27,"offset":5190},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Name resolution context","position":{"start":{"line":212,"column":6,"offset":5196},"end":{"line":212,"column":29,"offset":5219},"indent":[]}}],"position":{"start":{"line":212,"column":6,"offset":5196},"end":{"line":212,"column":29,"offset":5219},"indent":[]}}],"position":{"start":{"line":212,"column":4,"offset":5194},"end":{"line":212,"column":29,"offset":5219},"indent":[]}}],"position":{"start":{"line":211,"column":4,"offset":5167},"end":{"line":212,"column":29,"offset":5219},"indent":[4]}}],"position":{"start":{"line":210,"column":1,"offset":5103},"end":{"line":212,"column":29,"offset":5219},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/component/Pretty_printing.markdown","children":[{"type":"text","value":"Pretty printing","position":{"start":{"line":213,"column":5,"offset":5224},"end":{"line":213,"column":20,"offset":5239},"indent":[]}}],"position":{"start":{"line":213,"column":4,"offset":5223},"end":{"line":213,"column":61,"offset":5280},"indent":[]}}],"position":{"start":{"line":213,"column":4,"offset":5223},"end":{"line":213,"column":61,"offset":5280},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Converting AST back to PHP code","position":{"start":{"line":214,"column":6,"offset":5286},"end":{"line":214,"column":37,"offset":5317},"indent":[]}}],"position":{"start":{"line":214,"column":6,"offset":5286},"end":{"line":214,"column":37,"offset":5317},"indent":[]}}],"position":{"start":{"line":214,"column":4,"offset":5284},"end":{"line":214,"column":37,"offset":5317},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Customizing formatting","position":{"start":{"line":215,"column":6,"offset":5323},"end":{"line":215,"column":28,"offset":5345},"indent":[]}}],"position":{"start":{"line":215,"column":6,"offset":5323},"end":{"line":215,"column":28,"offset":5345},"indent":[]}}],"position":{"start":{"line":215,"column":4,"offset":5321},"end":{"line":215,"column":28,"offset":5345},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Formatting-preserving code transformations","position":{"start":{"line":216,"column":6,"offset":5351},"end":{"line":216,"column":48,"offset":5393},"indent":[]}}],"position":{"start":{"line":216,"column":6,"offset":5351},"end":{"line":216,"column":48,"offset":5393},"indent":[]}}],"position":{"start":{"line":216,"column":4,"offset":5349},"end":{"line":216,"column":48,"offset":5393},"indent":[]}}],"position":{"start":{"line":214,"column":4,"offset":5284},"end":{"line":216,"column":48,"offset":5393},"indent":[4,4]}}],"position":{"start":{"line":213,"column":1,"offset":5220},"end":{"line":216,"column":48,"offset":5393},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/component/AST_builders.markdown","children":[{"type":"text","value":"AST builders","position":{"start":{"line":217,"column":5,"offset":5398},"end":{"line":217,"column":17,"offset":5410},"indent":[]}}],"position":{"start":{"line":217,"column":4,"offset":5397},"end":{"line":217,"column":55,"offset":5448},"indent":[]}}],"position":{"start":{"line":217,"column":4,"offset":5397},"end":{"line":217,"column":55,"offset":5448},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Fluent builders for AST nodes","position":{"start":{"line":218,"column":6,"offset":5454},"end":{"line":218,"column":35,"offset":5483},"indent":[]}}],"position":{"start":{"line":218,"column":6,"offset":5454},"end":{"line":218,"column":35,"offset":5483},"indent":[]}}],"position":{"start":{"line":218,"column":4,"offset":5452},"end":{"line":218,"column":35,"offset":5483},"indent":[]}}],"position":{"start":{"line":218,"column":4,"offset":5452},"end":{"line":218,"column":35,"offset":5483},"indent":[]}}],"position":{"start":{"line":217,"column":1,"offset":5394},"end":{"line":218,"column":35,"offset":5483},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/component/Lexer.markdown","children":[{"type":"text","value":"Lexer","position":{"start":{"line":219,"column":5,"offset":5488},"end":{"line":219,"column":10,"offset":5493},"indent":[]}}],"position":{"start":{"line":219,"column":4,"offset":5487},"end":{"line":219,"column":41,"offset":5524},"indent":[]}}],"position":{"start":{"line":219,"column":4,"offset":5487},"end":{"line":219,"column":41,"offset":5524},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Emulation","position":{"start":{"line":220,"column":6,"offset":5530},"end":{"line":220,"column":15,"offset":5539},"indent":[]}}],"position":{"start":{"line":220,"column":6,"offset":5530},"end":{"line":220,"column":15,"offset":5539},"indent":[]}}],"position":{"start":{"line":220,"column":4,"offset":5528},"end":{"line":220,"column":15,"offset":5539},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Tokens, positions and attributes","position":{"start":{"line":221,"column":6,"offset":5545},"end":{"line":221,"column":38,"offset":5577},"indent":[]}}],"position":{"start":{"line":221,"column":6,"offset":5545},"end":{"line":221,"column":38,"offset":5577},"indent":[]}}],"position":{"start":{"line":221,"column":4,"offset":5543},"end":{"line":221,"column":38,"offset":5577},"indent":[]}}],"position":{"start":{"line":220,"column":4,"offset":5528},"end":{"line":221,"column":38,"offset":5577},"indent":[4]}}],"position":{"start":{"line":219,"column":1,"offset":5484},"end":{"line":221,"column":38,"offset":5577},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/component/Error_handling.markdown","children":[{"type":"text","value":"Error handling","position":{"start":{"line":222,"column":5,"offset":5582},"end":{"line":222,"column":19,"offset":5596},"indent":[]}}],"position":{"start":{"line":222,"column":4,"offset":5581},"end":{"line":222,"column":59,"offset":5636},"indent":[]}}],"position":{"start":{"line":222,"column":4,"offset":5581},"end":{"line":222,"column":59,"offset":5636},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Column information for errors","position":{"start":{"line":223,"column":6,"offset":5642},"end":{"line":223,"column":35,"offset":5671},"indent":[]}}],"position":{"start":{"line":223,"column":6,"offset":5642},"end":{"line":223,"column":35,"offset":5671},"indent":[]}}],"position":{"start":{"line":223,"column":4,"offset":5640},"end":{"line":223,"column":35,"offset":5671},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Error recovery (parsing of syntactically incorrect code)","position":{"start":{"line":224,"column":6,"offset":5677},"end":{"line":224,"column":62,"offset":5733},"indent":[]}}],"position":{"start":{"line":224,"column":6,"offset":5677},"end":{"line":224,"column":62,"offset":5733},"indent":[]}}],"position":{"start":{"line":224,"column":4,"offset":5675},"end":{"line":224,"column":62,"offset":5733},"indent":[]}}],"position":{"start":{"line":223,"column":4,"offset":5640},"end":{"line":224,"column":62,"offset":5733},"indent":[4]}}],"position":{"start":{"line":222,"column":1,"offset":5578},"end":{"line":224,"column":62,"offset":5733},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/component/Constant_expression_evaluation.markdown","children":[{"type":"text","value":"Constant expression evaluation","position":{"start":{"line":225,"column":5,"offset":5738},"end":{"line":225,"column":35,"offset":5768},"indent":[]}}],"position":{"start":{"line":225,"column":4,"offset":5737},"end":{"line":225,"column":91,"offset":5824},"indent":[]}}],"position":{"start":{"line":225,"column":4,"offset":5737},"end":{"line":225,"column":91,"offset":5824},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Evaluating constant/property/etc initializers","position":{"start":{"line":226,"column":6,"offset":5830},"end":{"line":226,"column":51,"offset":5875},"indent":[]}}],"position":{"start":{"line":226,"column":6,"offset":5830},"end":{"line":226,"column":51,"offset":5875},"indent":[]}}],"position":{"start":{"line":226,"column":4,"offset":5828},"end":{"line":226,"column":51,"offset":5875},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Handling errors and unsupported expressions","position":{"start":{"line":227,"column":6,"offset":5881},"end":{"line":227,"column":49,"offset":5924},"indent":[]}}],"position":{"start":{"line":227,"column":6,"offset":5881},"end":{"line":227,"column":49,"offset":5924},"indent":[]}}],"position":{"start":{"line":227,"column":4,"offset":5879},"end":{"line":227,"column":49,"offset":5924},"indent":[]}}],"position":{"start":{"line":226,"column":4,"offset":5828},"end":{"line":227,"column":49,"offset":5924},"indent":[4]}}],"position":{"start":{"line":225,"column":1,"offset":5734},"end":{"line":227,"column":49,"offset":5924},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/component/JSON_representation.markdown","children":[{"type":"text","value":"JSON representation","position":{"start":{"line":228,"column":5,"offset":5929},"end":{"line":228,"column":24,"offset":5948},"indent":[]}}],"position":{"start":{"line":228,"column":4,"offset":5928},"end":{"line":228,"column":69,"offset":5993},"indent":[]}}],"position":{"start":{"line":228,"column":4,"offset":5928},"end":{"line":228,"column":69,"offset":5993},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"JSON encoding and decoding of ASTs","position":{"start":{"line":229,"column":6,"offset":5999},"end":{"line":229,"column":40,"offset":6033},"indent":[]}}],"position":{"start":{"line":229,"column":6,"offset":5999},"end":{"line":229,"column":40,"offset":6033},"indent":[]}}],"position":{"start":{"line":229,"column":4,"offset":5997},"end":{"line":229,"column":40,"offset":6033},"indent":[]}}],"position":{"start":{"line":229,"column":4,"offset":5997},"end":{"line":229,"column":40,"offset":6033},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":5925},"end":{"line":229,"column":40,"offset":6033},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/component/Performance.markdown","children":[{"type":"text","value":"Performance","position":{"start":{"line":230,"column":5,"offset":6038},"end":{"line":230,"column":16,"offset":6049},"indent":[]}}],"position":{"start":{"line":230,"column":4,"offset":6037},"end":{"line":230,"column":53,"offset":6086},"indent":[]}}],"position":{"start":{"line":230,"column":4,"offset":6037},"end":{"line":230,"column":53,"offset":6086},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Disabling Xdebug","position":{"start":{"line":231,"column":6,"offset":6092},"end":{"line":231,"column":22,"offset":6108},"indent":[]}}],"position":{"start":{"line":231,"column":6,"offset":6092},"end":{"line":231,"column":22,"offset":6108},"indent":[]}}],"position":{"start":{"line":231,"column":4,"offset":6090},"end":{"line":231,"column":22,"offset":6108},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Reusing objects","position":{"start":{"line":232,"column":6,"offset":6114},"end":{"line":232,"column":21,"offset":6129},"indent":[]}}],"position":{"start":{"line":232,"column":6,"offset":6114},"end":{"line":232,"column":21,"offset":6129},"indent":[]}}],"position":{"start":{"line":232,"column":4,"offset":6112},"end":{"line":232,"column":21,"offset":6129},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Garbage collection impact","position":{"start":{"line":233,"column":6,"offset":6135},"end":{"line":233,"column":31,"offset":6160},"indent":[]}}],"position":{"start":{"line":233,"column":6,"offset":6135},"end":{"line":233,"column":31,"offset":6160},"indent":[]}}],"position":{"start":{"line":233,"column":4,"offset":6133},"end":{"line":233,"column":31,"offset":6160},"indent":[]}}],"position":{"start":{"line":231,"column":4,"offset":6090},"end":{"line":233,"column":31,"offset":6160},"indent":[4,4]}}],"position":{"start":{"line":230,"column":1,"offset":6034},"end":{"line":233,"column":31,"offset":6160},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"doc/component/FAQ.markdown","children":[{"type":"text","value":"Frequently asked questions","position":{"start":{"line":234,"column":5,"offset":6165},"end":{"line":234,"column":31,"offset":6191},"indent":[]}}],"position":{"start":{"line":234,"column":4,"offset":6164},"end":{"line":234,"column":60,"offset":6220},"indent":[]}}],"position":{"start":{"line":234,"column":4,"offset":6164},"end":{"line":234,"column":60,"offset":6220},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Parent and sibling references","position":{"start":{"line":235,"column":6,"offset":6226},"end":{"line":235,"column":35,"offset":6255},"indent":[]}}],"position":{"start":{"line":235,"column":6,"offset":6226},"end":{"line":235,"column":35,"offset":6255},"indent":[]}}],"position":{"start":{"line":235,"column":2,"offset":6222},"end":{"line":235,"column":35,"offset":6255},"indent":[]}}],"position":{"start":{"line":235,"column":2,"offset":6222},"end":{"line":235,"column":35,"offset":6255},"indent":[]}},{"type":"definition","identifier":"doc_3_x","label":"doc_3_x","title":null,"url":"https://github.com/nikic/PHP-Parser/tree/3.x/doc","position":{"start":{"line":237,"column":2,"offset":6258},"end":{"line":237,"column":61,"offset":6317},"indent":[]}},{"type":"definition","identifier":"doc_4_x","label":"doc_4_x","title":null,"url":"https://github.com/nikic/PHP-Parser/tree/4.x/doc","position":{"start":{"line":238,"column":2,"offset":6319},"end":{"line":238,"column":61,"offset":6378},"indent":[]}},{"type":"definition","identifier":"doc_master","label":"doc_master","title":null,"url":"https://github.com/nikic/PHP-Parser/tree/master/doc","position":{"start":{"line":239,"column":2,"offset":6380},"end":{"line":239,"column":67,"offset":6445},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":6161},"end":{"line":239,"column":67,"offset":6445},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":203,"column":1,"offset":4862},"end":{"line":239,"column":67,"offset":6445},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":242,"column":1,"offset":6448},"end":{"line":242,"column":31,"offset":6478},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":242,"column":31,"offset":6478}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"php-parser\"\n    }}>{`PHP Parser`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://coveralls.io/github/nikic/PHP-Parser?branch=master\"\n      }}><img alt=\"Coverage Status\" src=\"https://coveralls.io/repos/github/nikic/PHP-Parser/badge.svg?branch=master\" /></a></p>\n    <p>{`This is a PHP parser written in PHP. Its purpose is to simplify static code analysis and\nmanipulation.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nikic/PHP-Parser/tree/master/doc\"\n      }}><strong parentName=\"a\">{`Documentation for version 5.x`}</strong></a>{` (current; for running on PHP >= 7.4; for parsing PHP 7.0 to PHP 8.4, with limited support for parsing PHP 5.x).`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nikic/PHP-Parser/tree/4.x/doc\"\n      }}>{`Documentation for version 4.x`}</a>{` (supported; for running on PHP >= 7.0; for parsing PHP 5.2 to PHP 8.3).`}</p>\n    <h2 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h2>\n    <p>{`The main features provided by this library are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Parsing PHP 7, and PHP 8 code into an abstract syntax tree (AST).`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Invalid code can be parsed into a partial AST.`}</li>\n          <li parentName=\"ul\">{`The AST contains accurate location information.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Dumping the AST in human-readable form.`}</li>\n      <li parentName=\"ul\">{`Converting an AST back to PHP code.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Formatting can be preserved for partially changed ASTs.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Infrastructure to traverse and modify ASTs.`}</li>\n      <li parentName=\"ul\">{`Resolution of namespaced names.`}</li>\n      <li parentName=\"ul\">{`Evaluation of constant expressions.`}</li>\n      <li parentName=\"ul\">{`Builders to simplify AST construction for code generation.`}</li>\n      <li parentName=\"ul\">{`Converting an AST into JSON and back.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"quick-start\"\n    }}>{`Quick Start`}</h2>\n    <p>{`Install the library using `}<a parentName=\"p\" {...{\n        \"href\": \"https://getcomposer.org\"\n      }}>{`composer`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`php composer.phar require nikic/php-parser\n`}</code></pre>\n    <p>{`Parse some PHP code into an AST and dump the result in human-readable form:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\nuse PhpParser\\\\Error;\nuse PhpParser\\\\NodeDumper;\nuse PhpParser\\\\ParserFactory;\n\n$code = <<<'CODE'\n<?php\n\nfunction test($foo)\n{\n    var_dump($foo);\n}\nCODE;\n\n$parser = (new ParserFactory())->createForNewestSupportedVersion();\ntry {\n    $ast = $parser->parse($code);\n} catch (Error $error) {\n    echo \"Parse error: {$error->getMessage()}\\\\n\";\n    return;\n}\n\n$dumper = new NodeDumper;\necho $dumper->dump($ast) . \"\\\\n\";\n`}</code></pre>\n    <p>{`This dumps an AST looking something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`array(\n    0: Stmt_Function(\n        attrGroups: array(\n        )\n        byRef: false\n        name: Identifier(\n            name: test\n        )\n        params: array(\n            0: Param(\n                attrGroups: array(\n                )\n                flags: 0\n                type: null\n                byRef: false\n                variadic: false\n                var: Expr_Variable(\n                    name: foo\n                )\n                default: null\n            )\n        )\n        returnType: null\n        stmts: array(\n            0: Stmt_Expression(\n                expr: Expr_FuncCall(\n                    name: Name(\n                        name: var_dump\n                    )\n                    args: array(\n                        0: Arg(\n                            name: null\n                            value: Expr_Variable(\n                                name: foo\n                            )\n                            byRef: false\n                            unpack: false\n                        )\n                    )\n                )\n            )\n        )\n    )\n)\n`}</code></pre>\n    <p>{`Let's traverse the AST and perform some kind of modification. For example, drop all function bodies:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use PhpParser\\\\Node;\nuse PhpParser\\\\Node\\\\Stmt\\\\Function_;\nuse PhpParser\\\\NodeTraverser;\nuse PhpParser\\\\NodeVisitorAbstract;\n\n$traverser = new NodeTraverser();\n$traverser->addVisitor(new class extends NodeVisitorAbstract {\n    public function enterNode(Node $node) {\n        if ($node instanceof Function_) {\n            // Clean out the function body\n            $node->stmts = [];\n        }\n    }\n});\n\n$ast = $traverser->traverse($ast);\necho $dumper->dump($ast) . \"\\\\n\";\n`}</code></pre>\n    <p>{`This gives us an AST where the `}<inlineCode parentName=\"p\">{`Function_::$stmts`}</inlineCode>{` are empty:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`array(\n    0: Stmt_Function(\n        attrGroups: array(\n        )\n        byRef: false\n        name: Identifier(\n            name: test\n        )\n        params: array(\n            0: Param(\n                attrGroups: array(\n                )\n                type: null\n                byRef: false\n                variadic: false\n                var: Expr_Variable(\n                    name: foo\n                )\n                default: null\n            )\n        )\n        returnType: null\n        stmts: array(\n        )\n    )\n)\n`}</code></pre>\n    <p>{`Finally, we can convert the new AST back to PHP code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use PhpParser\\\\PrettyPrinter;\n\n$prettyPrinter = new PrettyPrinter\\\\Standard;\necho $prettyPrinter->prettyPrintFile($ast);\n`}</code></pre>\n    <p>{`This gives us our original code, minus the `}<inlineCode parentName=\"p\">{`var_dump()`}</inlineCode>{` call inside the function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nfunction test($foo)\n{\n}\n`}</code></pre>\n    <p>{`For a more comprehensive introduction, see the documentation.`}</p>\n    <h2 {...{\n      \"id\": \"documentation\"\n    }}>{`Documentation`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"doc/0_Introduction.markdown\"\n        }}>{`Introduction`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"doc/2_Usage_of_basic_components.markdown\"\n        }}>{`Usage of basic components`}</a></li>\n    </ol>\n    <p>{`Component documentation:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"doc/component/Walking_the_AST.markdown\"\n          }}>{`Walking the AST`}</a></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Node visitors`}</li>\n          <li parentName=\"ul\">{`Modifying the AST from a visitor`}</li>\n          <li parentName=\"ul\">{`Short-circuiting traversals`}</li>\n          <li parentName=\"ul\">{`Interleaved visitors`}</li>\n          <li parentName=\"ul\">{`Simple node finding API`}</li>\n          <li parentName=\"ul\">{`Parent and sibling references`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"doc/component/Name_resolution.markdown\"\n          }}>{`Name resolution`}</a></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Name resolver options`}</li>\n          <li parentName=\"ul\">{`Name resolution context`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"doc/component/Pretty_printing.markdown\"\n          }}>{`Pretty printing`}</a></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Converting AST back to PHP code`}</li>\n          <li parentName=\"ul\">{`Customizing formatting`}</li>\n          <li parentName=\"ul\">{`Formatting-preserving code transformations`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"doc/component/AST_builders.markdown\"\n          }}>{`AST builders`}</a></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Fluent builders for AST nodes`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"doc/component/Lexer.markdown\"\n          }}>{`Lexer`}</a></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Emulation`}</li>\n          <li parentName=\"ul\">{`Tokens, positions and attributes`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"doc/component/Error_handling.markdown\"\n          }}>{`Error handling`}</a></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Column information for errors`}</li>\n          <li parentName=\"ul\">{`Error recovery (parsing of syntactically incorrect code)`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"doc/component/Constant_expression_evaluation.markdown\"\n          }}>{`Constant expression evaluation`}</a></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Evaluating constant/property/etc initializers`}</li>\n          <li parentName=\"ul\">{`Handling errors and unsupported expressions`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"doc/component/JSON_representation.markdown\"\n          }}>{`JSON representation`}</a></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`JSON encoding and decoding of ASTs`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"doc/component/Performance.markdown\"\n          }}>{`Performance`}</a></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Disabling Xdebug`}</li>\n          <li parentName=\"ul\">{`Reusing objects`}</li>\n          <li parentName=\"ul\">{`Garbage collection impact`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"doc/component/FAQ.markdown\"\n          }}>{`Frequently asked questions`}</a></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Parent and sibling references`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}