{"expireTime":9007200985218040000,"key":"gatsby-plugin-mdx-entire-payload-03bd247ebd138c07bb731624ff56b989-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":109,"offset":110},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":112},"end":{"line":5,"column":29,"offset":140},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"PSR-7 Message Implementation","position":{"start":{"line":7,"column":3,"offset":144},"end":{"line":7,"column":31,"offset":172},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":7,"column":31,"offset":172},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This repository contains a full ","position":{"start":{"line":9,"column":1,"offset":174},"end":{"line":9,"column":33,"offset":206},"indent":[]}},{"type":"link","title":null,"url":"https://www.php-fig.org/psr/psr-7/","children":[{"type":"text","value":"PSR-7","position":{"start":{"line":9,"column":34,"offset":207},"end":{"line":9,"column":39,"offset":212},"indent":[]}}],"position":{"start":{"line":9,"column":33,"offset":206},"end":{"line":9,"column":76,"offset":249},"indent":[]}},{"type":"text","value":"\nmessage implementation, several stream decorators, and some helpful\nfunctionality like query string parsing.","position":{"start":{"line":9,"column":76,"offset":249},"end":{"line":11,"column":41,"offset":358},"indent":[1,1]}}],"position":{"start":{"line":9,"column":1,"offset":174},"end":{"line":11,"column":41,"offset":358},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://github.com/guzzle/psr7/workflows/CI/badge.svg","alt":"CI","position":{"start":{"line":13,"column":1,"offset":360},"end":{"line":13,"column":61,"offset":420},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":61,"offset":420},"end":{"line":14,"column":1,"offset":421},"indent":[1]}},{"type":"image","title":null,"url":"https://github.com/guzzle/psr7/workflows/Static%20analysis/badge.svg","alt":"Static analysis","position":{"start":{"line":14,"column":1,"offset":421},"end":{"line":14,"column":89,"offset":509},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":360},"end":{"line":14,"column":89,"offset":509},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Features","position":{"start":{"line":17,"column":4,"offset":515},"end":{"line":17,"column":12,"offset":523},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":512},"end":{"line":17,"column":12,"offset":523},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This package comes with a number of stream implementations and stream\ndecorators.","position":{"start":{"line":19,"column":1,"offset":525},"end":{"line":20,"column":12,"offset":606},"indent":[1]}}],"position":{"start":{"line":19,"column":1,"offset":525},"end":{"line":20,"column":12,"offset":606},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Installation","position":{"start":{"line":23,"column":4,"offset":612},"end":{"line":23,"column":16,"offset":624},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":609},"end":{"line":23,"column":16,"offset":624},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"composer require guzzlehttp/psr7","position":{"start":{"line":25,"column":1,"offset":626},"end":{"line":27,"column":4,"offset":671},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Version Guidance","position":{"start":{"line":29,"column":4,"offset":676},"end":{"line":29,"column":20,"offset":692},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":673},"end":{"line":29,"column":20,"offset":692},"indent":[]}},{"type":"table","align":[null,null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Version","position":{"start":{"line":31,"column":3,"offset":696},"end":{"line":31,"column":10,"offset":703},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":696},"end":{"line":31,"column":10,"offset":703},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Status","position":{"start":{"line":31,"column":13,"offset":706},"end":{"line":31,"column":19,"offset":712},"indent":[]}}],"position":{"start":{"line":31,"column":13,"offset":706},"end":{"line":31,"column":32,"offset":725},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"PHP Version","position":{"start":{"line":31,"column":35,"offset":728},"end":{"line":31,"column":46,"offset":739},"indent":[]}}],"position":{"start":{"line":31,"column":35,"offset":728},"end":{"line":31,"column":47,"offset":740},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":694},"end":{"line":31,"column":49,"offset":742},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"1.x","position":{"start":{"line":33,"column":3,"offset":794},"end":{"line":33,"column":6,"offset":797},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":794},"end":{"line":33,"column":10,"offset":801},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"EOL (2024-06-30)","position":{"start":{"line":33,"column":13,"offset":804},"end":{"line":33,"column":29,"offset":820},"indent":[]}}],"position":{"start":{"line":33,"column":13,"offset":804},"end":{"line":33,"column":32,"offset":823},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":">=5.4,<8.2","position":{"start":{"line":33,"column":35,"offset":826},"end":{"line":33,"column":45,"offset":836},"indent":[]}}],"position":{"start":{"line":33,"column":35,"offset":826},"end":{"line":33,"column":47,"offset":838},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":792},"end":{"line":33,"column":49,"offset":840},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"2.x","position":{"start":{"line":34,"column":3,"offset":843},"end":{"line":34,"column":6,"offset":846},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":843},"end":{"line":34,"column":10,"offset":850},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Latest","position":{"start":{"line":34,"column":13,"offset":853},"end":{"line":34,"column":19,"offset":859},"indent":[]}}],"position":{"start":{"line":34,"column":13,"offset":853},"end":{"line":34,"column":32,"offset":872},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":">=7.2.5,<8.5","position":{"start":{"line":34,"column":35,"offset":875},"end":{"line":34,"column":47,"offset":887},"indent":[]}}],"position":{"start":{"line":34,"column":35,"offset":875},"end":{"line":34,"column":47,"offset":887},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":841},"end":{"line":34,"column":49,"offset":889},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":694},"end":{"line":34,"column":49,"offset":889},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"AppendStream","position":{"start":{"line":37,"column":4,"offset":895},"end":{"line":37,"column":16,"offset":907},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":892},"end":{"line":37,"column":16,"offset":907},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\AppendStream","position":{"start":{"line":39,"column":1,"offset":909},"end":{"line":39,"column":31,"offset":939},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":909},"end":{"line":39,"column":31,"offset":939},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Reads from multiple streams, one after the other.","position":{"start":{"line":41,"column":1,"offset":941},"end":{"line":41,"column":50,"offset":990},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":941},"end":{"line":41,"column":50,"offset":990},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use GuzzleHttp\\Psr7;\n\n$a = Psr7\\Utils::streamFor('abc, ');\n$b = Psr7\\Utils::streamFor('123.');\n$composed = new Psr7\\AppendStream([$a, $b]);\n\n$composed->addStream(Psr7\\Utils::streamFor(' Above all listen to me'));\n\necho $composed; // abc, 123. Above all listen to me.","position":{"start":{"line":43,"column":1,"offset":992},"end":{"line":53,"column":4,"offset":1269},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"BufferStream","position":{"start":{"line":56,"column":4,"offset":1275},"end":{"line":56,"column":16,"offset":1287},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1272},"end":{"line":56,"column":16,"offset":1287},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\BufferStream","position":{"start":{"line":58,"column":1,"offset":1289},"end":{"line":58,"column":31,"offset":1319},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1289},"end":{"line":58,"column":31,"offset":1319},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Provides a buffer stream that can be written to fill a buffer, and read\nfrom to remove bytes from the buffer.","position":{"start":{"line":60,"column":1,"offset":1321},"end":{"line":61,"column":38,"offset":1430},"indent":[1]}}],"position":{"start":{"line":60,"column":1,"offset":1321},"end":{"line":61,"column":38,"offset":1430},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"This stream returns a \"hwm\" metadata value that tells upstream consumers\nwhat the configured high water mark of the stream is, or the maximum\npreferred size of the buffer.","position":{"start":{"line":63,"column":1,"offset":1432},"end":{"line":65,"column":30,"offset":1603},"indent":[1,1]}}],"position":{"start":{"line":63,"column":1,"offset":1432},"end":{"line":65,"column":30,"offset":1603},"indent":[1,1]}},{"type":"code","lang":"php","meta":null,"value":"use GuzzleHttp\\Psr7;\n\n// When more than 1024 bytes are in the buffer, it will begin returning\n// false to writes. This is an indication that writers should slow down.\n$buffer = new Psr7\\BufferStream(1024);","position":{"start":{"line":67,"column":1,"offset":1605},"end":{"line":73,"column":4,"offset":1821},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"CachingStream","position":{"start":{"line":76,"column":4,"offset":1827},"end":{"line":76,"column":17,"offset":1840},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":1824},"end":{"line":76,"column":17,"offset":1840},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CachingStream is used to allow seeking over previously read bytes on\nnon-seekable streams. This can be useful when transferring a non-seekable\nentity body fails due to needing to rewind the stream (for example, resulting\nfrom a redirect). Data that is read from the remote stream will be buffered in\na PHP temp stream so that previously read bytes are cached first in memory,\nthen on disk.","position":{"start":{"line":78,"column":1,"offset":1842},"end":{"line":83,"column":14,"offset":2235},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":78,"column":1,"offset":1842},"end":{"line":83,"column":14,"offset":2235},"indent":[1,1,1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"use GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor(fopen('http://www.google.com', 'r'));\n$stream = new Psr7\\CachingStream($original);\n\n$stream->read(1024);\necho $stream->tell();\n// 1024\n\n$stream->seek(0);\necho $stream->tell();\n// 0","position":{"start":{"line":85,"column":1,"offset":2237},"end":{"line":98,"column":4,"offset":2484},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"DroppingStream","position":{"start":{"line":101,"column":4,"offset":2490},"end":{"line":101,"column":18,"offset":2504},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":2487},"end":{"line":101,"column":18,"offset":2504},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\DroppingStream","position":{"start":{"line":103,"column":1,"offset":2506},"end":{"line":103,"column":33,"offset":2538},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":2506},"end":{"line":103,"column":33,"offset":2538},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Stream decorator that begins dropping data once the size of the underlying\nstream becomes too full.","position":{"start":{"line":105,"column":1,"offset":2540},"end":{"line":106,"column":25,"offset":2639},"indent":[1]}}],"position":{"start":{"line":105,"column":1,"offset":2540},"end":{"line":106,"column":25,"offset":2639},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"use GuzzleHttp\\Psr7;\n\n// Create an empty stream\n$stream = Psr7\\Utils::streamFor();\n\n// Start dropping data when the stream has more than 10 bytes\n$dropping = new Psr7\\DroppingStream($stream, 10);\n\n$dropping->write('01234567890123456789');\necho $stream; // 0123456789","position":{"start":{"line":108,"column":1,"offset":2641},"end":{"line":119,"column":4,"offset":2918},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"FnStream","position":{"start":{"line":122,"column":4,"offset":2924},"end":{"line":122,"column":12,"offset":2932},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2921},"end":{"line":122,"column":12,"offset":2932},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\FnStream","position":{"start":{"line":124,"column":1,"offset":2934},"end":{"line":124,"column":27,"offset":2960},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":2934},"end":{"line":124,"column":27,"offset":2960},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Compose stream implementations based on a hash of functions.","position":{"start":{"line":126,"column":1,"offset":2962},"end":{"line":126,"column":61,"offset":3022},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":2962},"end":{"line":126,"column":61,"offset":3022},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Allows for easy testing and extension of a provided stream without needing\nto create a concrete class for a simple extension point.","position":{"start":{"line":128,"column":1,"offset":3024},"end":{"line":129,"column":57,"offset":3155},"indent":[1]}}],"position":{"start":{"line":128,"column":1,"offset":3024},"end":{"line":129,"column":57,"offset":3155},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"\nuse GuzzleHttp\\Psr7;\n\n$stream = Psr7\\Utils::streamFor('hi');\n$fnStream = Psr7\\FnStream::decorate($stream, [\n    'rewind' => function () use ($stream) {\n        echo 'About to rewind - ';\n        $stream->rewind();\n        echo 'rewound!';\n    }\n]);\n\n$fnStream->rewind();\n// Outputs: About to rewind - rewound!","position":{"start":{"line":131,"column":1,"offset":3157},"end":{"line":146,"column":4,"offset":3478},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"InflateStream","position":{"start":{"line":149,"column":4,"offset":3484},"end":{"line":149,"column":17,"offset":3497},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":3481},"end":{"line":149,"column":17,"offset":3497},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\InflateStream","position":{"start":{"line":151,"column":1,"offset":3499},"end":{"line":151,"column":32,"offset":3530},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":3499},"end":{"line":151,"column":32,"offset":3530},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Uses PHP's zlib.inflate filter to inflate zlib (HTTP deflate, RFC1950) or gzipped (RFC1952) content.","position":{"start":{"line":153,"column":1,"offset":3532},"end":{"line":153,"column":101,"offset":3632},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":3532},"end":{"line":153,"column":101,"offset":3632},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This stream decorator converts the provided stream to a PHP stream resource,\nthen appends the zlib.inflate filter. The stream is then converted back\nto a Guzzle stream resource to be used as a Guzzle stream.","position":{"start":{"line":155,"column":1,"offset":3634},"end":{"line":157,"column":59,"offset":3841},"indent":[1,1]}}],"position":{"start":{"line":155,"column":1,"offset":3634},"end":{"line":157,"column":59,"offset":3841},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"LazyOpenStream","position":{"start":{"line":160,"column":4,"offset":3847},"end":{"line":160,"column":18,"offset":3861},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":3844},"end":{"line":160,"column":18,"offset":3861},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\LazyOpenStream","position":{"start":{"line":162,"column":1,"offset":3863},"end":{"line":162,"column":33,"offset":3895},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":3863},"end":{"line":162,"column":33,"offset":3895},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lazily reads or writes to a file that is opened only after an IO operation\ntake place on the stream.","position":{"start":{"line":164,"column":1,"offset":3897},"end":{"line":165,"column":26,"offset":3997},"indent":[1]}}],"position":{"start":{"line":164,"column":1,"offset":3897},"end":{"line":165,"column":26,"offset":3997},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"use GuzzleHttp\\Psr7;\n\n$stream = new Psr7\\LazyOpenStream('/path/to/file', 'r');\n// The file has not yet been opened...\n\necho $stream->read(10);\n// The file is opened and read from only when needed.","position":{"start":{"line":167,"column":1,"offset":3999},"end":{"line":175,"column":4,"offset":4206},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"LimitStream","position":{"start":{"line":178,"column":4,"offset":4212},"end":{"line":178,"column":15,"offset":4223},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":4209},"end":{"line":178,"column":15,"offset":4223},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\LimitStream","position":{"start":{"line":180,"column":1,"offset":4225},"end":{"line":180,"column":30,"offset":4254},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":4225},"end":{"line":180,"column":30,"offset":4254},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"LimitStream can be used to read a subset or slice of an existing stream object.\nThis can be useful for breaking a large file into smaller pieces to be sent in\nchunks (e.g. Amazon S3's multipart upload API).","position":{"start":{"line":182,"column":1,"offset":4256},"end":{"line":184,"column":48,"offset":4462},"indent":[1,1]}}],"position":{"start":{"line":182,"column":1,"offset":4256},"end":{"line":184,"column":48,"offset":4462},"indent":[1,1]}},{"type":"code","lang":"php","meta":null,"value":"use GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor(fopen('/tmp/test.txt', 'r+'));\necho $original->getSize();\n// >>> 1048576\n\n// Limit the size of the body to 1024 bytes and start reading from byte 2048\n$stream = new Psr7\\LimitStream($original, 1024, 2048);\necho $stream->getSize();\n// >>> 1024\necho $stream->tell();\n// >>> 0","position":{"start":{"line":186,"column":1,"offset":4464},"end":{"line":199,"column":4,"offset":4804},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"MultipartStream","position":{"start":{"line":202,"column":4,"offset":4810},"end":{"line":202,"column":19,"offset":4825},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":4807},"end":{"line":202,"column":19,"offset":4825},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\MultipartStream","position":{"start":{"line":204,"column":1,"offset":4827},"end":{"line":204,"column":34,"offset":4860},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":4827},"end":{"line":204,"column":34,"offset":4860},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Stream that when read returns bytes for a streaming multipart or\nmultipart/form-data stream.","position":{"start":{"line":206,"column":1,"offset":4862},"end":{"line":207,"column":28,"offset":4954},"indent":[1]}}],"position":{"start":{"line":206,"column":1,"offset":4862},"end":{"line":207,"column":28,"offset":4954},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"NoSeekStream","position":{"start":{"line":210,"column":4,"offset":4960},"end":{"line":210,"column":16,"offset":4972},"indent":[]}}],"position":{"start":{"line":210,"column":1,"offset":4957},"end":{"line":210,"column":16,"offset":4972},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\NoSeekStream","position":{"start":{"line":212,"column":1,"offset":4974},"end":{"line":212,"column":31,"offset":5004},"indent":[]}}],"position":{"start":{"line":212,"column":1,"offset":4974},"end":{"line":212,"column":31,"offset":5004},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"NoSeekStream wraps a stream and does not allow seeking.","position":{"start":{"line":214,"column":1,"offset":5006},"end":{"line":214,"column":56,"offset":5061},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":5006},"end":{"line":214,"column":56,"offset":5061},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor('foo');\n$noSeek = new Psr7\\NoSeekStream($original);\n\necho $noSeek->read(3);\n// foo\nvar_export($noSeek->isSeekable());\n// false\n$noSeek->seek(0);\nvar_export($noSeek->read(3));\n// NULL","position":{"start":{"line":216,"column":1,"offset":5063},"end":{"line":229,"column":4,"offset":5312},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PumpStream","position":{"start":{"line":232,"column":4,"offset":5318},"end":{"line":232,"column":14,"offset":5328},"indent":[]}}],"position":{"start":{"line":232,"column":1,"offset":5315},"end":{"line":232,"column":14,"offset":5328},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\PumpStream","position":{"start":{"line":234,"column":1,"offset":5330},"end":{"line":234,"column":29,"offset":5358},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":5330},"end":{"line":234,"column":29,"offset":5358},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Provides a read only stream that pumps data from a PHP callable.","position":{"start":{"line":236,"column":1,"offset":5360},"end":{"line":236,"column":65,"offset":5424},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":5360},"end":{"line":236,"column":65,"offset":5424},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When invoking the provided callable, the PumpStream will pass the amount of\ndata requested to read to the callable. The callable can choose to ignore\nthis value and return fewer or more bytes than requested. Any extra data\nreturned by the provided callable is buffered internally until drained using\nthe read() function of the PumpStream. The provided callable MUST return\nfalse when there is no more data to read.","position":{"start":{"line":238,"column":1,"offset":5426},"end":{"line":243,"column":42,"offset":5840},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":238,"column":1,"offset":5426},"end":{"line":243,"column":42,"offset":5840},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Implementing stream decorators","position":{"start":{"line":246,"column":4,"offset":5846},"end":{"line":246,"column":34,"offset":5876},"indent":[]}}],"position":{"start":{"line":246,"column":1,"offset":5843},"end":{"line":246,"column":34,"offset":5876},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Creating a stream decorator is very easy thanks to the\n","position":{"start":{"line":248,"column":1,"offset":5878},"end":{"line":249,"column":1,"offset":5933},"indent":[1]}},{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\StreamDecoratorTrait","position":{"start":{"line":249,"column":1,"offset":5933},"end":{"line":249,"column":39,"offset":5971},"indent":[]}},{"type":"text","value":". This trait provides methods that\nimplement ","position":{"start":{"line":249,"column":39,"offset":5971},"end":{"line":250,"column":11,"offset":6016},"indent":[1]}},{"type":"inlineCode","value":"Psr\\Http\\Message\\StreamInterface","position":{"start":{"line":250,"column":11,"offset":6016},"end":{"line":250,"column":45,"offset":6050},"indent":[]}},{"type":"text","value":" by proxying to an underlying\nstream. Just ","position":{"start":{"line":250,"column":45,"offset":6050},"end":{"line":251,"column":14,"offset":6093},"indent":[1]}},{"type":"inlineCode","value":"use","position":{"start":{"line":251,"column":14,"offset":6093},"end":{"line":251,"column":19,"offset":6098},"indent":[]}},{"type":"text","value":" the ","position":{"start":{"line":251,"column":19,"offset":6098},"end":{"line":251,"column":24,"offset":6103},"indent":[]}},{"type":"inlineCode","value":"StreamDecoratorTrait","position":{"start":{"line":251,"column":24,"offset":6103},"end":{"line":251,"column":46,"offset":6125},"indent":[]}},{"type":"text","value":" and implement your custom\nmethods.","position":{"start":{"line":251,"column":46,"offset":6125},"end":{"line":252,"column":9,"offset":6160},"indent":[1]}}],"position":{"start":{"line":248,"column":1,"offset":5878},"end":{"line":252,"column":9,"offset":6160},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For example, let's say we wanted to call a specific function each time the last\nbyte is read from a stream. This could be implemented by overriding the\n","position":{"start":{"line":254,"column":1,"offset":6162},"end":{"line":256,"column":1,"offset":6314},"indent":[1,1]}},{"type":"inlineCode","value":"read()","position":{"start":{"line":256,"column":1,"offset":6314},"end":{"line":256,"column":9,"offset":6322},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":256,"column":9,"offset":6322},"end":{"line":256,"column":17,"offset":6330},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":6162},"end":{"line":256,"column":17,"offset":6330},"indent":[1,1]}},{"type":"code","lang":"php","meta":null,"value":"use Psr\\Http\\Message\\StreamInterface;\nuse GuzzleHttp\\Psr7\\StreamDecoratorTrait;\n\nclass EofCallbackStream implements StreamInterface\n{\n    use StreamDecoratorTrait;\n\n    private $callback;\n\n    private $stream;\n\n    public function __construct(StreamInterface $stream, callable $cb)\n    {\n        $this->stream = $stream;\n        $this->callback = $cb;\n    }\n\n    public function read($length)\n    {\n        $result = $this->stream->read($length);\n\n        // Invoke the callback when EOF is hit.\n        if ($this->eof()) {\n            ($this->callback)();\n        }\n\n        return $result;\n    }\n}","position":{"start":{"line":258,"column":1,"offset":6332},"end":{"line":288,"column":4,"offset":6942},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This decorator could be added to any existing stream and used like so:","position":{"start":{"line":290,"column":1,"offset":6944},"end":{"line":290,"column":71,"offset":7014},"indent":[]}}],"position":{"start":{"line":290,"column":1,"offset":6944},"end":{"line":290,"column":71,"offset":7014},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor('foo');\n\n$eofStream = new EofCallbackStream($original, function () {\n    echo 'EOF!';\n});\n\n$eofStream->read(2);\n$eofStream->read(1);\n// echoes \"EOF!\"\n$eofStream->seek(0);\n$eofStream->read(3);\n// echoes \"EOF!\"","position":{"start":{"line":292,"column":1,"offset":7016},"end":{"line":307,"column":4,"offset":7291},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP StreamWrapper","position":{"start":{"line":310,"column":4,"offset":7297},"end":{"line":310,"column":21,"offset":7314},"indent":[]}}],"position":{"start":{"line":310,"column":1,"offset":7294},"end":{"line":310,"column":21,"offset":7314},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can use the ","position":{"start":{"line":312,"column":1,"offset":7316},"end":{"line":312,"column":17,"offset":7332},"indent":[]}},{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\StreamWrapper","position":{"start":{"line":312,"column":17,"offset":7332},"end":{"line":312,"column":48,"offset":7363},"indent":[]}},{"type":"text","value":" class if you need to use a\nPSR-7 stream as a PHP stream resource.","position":{"start":{"line":312,"column":48,"offset":7363},"end":{"line":313,"column":39,"offset":7429},"indent":[1]}}],"position":{"start":{"line":312,"column":1,"offset":7316},"end":{"line":313,"column":39,"offset":7429},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Use the ","position":{"start":{"line":315,"column":1,"offset":7431},"end":{"line":315,"column":9,"offset":7439},"indent":[]}},{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\StreamWrapper::getResource()","position":{"start":{"line":315,"column":9,"offset":7439},"end":{"line":315,"column":55,"offset":7485},"indent":[]}},{"type":"text","value":" method to create a PHP\nstream from a PSR-7 stream.","position":{"start":{"line":315,"column":55,"offset":7485},"end":{"line":316,"column":28,"offset":7536},"indent":[1]}}],"position":{"start":{"line":315,"column":1,"offset":7431},"end":{"line":316,"column":28,"offset":7536},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"use GuzzleHttp\\Psr7\\StreamWrapper;\n\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor('hello!');\n$resource = StreamWrapper::getResource($stream);\necho fread($resource, 6); // outputs hello!","position":{"start":{"line":318,"column":1,"offset":7538},"end":{"line":324,"column":4,"offset":7731},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Static API","position":{"start":{"line":327,"column":3,"offset":7736},"end":{"line":327,"column":13,"offset":7746},"indent":[]}}],"position":{"start":{"line":327,"column":1,"offset":7734},"end":{"line":327,"column":13,"offset":7746},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are various static methods available under the ","position":{"start":{"line":329,"column":1,"offset":7748},"end":{"line":329,"column":54,"offset":7801},"indent":[]}},{"type":"inlineCode","value":"GuzzleHttp\\Psr7","position":{"start":{"line":329,"column":54,"offset":7801},"end":{"line":329,"column":71,"offset":7818},"indent":[]}},{"type":"text","value":" namespace.","position":{"start":{"line":329,"column":71,"offset":7818},"end":{"line":329,"column":82,"offset":7829},"indent":[]}}],"position":{"start":{"line":329,"column":1,"offset":7748},"end":{"line":329,"column":82,"offset":7829},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Message::toString","position":{"start":{"line":332,"column":4,"offset":7835},"end":{"line":332,"column":39,"offset":7870},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":7832},"end":{"line":332,"column":39,"offset":7870},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function toString(MessageInterface $message): string","position":{"start":{"line":334,"column":1,"offset":7872},"end":{"line":334,"column":69,"offset":7940},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":7872},"end":{"line":334,"column":69,"offset":7940},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Returns the string representation of an HTTP message.","position":{"start":{"line":336,"column":1,"offset":7942},"end":{"line":336,"column":54,"offset":7995},"indent":[]}}],"position":{"start":{"line":336,"column":1,"offset":7942},"end":{"line":336,"column":54,"offset":7995},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$request = new GuzzleHttp\\Psr7\\Request('GET', 'http://example.com');\necho GuzzleHttp\\Psr7\\Message::toString($request);","position":{"start":{"line":338,"column":1,"offset":7997},"end":{"line":341,"column":4,"offset":8126},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Message::bodySummary","position":{"start":{"line":344,"column":4,"offset":8132},"end":{"line":344,"column":42,"offset":8170},"indent":[]}}],"position":{"start":{"line":344,"column":1,"offset":8129},"end":{"line":344,"column":42,"offset":8170},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function bodySummary(MessageInterface $message, int $truncateAt = 120): string|null","position":{"start":{"line":346,"column":1,"offset":8172},"end":{"line":346,"column":100,"offset":8271},"indent":[]}}],"position":{"start":{"line":346,"column":1,"offset":8172},"end":{"line":346,"column":100,"offset":8271},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Get a short summary of the message body.","position":{"start":{"line":348,"column":1,"offset":8273},"end":{"line":348,"column":41,"offset":8313},"indent":[]}}],"position":{"start":{"line":348,"column":1,"offset":8273},"end":{"line":348,"column":41,"offset":8313},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Will return ","position":{"start":{"line":350,"column":1,"offset":8315},"end":{"line":350,"column":13,"offset":8327},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":350,"column":13,"offset":8327},"end":{"line":350,"column":19,"offset":8333},"indent":[]}},{"type":"text","value":" if the response is not printable.","position":{"start":{"line":350,"column":19,"offset":8333},"end":{"line":350,"column":53,"offset":8367},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":8315},"end":{"line":350,"column":53,"offset":8367},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Message::rewindBody","position":{"start":{"line":353,"column":4,"offset":8373},"end":{"line":353,"column":41,"offset":8410},"indent":[]}}],"position":{"start":{"line":353,"column":1,"offset":8370},"end":{"line":353,"column":41,"offset":8410},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function rewindBody(MessageInterface $message): void","position":{"start":{"line":355,"column":1,"offset":8412},"end":{"line":355,"column":69,"offset":8480},"indent":[]}}],"position":{"start":{"line":355,"column":1,"offset":8412},"end":{"line":355,"column":69,"offset":8480},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Attempts to rewind a message body and throws an exception on failure.","position":{"start":{"line":357,"column":1,"offset":8482},"end":{"line":357,"column":70,"offset":8551},"indent":[]}}],"position":{"start":{"line":357,"column":1,"offset":8482},"end":{"line":357,"column":70,"offset":8551},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The body of the message will only be rewound if a call to ","position":{"start":{"line":359,"column":1,"offset":8553},"end":{"line":359,"column":59,"offset":8611},"indent":[]}},{"type":"inlineCode","value":"tell()","position":{"start":{"line":359,"column":59,"offset":8611},"end":{"line":359,"column":67,"offset":8619},"indent":[]}},{"type":"text","value":"\nreturns a value other than ","position":{"start":{"line":359,"column":67,"offset":8619},"end":{"line":360,"column":28,"offset":8647},"indent":[1]}},{"type":"inlineCode","value":"0","position":{"start":{"line":360,"column":28,"offset":8647},"end":{"line":360,"column":31,"offset":8650},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":360,"column":31,"offset":8650},"end":{"line":360,"column":32,"offset":8651},"indent":[]}}],"position":{"start":{"line":359,"column":1,"offset":8553},"end":{"line":360,"column":32,"offset":8651},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Message::parseMessage","position":{"start":{"line":363,"column":4,"offset":8657},"end":{"line":363,"column":43,"offset":8696},"indent":[]}}],"position":{"start":{"line":363,"column":1,"offset":8654},"end":{"line":363,"column":43,"offset":8696},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function parseMessage(string $message): array","position":{"start":{"line":365,"column":1,"offset":8698},"end":{"line":365,"column":62,"offset":8759},"indent":[]}}],"position":{"start":{"line":365,"column":1,"offset":8698},"end":{"line":365,"column":62,"offset":8759},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Parses an HTTP message into an associative array.","position":{"start":{"line":367,"column":1,"offset":8761},"end":{"line":367,"column":50,"offset":8810},"indent":[]}}],"position":{"start":{"line":367,"column":1,"offset":8761},"end":{"line":367,"column":50,"offset":8810},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The array contains the \"start-line\" key containing the start line of\nthe message, \"headers\" key containing an associative array of header\narray values, and a \"body\" key containing the body of the message.","position":{"start":{"line":369,"column":1,"offset":8812},"end":{"line":371,"column":67,"offset":9016},"indent":[1,1]}}],"position":{"start":{"line":369,"column":1,"offset":8812},"end":{"line":371,"column":67,"offset":9016},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Message::parseRequestUri","position":{"start":{"line":374,"column":4,"offset":9022},"end":{"line":374,"column":46,"offset":9064},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":9019},"end":{"line":374,"column":46,"offset":9064},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function parseRequestUri(string $path, array $headers): string","position":{"start":{"line":376,"column":1,"offset":9066},"end":{"line":376,"column":79,"offset":9144},"indent":[]}}],"position":{"start":{"line":376,"column":1,"offset":9066},"end":{"line":376,"column":79,"offset":9144},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Constructs a URI for an HTTP request message.","position":{"start":{"line":378,"column":1,"offset":9146},"end":{"line":378,"column":46,"offset":9191},"indent":[]}}],"position":{"start":{"line":378,"column":1,"offset":9146},"end":{"line":378,"column":46,"offset":9191},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Message::parseRequest","position":{"start":{"line":381,"column":4,"offset":9197},"end":{"line":381,"column":43,"offset":9236},"indent":[]}}],"position":{"start":{"line":381,"column":1,"offset":9194},"end":{"line":381,"column":43,"offset":9236},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function parseRequest(string $message): Request","position":{"start":{"line":383,"column":1,"offset":9238},"end":{"line":383,"column":64,"offset":9301},"indent":[]}}],"position":{"start":{"line":383,"column":1,"offset":9238},"end":{"line":383,"column":64,"offset":9301},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Parses a request message string into a request object.","position":{"start":{"line":385,"column":1,"offset":9303},"end":{"line":385,"column":55,"offset":9357},"indent":[]}}],"position":{"start":{"line":385,"column":1,"offset":9303},"end":{"line":385,"column":55,"offset":9357},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Message::parseResponse","position":{"start":{"line":388,"column":4,"offset":9363},"end":{"line":388,"column":44,"offset":9403},"indent":[]}}],"position":{"start":{"line":388,"column":1,"offset":9360},"end":{"line":388,"column":44,"offset":9403},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function parseResponse(string $message): Response","position":{"start":{"line":390,"column":1,"offset":9405},"end":{"line":390,"column":66,"offset":9470},"indent":[]}}],"position":{"start":{"line":390,"column":1,"offset":9405},"end":{"line":390,"column":66,"offset":9470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Parses a response message string into a response object.","position":{"start":{"line":392,"column":1,"offset":9472},"end":{"line":392,"column":57,"offset":9528},"indent":[]}}],"position":{"start":{"line":392,"column":1,"offset":9472},"end":{"line":392,"column":57,"offset":9528},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Header::parse","position":{"start":{"line":395,"column":4,"offset":9534},"end":{"line":395,"column":35,"offset":9565},"indent":[]}}],"position":{"start":{"line":395,"column":1,"offset":9531},"end":{"line":395,"column":35,"offset":9565},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function parse(string|array $header): array","position":{"start":{"line":397,"column":1,"offset":9567},"end":{"line":397,"column":60,"offset":9626},"indent":[]}}],"position":{"start":{"line":397,"column":1,"offset":9567},"end":{"line":397,"column":60,"offset":9626},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Parse an array of header values containing \";\" separated data into an\narray of associative arrays representing the header key value pair data\nof the header. When a parameter does not contain a value, but just\ncontains a key, this function will inject a key with a '' string value.","position":{"start":{"line":399,"column":1,"offset":9628},"end":{"line":402,"column":72,"offset":9908},"indent":[1,1,1]}}],"position":{"start":{"line":399,"column":1,"offset":9628},"end":{"line":402,"column":72,"offset":9908},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Header::splitList","position":{"start":{"line":405,"column":4,"offset":9914},"end":{"line":405,"column":39,"offset":9949},"indent":[]}}],"position":{"start":{"line":405,"column":1,"offset":9911},"end":{"line":405,"column":39,"offset":9949},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function splitList(string|string[] $header): string[]","position":{"start":{"line":407,"column":1,"offset":9951},"end":{"line":407,"column":70,"offset":10020},"indent":[]}}],"position":{"start":{"line":407,"column":1,"offset":9951},"end":{"line":407,"column":70,"offset":10020},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Splits a HTTP header defined to contain a comma-separated list into\neach individual value:","position":{"start":{"line":409,"column":1,"offset":10022},"end":{"line":410,"column":23,"offset":10112},"indent":[1]}}],"position":{"start":{"line":409,"column":1,"offset":10022},"end":{"line":410,"column":23,"offset":10112},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"$knownEtags = Header::splitList($request->getHeader('if-none-match'));","position":{"start":{"line":412,"column":1,"offset":10114},"end":{"line":414,"column":4,"offset":10192},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Example headers include ","position":{"start":{"line":416,"column":1,"offset":10194},"end":{"line":416,"column":25,"offset":10218},"indent":[]}},{"type":"inlineCode","value":"accept","position":{"start":{"line":416,"column":25,"offset":10218},"end":{"line":416,"column":33,"offset":10226},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":416,"column":33,"offset":10226},"end":{"line":416,"column":35,"offset":10228},"indent":[]}},{"type":"inlineCode","value":"cache-control","position":{"start":{"line":416,"column":35,"offset":10228},"end":{"line":416,"column":50,"offset":10243},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":416,"column":50,"offset":10243},"end":{"line":416,"column":55,"offset":10248},"indent":[]}},{"type":"inlineCode","value":"if-none-match","position":{"start":{"line":416,"column":55,"offset":10248},"end":{"line":416,"column":70,"offset":10263},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":416,"column":70,"offset":10263},"end":{"line":416,"column":71,"offset":10264},"indent":[]}}],"position":{"start":{"line":416,"column":1,"offset":10194},"end":{"line":416,"column":71,"offset":10264},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Header::normalize","position":{"start":{"line":419,"column":4,"offset":10270},"end":{"line":419,"column":39,"offset":10305},"indent":[]}},{"type":"text","value":" (deprecated)","position":{"start":{"line":419,"column":39,"offset":10305},"end":{"line":419,"column":52,"offset":10318},"indent":[]}}],"position":{"start":{"line":419,"column":1,"offset":10267},"end":{"line":419,"column":52,"offset":10318},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function normalize(string|array $header): array","position":{"start":{"line":421,"column":1,"offset":10320},"end":{"line":421,"column":64,"offset":10383},"indent":[]}}],"position":{"start":{"line":421,"column":1,"offset":10320},"end":{"line":421,"column":64,"offset":10383},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Header::normalize()","position":{"start":{"line":423,"column":1,"offset":10385},"end":{"line":423,"column":22,"offset":10406},"indent":[]}},{"type":"text","value":" is deprecated in favor of ","position":{"start":{"line":423,"column":22,"offset":10406},"end":{"line":423,"column":49,"offset":10433},"indent":[]}},{"type":"link","title":null,"url":"README.md#guzzlehttppsr7headersplitlist","children":[{"type":"inlineCode","value":"Header::splitList()","position":{"start":{"line":423,"column":50,"offset":10434},"end":{"line":423,"column":71,"offset":10455},"indent":[]}}],"position":{"start":{"line":423,"column":49,"offset":10433},"end":{"line":423,"column":113,"offset":10497},"indent":[]}},{"type":"text","value":"\nwhich performs the same operation with a cleaned up API and improved\ndocumentation.","position":{"start":{"line":423,"column":113,"offset":10497},"end":{"line":425,"column":15,"offset":10581},"indent":[1,1]}}],"position":{"start":{"line":423,"column":1,"offset":10385},"end":{"line":425,"column":15,"offset":10581},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Converts an array of header values that may contain comma separated\nheaders into an array of headers with no comma separated values.","position":{"start":{"line":427,"column":1,"offset":10583},"end":{"line":428,"column":65,"offset":10715},"indent":[1]}}],"position":{"start":{"line":427,"column":1,"offset":10583},"end":{"line":428,"column":65,"offset":10715},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Query::parse","position":{"start":{"line":431,"column":4,"offset":10721},"end":{"line":431,"column":34,"offset":10751},"indent":[]}}],"position":{"start":{"line":431,"column":1,"offset":10718},"end":{"line":431,"column":34,"offset":10751},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function parse(string $str, int|bool $urlEncoding = true): array","position":{"start":{"line":433,"column":1,"offset":10753},"end":{"line":433,"column":81,"offset":10833},"indent":[]}}],"position":{"start":{"line":433,"column":1,"offset":10753},"end":{"line":433,"column":81,"offset":10833},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Parse a query string into an associative array.","position":{"start":{"line":435,"column":1,"offset":10835},"end":{"line":435,"column":48,"offset":10882},"indent":[]}}],"position":{"start":{"line":435,"column":1,"offset":10835},"end":{"line":435,"column":48,"offset":10882},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If multiple values are found for the same key, the value of that key\nvalue pair will become an array. This function does not parse nested\nPHP style arrays into an associative array (e.g., ","position":{"start":{"line":437,"column":1,"offset":10884},"end":{"line":439,"column":51,"offset":11072},"indent":[1,1]}},{"type":"inlineCode","value":"foo[a]=1&foo[b]=2","position":{"start":{"line":439,"column":51,"offset":11072},"end":{"line":439,"column":70,"offset":11091},"indent":[]}},{"type":"text","value":"\nwill be parsed into ","position":{"start":{"line":439,"column":70,"offset":11091},"end":{"line":440,"column":21,"offset":11112},"indent":[1]}},{"type":"inlineCode","value":"['foo[a]' => '1', 'foo[b]' => '2'])","position":{"start":{"line":440,"column":21,"offset":11112},"end":{"line":440,"column":58,"offset":11149},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":440,"column":58,"offset":11149},"end":{"line":440,"column":59,"offset":11150},"indent":[]}}],"position":{"start":{"line":437,"column":1,"offset":10884},"end":{"line":440,"column":59,"offset":11150},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Query::build","position":{"start":{"line":443,"column":4,"offset":11156},"end":{"line":443,"column":34,"offset":11186},"indent":[]}}],"position":{"start":{"line":443,"column":1,"offset":11153},"end":{"line":443,"column":34,"offset":11186},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function build(array $params, int|false $encoding = PHP_QUERY_RFC3986, bool $treatBoolsAsInts = true): string","position":{"start":{"line":445,"column":1,"offset":11188},"end":{"line":445,"column":126,"offset":11313},"indent":[]}}],"position":{"start":{"line":445,"column":1,"offset":11188},"end":{"line":445,"column":126,"offset":11313},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Build a query string from an array of key value pairs.","position":{"start":{"line":447,"column":1,"offset":11315},"end":{"line":447,"column":55,"offset":11369},"indent":[]}}],"position":{"start":{"line":447,"column":1,"offset":11315},"end":{"line":447,"column":55,"offset":11369},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This function can use the return value of ","position":{"start":{"line":449,"column":1,"offset":11371},"end":{"line":449,"column":43,"offset":11413},"indent":[]}},{"type":"inlineCode","value":"parse()","position":{"start":{"line":449,"column":43,"offset":11413},"end":{"line":449,"column":52,"offset":11422},"indent":[]}},{"type":"text","value":" to build a query\nstring. This function does not modify the provided keys when an array is\nencountered (like ","position":{"start":{"line":449,"column":52,"offset":11422},"end":{"line":451,"column":19,"offset":11531},"indent":[1,1]}},{"type":"inlineCode","value":"http_build_query()","position":{"start":{"line":451,"column":19,"offset":11531},"end":{"line":451,"column":39,"offset":11551},"indent":[]}},{"type":"text","value":" would).","position":{"start":{"line":451,"column":39,"offset":11551},"end":{"line":451,"column":47,"offset":11559},"indent":[]}}],"position":{"start":{"line":449,"column":1,"offset":11371},"end":{"line":451,"column":47,"offset":11559},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Utils::caselessRemove","position":{"start":{"line":454,"column":4,"offset":11565},"end":{"line":454,"column":43,"offset":11604},"indent":[]}}],"position":{"start":{"line":454,"column":1,"offset":11562},"end":{"line":454,"column":43,"offset":11604},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function caselessRemove(iterable<string> $keys, $keys, array $data): array","position":{"start":{"line":456,"column":1,"offset":11606},"end":{"line":456,"column":91,"offset":11696},"indent":[]}}],"position":{"start":{"line":456,"column":1,"offset":11606},"end":{"line":456,"column":91,"offset":11696},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Remove the items given by the keys, case insensitively from the data.","position":{"start":{"line":458,"column":1,"offset":11698},"end":{"line":458,"column":70,"offset":11767},"indent":[]}}],"position":{"start":{"line":458,"column":1,"offset":11698},"end":{"line":458,"column":70,"offset":11767},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Utils::copyToStream","position":{"start":{"line":461,"column":4,"offset":11773},"end":{"line":461,"column":41,"offset":11810},"indent":[]}}],"position":{"start":{"line":461,"column":1,"offset":11770},"end":{"line":461,"column":41,"offset":11810},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function copyToStream(StreamInterface $source, StreamInterface $dest, int $maxLen = -1): void","position":{"start":{"line":463,"column":1,"offset":11812},"end":{"line":463,"column":110,"offset":11921},"indent":[]}}],"position":{"start":{"line":463,"column":1,"offset":11812},"end":{"line":463,"column":110,"offset":11921},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Copy the contents of a stream into another stream until the given number\nof bytes have been read.","position":{"start":{"line":465,"column":1,"offset":11923},"end":{"line":466,"column":25,"offset":12020},"indent":[1]}}],"position":{"start":{"line":465,"column":1,"offset":11923},"end":{"line":466,"column":25,"offset":12020},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Utils::copyToString","position":{"start":{"line":469,"column":4,"offset":12026},"end":{"line":469,"column":41,"offset":12063},"indent":[]}}],"position":{"start":{"line":469,"column":1,"offset":12023},"end":{"line":469,"column":41,"offset":12063},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function copyToString(StreamInterface $stream, int $maxLen = -1): string","position":{"start":{"line":471,"column":1,"offset":12065},"end":{"line":471,"column":89,"offset":12153},"indent":[]}}],"position":{"start":{"line":471,"column":1,"offset":12065},"end":{"line":471,"column":89,"offset":12153},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Copy the contents of a stream into a string until the given number of\nbytes have been read.","position":{"start":{"line":473,"column":1,"offset":12155},"end":{"line":474,"column":22,"offset":12246},"indent":[1]}}],"position":{"start":{"line":473,"column":1,"offset":12155},"end":{"line":474,"column":22,"offset":12246},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Utils::hash","position":{"start":{"line":477,"column":4,"offset":12252},"end":{"line":477,"column":33,"offset":12281},"indent":[]}}],"position":{"start":{"line":477,"column":1,"offset":12249},"end":{"line":477,"column":33,"offset":12281},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function hash(StreamInterface $stream, string $algo, bool $rawOutput = false): string","position":{"start":{"line":479,"column":1,"offset":12283},"end":{"line":479,"column":102,"offset":12384},"indent":[]}}],"position":{"start":{"line":479,"column":1,"offset":12283},"end":{"line":479,"column":102,"offset":12384},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Calculate a hash of a stream.","position":{"start":{"line":481,"column":1,"offset":12386},"end":{"line":481,"column":30,"offset":12415},"indent":[]}}],"position":{"start":{"line":481,"column":1,"offset":12386},"end":{"line":481,"column":30,"offset":12415},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This method reads the entire stream to calculate a rolling hash, based on\nPHP's ","position":{"start":{"line":483,"column":1,"offset":12417},"end":{"line":484,"column":7,"offset":12497},"indent":[1]}},{"type":"inlineCode","value":"hash_init","position":{"start":{"line":484,"column":7,"offset":12497},"end":{"line":484,"column":18,"offset":12508},"indent":[]}},{"type":"text","value":" functions.","position":{"start":{"line":484,"column":18,"offset":12508},"end":{"line":484,"column":29,"offset":12519},"indent":[]}}],"position":{"start":{"line":483,"column":1,"offset":12417},"end":{"line":484,"column":29,"offset":12519},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Utils::modifyRequest","position":{"start":{"line":487,"column":4,"offset":12525},"end":{"line":487,"column":42,"offset":12563},"indent":[]}}],"position":{"start":{"line":487,"column":1,"offset":12522},"end":{"line":487,"column":42,"offset":12563},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function modifyRequest(RequestInterface $request, array $changes): RequestInterface","position":{"start":{"line":489,"column":1,"offset":12565},"end":{"line":489,"column":100,"offset":12664},"indent":[]}}],"position":{"start":{"line":489,"column":1,"offset":12565},"end":{"line":489,"column":100,"offset":12664},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Clone and modify a request with the given changes.","position":{"start":{"line":491,"column":1,"offset":12666},"end":{"line":491,"column":51,"offset":12716},"indent":[]}}],"position":{"start":{"line":491,"column":1,"offset":12666},"end":{"line":491,"column":51,"offset":12716},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This method is useful for reducing the number of clones needed to mutate\na message.","position":{"start":{"line":493,"column":1,"offset":12718},"end":{"line":494,"column":11,"offset":12801},"indent":[1]}}],"position":{"start":{"line":493,"column":1,"offset":12718},"end":{"line":494,"column":11,"offset":12801},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"method: (string) Changes the HTTP method.","position":{"start":{"line":496,"column":3,"offset":12805},"end":{"line":496,"column":44,"offset":12846},"indent":[]}}],"position":{"start":{"line":496,"column":3,"offset":12805},"end":{"line":496,"column":44,"offset":12846},"indent":[]}}],"position":{"start":{"line":496,"column":1,"offset":12803},"end":{"line":496,"column":44,"offset":12846},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"set_headers: (array) Sets the given headers.","position":{"start":{"line":497,"column":3,"offset":12849},"end":{"line":497,"column":47,"offset":12893},"indent":[]}}],"position":{"start":{"line":497,"column":3,"offset":12849},"end":{"line":497,"column":47,"offset":12893},"indent":[]}}],"position":{"start":{"line":497,"column":1,"offset":12847},"end":{"line":497,"column":47,"offset":12893},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"remove_headers: (array) Remove the given headers.","position":{"start":{"line":498,"column":3,"offset":12896},"end":{"line":498,"column":52,"offset":12945},"indent":[]}}],"position":{"start":{"line":498,"column":3,"offset":12896},"end":{"line":498,"column":52,"offset":12945},"indent":[]}}],"position":{"start":{"line":498,"column":1,"offset":12894},"end":{"line":498,"column":52,"offset":12945},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"body: (mixed) Sets the given body.","position":{"start":{"line":499,"column":3,"offset":12948},"end":{"line":499,"column":37,"offset":12982},"indent":[]}}],"position":{"start":{"line":499,"column":3,"offset":12948},"end":{"line":499,"column":37,"offset":12982},"indent":[]}}],"position":{"start":{"line":499,"column":1,"offset":12946},"end":{"line":499,"column":37,"offset":12982},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"uri: (UriInterface) Set the URI.","position":{"start":{"line":500,"column":3,"offset":12985},"end":{"line":500,"column":35,"offset":13017},"indent":[]}}],"position":{"start":{"line":500,"column":3,"offset":12985},"end":{"line":500,"column":35,"offset":13017},"indent":[]}}],"position":{"start":{"line":500,"column":1,"offset":12983},"end":{"line":500,"column":35,"offset":13017},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"query: (string) Set the query string value of the URI.","position":{"start":{"line":501,"column":3,"offset":13020},"end":{"line":501,"column":57,"offset":13074},"indent":[]}}],"position":{"start":{"line":501,"column":3,"offset":13020},"end":{"line":501,"column":57,"offset":13074},"indent":[]}}],"position":{"start":{"line":501,"column":1,"offset":13018},"end":{"line":501,"column":57,"offset":13074},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"version: (string) Set the protocol version.","position":{"start":{"line":502,"column":3,"offset":13077},"end":{"line":502,"column":46,"offset":13120},"indent":[]}}],"position":{"start":{"line":502,"column":3,"offset":13077},"end":{"line":502,"column":46,"offset":13120},"indent":[]}}],"position":{"start":{"line":502,"column":1,"offset":13075},"end":{"line":502,"column":46,"offset":13120},"indent":[]}}],"position":{"start":{"line":496,"column":1,"offset":12803},"end":{"line":502,"column":46,"offset":13120},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Utils::readLine","position":{"start":{"line":505,"column":4,"offset":13126},"end":{"line":505,"column":37,"offset":13159},"indent":[]}}],"position":{"start":{"line":505,"column":1,"offset":13123},"end":{"line":505,"column":37,"offset":13159},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function readLine(StreamInterface $stream, ?int $maxLength = null): string","position":{"start":{"line":507,"column":1,"offset":13161},"end":{"line":507,"column":91,"offset":13251},"indent":[]}}],"position":{"start":{"line":507,"column":1,"offset":13161},"end":{"line":507,"column":91,"offset":13251},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Read a line from the stream up to the maximum allowed buffer length.","position":{"start":{"line":509,"column":1,"offset":13253},"end":{"line":509,"column":69,"offset":13321},"indent":[]}}],"position":{"start":{"line":509,"column":1,"offset":13253},"end":{"line":509,"column":69,"offset":13321},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Utils::redactUserInfo","position":{"start":{"line":512,"column":4,"offset":13327},"end":{"line":512,"column":43,"offset":13366},"indent":[]}}],"position":{"start":{"line":512,"column":1,"offset":13324},"end":{"line":512,"column":43,"offset":13366},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function redactUserInfo(UriInterface $uri): UriInterface","position":{"start":{"line":514,"column":1,"offset":13368},"end":{"line":514,"column":73,"offset":13440},"indent":[]}}],"position":{"start":{"line":514,"column":1,"offset":13368},"end":{"line":514,"column":73,"offset":13440},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Redact the password in the user info part of a URI.","position":{"start":{"line":516,"column":1,"offset":13442},"end":{"line":516,"column":52,"offset":13493},"indent":[]}}],"position":{"start":{"line":516,"column":1,"offset":13442},"end":{"line":516,"column":52,"offset":13493},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Utils::streamFor","position":{"start":{"line":519,"column":4,"offset":13499},"end":{"line":519,"column":38,"offset":13533},"indent":[]}}],"position":{"start":{"line":519,"column":1,"offset":13496},"end":{"line":519,"column":38,"offset":13533},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function streamFor(resource|string|null|int|float|bool|StreamInterface|callable|\\Iterator $resource = '', array $options = []): StreamInterface","position":{"start":{"line":521,"column":1,"offset":13535},"end":{"line":521,"column":160,"offset":13694},"indent":[]}}],"position":{"start":{"line":521,"column":1,"offset":13535},"end":{"line":521,"column":160,"offset":13694},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a new stream based on the input type.","position":{"start":{"line":523,"column":1,"offset":13696},"end":{"line":523,"column":45,"offset":13740},"indent":[]}}],"position":{"start":{"line":523,"column":1,"offset":13696},"end":{"line":523,"column":45,"offset":13740},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Options is an associative array that can contain the following keys:","position":{"start":{"line":525,"column":1,"offset":13742},"end":{"line":525,"column":69,"offset":13810},"indent":[]}}],"position":{"start":{"line":525,"column":1,"offset":13742},"end":{"line":525,"column":69,"offset":13810},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"metadata: Array of custom metadata.","position":{"start":{"line":527,"column":3,"offset":13814},"end":{"line":527,"column":38,"offset":13849},"indent":[]}}],"position":{"start":{"line":527,"column":3,"offset":13814},"end":{"line":527,"column":38,"offset":13849},"indent":[]}}],"position":{"start":{"line":527,"column":1,"offset":13812},"end":{"line":527,"column":38,"offset":13849},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"size: Size of the stream.","position":{"start":{"line":528,"column":3,"offset":13852},"end":{"line":528,"column":28,"offset":13877},"indent":[]}}],"position":{"start":{"line":528,"column":3,"offset":13852},"end":{"line":528,"column":28,"offset":13877},"indent":[]}}],"position":{"start":{"line":528,"column":1,"offset":13850},"end":{"line":528,"column":28,"offset":13877},"indent":[]}}],"position":{"start":{"line":527,"column":1,"offset":13812},"end":{"line":528,"column":28,"offset":13877},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"This method accepts the following ","position":{"start":{"line":530,"column":1,"offset":13879},"end":{"line":530,"column":35,"offset":13913},"indent":[]}},{"type":"inlineCode","value":"$resource","position":{"start":{"line":530,"column":35,"offset":13913},"end":{"line":530,"column":46,"offset":13924},"indent":[]}},{"type":"text","value":" types:","position":{"start":{"line":530,"column":46,"offset":13924},"end":{"line":530,"column":53,"offset":13931},"indent":[]}}],"position":{"start":{"line":530,"column":1,"offset":13879},"end":{"line":530,"column":53,"offset":13931},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Psr\\Http\\Message\\StreamInterface","position":{"start":{"line":532,"column":3,"offset":13935},"end":{"line":532,"column":37,"offset":13969},"indent":[]}},{"type":"text","value":": Returns the value as-is.","position":{"start":{"line":532,"column":37,"offset":13969},"end":{"line":532,"column":63,"offset":13995},"indent":[]}}],"position":{"start":{"line":532,"column":3,"offset":13935},"end":{"line":532,"column":63,"offset":13995},"indent":[]}}],"position":{"start":{"line":532,"column":1,"offset":13933},"end":{"line":532,"column":63,"offset":13995},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"string","position":{"start":{"line":533,"column":3,"offset":13998},"end":{"line":533,"column":11,"offset":14006},"indent":[]}},{"type":"text","value":": Creates a stream object that uses the given string as the contents.","position":{"start":{"line":533,"column":11,"offset":14006},"end":{"line":533,"column":80,"offset":14075},"indent":[]}}],"position":{"start":{"line":533,"column":3,"offset":13998},"end":{"line":533,"column":80,"offset":14075},"indent":[]}}],"position":{"start":{"line":533,"column":1,"offset":13996},"end":{"line":533,"column":80,"offset":14075},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"resource","position":{"start":{"line":534,"column":3,"offset":14078},"end":{"line":534,"column":13,"offset":14088},"indent":[]}},{"type":"text","value":": Creates a stream object that wraps the given PHP stream resource.","position":{"start":{"line":534,"column":13,"offset":14088},"end":{"line":534,"column":80,"offset":14155},"indent":[]}}],"position":{"start":{"line":534,"column":3,"offset":14078},"end":{"line":534,"column":80,"offset":14155},"indent":[]}}],"position":{"start":{"line":534,"column":1,"offset":14076},"end":{"line":534,"column":80,"offset":14155},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Iterator","position":{"start":{"line":535,"column":3,"offset":14158},"end":{"line":535,"column":13,"offset":14168},"indent":[]}},{"type":"text","value":": If the provided value implements ","position":{"start":{"line":535,"column":13,"offset":14168},"end":{"line":535,"column":48,"offset":14203},"indent":[]}},{"type":"inlineCode","value":"Iterator","position":{"start":{"line":535,"column":48,"offset":14203},"end":{"line":535,"column":58,"offset":14213},"indent":[]}},{"type":"text","value":", then a read-only\nstream object will be created that wraps the given iterable. Each time the\nstream is read from, data from the iterator will fill a buffer and will be\ncontinuously called until the buffer is equal to the requested read size.\nSubsequent read calls will first read from the buffer and then call ","position":{"start":{"line":535,"column":58,"offset":14213},"end":{"line":539,"column":71,"offset":14532},"indent":[3,3,3,3]}},{"type":"inlineCode","value":"next","position":{"start":{"line":539,"column":71,"offset":14532},"end":{"line":539,"column":77,"offset":14538},"indent":[]}},{"type":"text","value":"\non the underlying iterator until it is exhausted.","position":{"start":{"line":539,"column":77,"offset":14538},"end":{"line":540,"column":52,"offset":14590},"indent":[3]}}],"position":{"start":{"line":535,"column":3,"offset":14158},"end":{"line":540,"column":52,"offset":14590},"indent":[3,3,3,3,3]}}],"position":{"start":{"line":535,"column":1,"offset":14156},"end":{"line":540,"column":52,"offset":14590},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"object","position":{"start":{"line":541,"column":3,"offset":14593},"end":{"line":541,"column":11,"offset":14601},"indent":[]}},{"type":"text","value":" with ","position":{"start":{"line":541,"column":11,"offset":14601},"end":{"line":541,"column":17,"offset":14607},"indent":[]}},{"type":"inlineCode","value":"__toString()","position":{"start":{"line":541,"column":17,"offset":14607},"end":{"line":541,"column":31,"offset":14621},"indent":[]}},{"type":"text","value":": If the object has the ","position":{"start":{"line":541,"column":31,"offset":14621},"end":{"line":541,"column":55,"offset":14645},"indent":[]}},{"type":"inlineCode","value":"__toString()","position":{"start":{"line":541,"column":55,"offset":14645},"end":{"line":541,"column":69,"offset":14659},"indent":[]}},{"type":"text","value":" method,\nthe object will be cast to a string and then a stream will be returned that\nuses the string value.","position":{"start":{"line":541,"column":69,"offset":14659},"end":{"line":543,"column":25,"offset":14770},"indent":[3,3]}}],"position":{"start":{"line":541,"column":3,"offset":14593},"end":{"line":543,"column":25,"offset":14770},"indent":[3,3]}}],"position":{"start":{"line":541,"column":1,"offset":14591},"end":{"line":543,"column":25,"offset":14770},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"NULL","position":{"start":{"line":544,"column":3,"offset":14773},"end":{"line":544,"column":9,"offset":14779},"indent":[]}},{"type":"text","value":": When ","position":{"start":{"line":544,"column":9,"offset":14779},"end":{"line":544,"column":16,"offset":14786},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":544,"column":16,"offset":14786},"end":{"line":544,"column":22,"offset":14792},"indent":[]}},{"type":"text","value":" is passed, an empty stream object is returned.","position":{"start":{"line":544,"column":22,"offset":14792},"end":{"line":544,"column":69,"offset":14839},"indent":[]}}],"position":{"start":{"line":544,"column":3,"offset":14773},"end":{"line":544,"column":69,"offset":14839},"indent":[]}}],"position":{"start":{"line":544,"column":1,"offset":14771},"end":{"line":544,"column":69,"offset":14839},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"callable","position":{"start":{"line":545,"column":3,"offset":14842},"end":{"line":545,"column":13,"offset":14852},"indent":[]}},{"type":"text","value":" When a callable is passed, a read-only stream object will be\ncreated that invokes the given callable. The callable is invoked with the\nnumber of suggested bytes to read. The callable can return any number of\nbytes, but MUST return ","position":{"start":{"line":545,"column":13,"offset":14852},"end":{"line":548,"column":26,"offset":15090},"indent":[3,3,3]}},{"type":"inlineCode","value":"false","position":{"start":{"line":548,"column":26,"offset":15090},"end":{"line":548,"column":33,"offset":15097},"indent":[]}},{"type":"text","value":" when there is no more data to return. The\nstream object that wraps the callable will invoke the callable until the\nnumber of requested bytes are available. Any additional bytes will be\nbuffered and used in subsequent reads.","position":{"start":{"line":548,"column":33,"offset":15097},"end":{"line":551,"column":41,"offset":15327},"indent":[3,3,3]}}],"position":{"start":{"line":545,"column":3,"offset":14842},"end":{"line":551,"column":41,"offset":15327},"indent":[3,3,3,3,3,3]}}],"position":{"start":{"line":545,"column":1,"offset":14840},"end":{"line":551,"column":41,"offset":15327},"indent":[1,1,1,1,1,1]}}],"position":{"start":{"line":532,"column":1,"offset":13933},"end":{"line":551,"column":41,"offset":15327},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"$stream = GuzzleHttp\\Psr7\\Utils::streamFor('foo');\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor(fopen('/path/to/file', 'r'));\n\n$generator = function ($bytes) {\n    for ($i = 0; $i < $bytes; $i++) {\n        yield ' ';\n    }\n}\n\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor($generator(100));","position":{"start":{"line":553,"column":1,"offset":15329},"end":{"line":564,"column":4,"offset":15624},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Utils::tryFopen","position":{"start":{"line":567,"column":4,"offset":15630},"end":{"line":567,"column":37,"offset":15663},"indent":[]}}],"position":{"start":{"line":567,"column":1,"offset":15627},"end":{"line":567,"column":37,"offset":15663},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function tryFopen(string $filename, string $mode): resource","position":{"start":{"line":569,"column":1,"offset":15665},"end":{"line":569,"column":76,"offset":15740},"indent":[]}}],"position":{"start":{"line":569,"column":1,"offset":15665},"end":{"line":569,"column":76,"offset":15740},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Safely opens a PHP stream resource using a filename.","position":{"start":{"line":571,"column":1,"offset":15742},"end":{"line":571,"column":53,"offset":15794},"indent":[]}}],"position":{"start":{"line":571,"column":1,"offset":15742},"end":{"line":571,"column":53,"offset":15794},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When fopen fails, PHP normally raises a warning. This function adds an\nerror handler that checks for errors and throws an exception instead.","position":{"start":{"line":573,"column":1,"offset":15796},"end":{"line":574,"column":70,"offset":15936},"indent":[1]}}],"position":{"start":{"line":573,"column":1,"offset":15796},"end":{"line":574,"column":70,"offset":15936},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Utils::tryGetContents","position":{"start":{"line":577,"column":4,"offset":15942},"end":{"line":577,"column":43,"offset":15981},"indent":[]}}],"position":{"start":{"line":577,"column":1,"offset":15939},"end":{"line":577,"column":43,"offset":15981},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function tryGetContents(resource $stream): string","position":{"start":{"line":579,"column":1,"offset":15983},"end":{"line":579,"column":66,"offset":16048},"indent":[]}}],"position":{"start":{"line":579,"column":1,"offset":15983},"end":{"line":579,"column":66,"offset":16048},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Safely gets the contents of a given stream.","position":{"start":{"line":581,"column":1,"offset":16050},"end":{"line":581,"column":44,"offset":16093},"indent":[]}}],"position":{"start":{"line":581,"column":1,"offset":16050},"end":{"line":581,"column":44,"offset":16093},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When stream_get_contents fails, PHP normally raises a warning. This\nfunction adds an error handler that checks for errors and throws an\nexception instead.","position":{"start":{"line":583,"column":1,"offset":16095},"end":{"line":585,"column":19,"offset":16249},"indent":[1,1]}}],"position":{"start":{"line":583,"column":1,"offset":16095},"end":{"line":585,"column":19,"offset":16249},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Utils::uriFor","position":{"start":{"line":588,"column":4,"offset":16255},"end":{"line":588,"column":35,"offset":16286},"indent":[]}}],"position":{"start":{"line":588,"column":1,"offset":16252},"end":{"line":588,"column":35,"offset":16286},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function uriFor(string|UriInterface $uri): UriInterface","position":{"start":{"line":590,"column":1,"offset":16288},"end":{"line":590,"column":72,"offset":16359},"indent":[]}}],"position":{"start":{"line":590,"column":1,"offset":16288},"end":{"line":590,"column":72,"offset":16359},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Returns a UriInterface for the given value.","position":{"start":{"line":592,"column":1,"offset":16361},"end":{"line":592,"column":44,"offset":16404},"indent":[]}}],"position":{"start":{"line":592,"column":1,"offset":16361},"end":{"line":592,"column":44,"offset":16404},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This function accepts a string or UriInterface and returns a\nUriInterface for the given value. If the value is already a\nUriInterface, it is returned as-is.","position":{"start":{"line":594,"column":1,"offset":16406},"end":{"line":596,"column":36,"offset":16562},"indent":[1,1]}}],"position":{"start":{"line":594,"column":1,"offset":16406},"end":{"line":596,"column":36,"offset":16562},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\MimeType::fromFilename","position":{"start":{"line":599,"column":4,"offset":16568},"end":{"line":599,"column":44,"offset":16608},"indent":[]}}],"position":{"start":{"line":599,"column":1,"offset":16565},"end":{"line":599,"column":44,"offset":16608},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function fromFilename(string $filename): string|null","position":{"start":{"line":601,"column":1,"offset":16610},"end":{"line":601,"column":69,"offset":16678},"indent":[]}}],"position":{"start":{"line":601,"column":1,"offset":16610},"end":{"line":601,"column":69,"offset":16678},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Determines the mimetype of a file by looking at its extension.","position":{"start":{"line":603,"column":1,"offset":16680},"end":{"line":603,"column":63,"offset":16742},"indent":[]}}],"position":{"start":{"line":603,"column":1,"offset":16680},"end":{"line":603,"column":63,"offset":16742},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\MimeType::fromExtension","position":{"start":{"line":606,"column":4,"offset":16748},"end":{"line":606,"column":45,"offset":16789},"indent":[]}}],"position":{"start":{"line":606,"column":1,"offset":16745},"end":{"line":606,"column":45,"offset":16789},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function fromExtension(string $extension): string|null","position":{"start":{"line":608,"column":1,"offset":16791},"end":{"line":608,"column":71,"offset":16861},"indent":[]}}],"position":{"start":{"line":608,"column":1,"offset":16791},"end":{"line":608,"column":71,"offset":16861},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Maps a file extensions to a mimetype.","position":{"start":{"line":610,"column":1,"offset":16863},"end":{"line":610,"column":38,"offset":16900},"indent":[]}}],"position":{"start":{"line":610,"column":1,"offset":16863},"end":{"line":610,"column":38,"offset":16900},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Upgrading from Function API","position":{"start":{"line":613,"column":4,"offset":16906},"end":{"line":613,"column":31,"offset":16933},"indent":[]}}],"position":{"start":{"line":613,"column":1,"offset":16903},"end":{"line":613,"column":31,"offset":16933},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The static API was first introduced in 1.7.0, in order to mitigate problems with functions conflicting between global and local copies of the package. The function API was removed in 2.0.0. A migration table has been provided here for your convenience:","position":{"start":{"line":615,"column":1,"offset":16935},"end":{"line":615,"column":253,"offset":17187},"indent":[]}}],"position":{"start":{"line":615,"column":1,"offset":16935},"end":{"line":615,"column":253,"offset":17187},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Original Function","position":{"start":{"line":617,"column":3,"offset":17191},"end":{"line":617,"column":20,"offset":17208},"indent":[]}}],"position":{"start":{"line":617,"column":3,"offset":17191},"end":{"line":617,"column":20,"offset":17208},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Replacement Method","position":{"start":{"line":617,"column":23,"offset":17211},"end":{"line":617,"column":41,"offset":17229},"indent":[]}}],"position":{"start":{"line":617,"column":23,"offset":17211},"end":{"line":617,"column":41,"offset":17229},"indent":[]}}],"position":{"start":{"line":617,"column":1,"offset":17189},"end":{"line":617,"column":43,"offset":17231},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"str","position":{"start":{"line":619,"column":3,"offset":17270},"end":{"line":619,"column":8,"offset":17275},"indent":[]}}],"position":{"start":{"line":619,"column":3,"offset":17270},"end":{"line":619,"column":8,"offset":17275},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Message::toString","position":{"start":{"line":619,"column":11,"offset":17278},"end":{"line":619,"column":30,"offset":17297},"indent":[]}}],"position":{"start":{"line":619,"column":11,"offset":17278},"end":{"line":619,"column":30,"offset":17297},"indent":[]}}],"position":{"start":{"line":619,"column":1,"offset":17268},"end":{"line":619,"column":32,"offset":17299},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"uri_for","position":{"start":{"line":620,"column":3,"offset":17302},"end":{"line":620,"column":12,"offset":17311},"indent":[]}}],"position":{"start":{"line":620,"column":3,"offset":17302},"end":{"line":620,"column":12,"offset":17311},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Utils::uriFor","position":{"start":{"line":620,"column":15,"offset":17314},"end":{"line":620,"column":30,"offset":17329},"indent":[]}}],"position":{"start":{"line":620,"column":15,"offset":17314},"end":{"line":620,"column":30,"offset":17329},"indent":[]}}],"position":{"start":{"line":620,"column":1,"offset":17300},"end":{"line":620,"column":32,"offset":17331},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"stream_for","position":{"start":{"line":621,"column":3,"offset":17334},"end":{"line":621,"column":15,"offset":17346},"indent":[]}}],"position":{"start":{"line":621,"column":3,"offset":17334},"end":{"line":621,"column":15,"offset":17346},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Utils::streamFor","position":{"start":{"line":621,"column":18,"offset":17349},"end":{"line":621,"column":36,"offset":17367},"indent":[]}}],"position":{"start":{"line":621,"column":18,"offset":17349},"end":{"line":621,"column":36,"offset":17367},"indent":[]}}],"position":{"start":{"line":621,"column":1,"offset":17332},"end":{"line":621,"column":38,"offset":17369},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"parse_header","position":{"start":{"line":622,"column":3,"offset":17372},"end":{"line":622,"column":17,"offset":17386},"indent":[]}}],"position":{"start":{"line":622,"column":3,"offset":17372},"end":{"line":622,"column":17,"offset":17386},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Header::parse","position":{"start":{"line":622,"column":20,"offset":17389},"end":{"line":622,"column":35,"offset":17404},"indent":[]}}],"position":{"start":{"line":622,"column":20,"offset":17389},"end":{"line":622,"column":35,"offset":17404},"indent":[]}}],"position":{"start":{"line":622,"column":1,"offset":17370},"end":{"line":622,"column":37,"offset":17406},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"normalize_header","position":{"start":{"line":623,"column":3,"offset":17409},"end":{"line":623,"column":21,"offset":17427},"indent":[]}}],"position":{"start":{"line":623,"column":3,"offset":17409},"end":{"line":623,"column":21,"offset":17427},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Header::normalize","position":{"start":{"line":623,"column":24,"offset":17430},"end":{"line":623,"column":43,"offset":17449},"indent":[]}}],"position":{"start":{"line":623,"column":24,"offset":17430},"end":{"line":623,"column":43,"offset":17449},"indent":[]}}],"position":{"start":{"line":623,"column":1,"offset":17407},"end":{"line":623,"column":45,"offset":17451},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"modify_request","position":{"start":{"line":624,"column":3,"offset":17454},"end":{"line":624,"column":19,"offset":17470},"indent":[]}}],"position":{"start":{"line":624,"column":3,"offset":17454},"end":{"line":624,"column":19,"offset":17470},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Utils::modifyRequest","position":{"start":{"line":624,"column":22,"offset":17473},"end":{"line":624,"column":44,"offset":17495},"indent":[]}}],"position":{"start":{"line":624,"column":22,"offset":17473},"end":{"line":624,"column":44,"offset":17495},"indent":[]}}],"position":{"start":{"line":624,"column":1,"offset":17452},"end":{"line":624,"column":46,"offset":17497},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"rewind_body","position":{"start":{"line":625,"column":3,"offset":17500},"end":{"line":625,"column":16,"offset":17513},"indent":[]}}],"position":{"start":{"line":625,"column":3,"offset":17500},"end":{"line":625,"column":16,"offset":17513},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Message::rewindBody","position":{"start":{"line":625,"column":19,"offset":17516},"end":{"line":625,"column":40,"offset":17537},"indent":[]}}],"position":{"start":{"line":625,"column":19,"offset":17516},"end":{"line":625,"column":40,"offset":17537},"indent":[]}}],"position":{"start":{"line":625,"column":1,"offset":17498},"end":{"line":625,"column":42,"offset":17539},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"try_fopen","position":{"start":{"line":626,"column":3,"offset":17542},"end":{"line":626,"column":14,"offset":17553},"indent":[]}}],"position":{"start":{"line":626,"column":3,"offset":17542},"end":{"line":626,"column":14,"offset":17553},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Utils::tryFopen","position":{"start":{"line":626,"column":17,"offset":17556},"end":{"line":626,"column":34,"offset":17573},"indent":[]}}],"position":{"start":{"line":626,"column":17,"offset":17556},"end":{"line":626,"column":34,"offset":17573},"indent":[]}}],"position":{"start":{"line":626,"column":1,"offset":17540},"end":{"line":626,"column":36,"offset":17575},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"copy_to_string","position":{"start":{"line":627,"column":3,"offset":17578},"end":{"line":627,"column":19,"offset":17594},"indent":[]}}],"position":{"start":{"line":627,"column":3,"offset":17578},"end":{"line":627,"column":19,"offset":17594},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Utils::copyToString","position":{"start":{"line":627,"column":22,"offset":17597},"end":{"line":627,"column":43,"offset":17618},"indent":[]}}],"position":{"start":{"line":627,"column":22,"offset":17597},"end":{"line":627,"column":43,"offset":17618},"indent":[]}}],"position":{"start":{"line":627,"column":1,"offset":17576},"end":{"line":627,"column":45,"offset":17620},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"copy_to_stream","position":{"start":{"line":628,"column":3,"offset":17623},"end":{"line":628,"column":19,"offset":17639},"indent":[]}}],"position":{"start":{"line":628,"column":3,"offset":17623},"end":{"line":628,"column":19,"offset":17639},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Utils::copyToStream","position":{"start":{"line":628,"column":22,"offset":17642},"end":{"line":628,"column":43,"offset":17663},"indent":[]}}],"position":{"start":{"line":628,"column":22,"offset":17642},"end":{"line":628,"column":43,"offset":17663},"indent":[]}}],"position":{"start":{"line":628,"column":1,"offset":17621},"end":{"line":628,"column":45,"offset":17665},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"hash","position":{"start":{"line":629,"column":3,"offset":17668},"end":{"line":629,"column":9,"offset":17674},"indent":[]}}],"position":{"start":{"line":629,"column":3,"offset":17668},"end":{"line":629,"column":9,"offset":17674},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Utils::hash","position":{"start":{"line":629,"column":12,"offset":17677},"end":{"line":629,"column":25,"offset":17690},"indent":[]}}],"position":{"start":{"line":629,"column":12,"offset":17677},"end":{"line":629,"column":25,"offset":17690},"indent":[]}}],"position":{"start":{"line":629,"column":1,"offset":17666},"end":{"line":629,"column":27,"offset":17692},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"readline","position":{"start":{"line":630,"column":3,"offset":17695},"end":{"line":630,"column":13,"offset":17705},"indent":[]}}],"position":{"start":{"line":630,"column":3,"offset":17695},"end":{"line":630,"column":13,"offset":17705},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Utils::readLine","position":{"start":{"line":630,"column":16,"offset":17708},"end":{"line":630,"column":33,"offset":17725},"indent":[]}}],"position":{"start":{"line":630,"column":16,"offset":17708},"end":{"line":630,"column":33,"offset":17725},"indent":[]}}],"position":{"start":{"line":630,"column":1,"offset":17693},"end":{"line":630,"column":35,"offset":17727},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"parse_request","position":{"start":{"line":631,"column":3,"offset":17730},"end":{"line":631,"column":18,"offset":17745},"indent":[]}}],"position":{"start":{"line":631,"column":3,"offset":17730},"end":{"line":631,"column":18,"offset":17745},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Message::parseRequest","position":{"start":{"line":631,"column":21,"offset":17748},"end":{"line":631,"column":44,"offset":17771},"indent":[]}}],"position":{"start":{"line":631,"column":21,"offset":17748},"end":{"line":631,"column":44,"offset":17771},"indent":[]}}],"position":{"start":{"line":631,"column":1,"offset":17728},"end":{"line":631,"column":46,"offset":17773},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"parse_response","position":{"start":{"line":632,"column":3,"offset":17776},"end":{"line":632,"column":19,"offset":17792},"indent":[]}}],"position":{"start":{"line":632,"column":3,"offset":17776},"end":{"line":632,"column":19,"offset":17792},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Message::parseResponse","position":{"start":{"line":632,"column":22,"offset":17795},"end":{"line":632,"column":46,"offset":17819},"indent":[]}}],"position":{"start":{"line":632,"column":22,"offset":17795},"end":{"line":632,"column":46,"offset":17819},"indent":[]}}],"position":{"start":{"line":632,"column":1,"offset":17774},"end":{"line":632,"column":48,"offset":17821},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"parse_query","position":{"start":{"line":633,"column":3,"offset":17824},"end":{"line":633,"column":16,"offset":17837},"indent":[]}}],"position":{"start":{"line":633,"column":3,"offset":17824},"end":{"line":633,"column":16,"offset":17837},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Query::parse","position":{"start":{"line":633,"column":19,"offset":17840},"end":{"line":633,"column":33,"offset":17854},"indent":[]}}],"position":{"start":{"line":633,"column":19,"offset":17840},"end":{"line":633,"column":33,"offset":17854},"indent":[]}}],"position":{"start":{"line":633,"column":1,"offset":17822},"end":{"line":633,"column":35,"offset":17856},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"build_query","position":{"start":{"line":634,"column":3,"offset":17859},"end":{"line":634,"column":16,"offset":17872},"indent":[]}}],"position":{"start":{"line":634,"column":3,"offset":17859},"end":{"line":634,"column":16,"offset":17872},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Query::build","position":{"start":{"line":634,"column":19,"offset":17875},"end":{"line":634,"column":33,"offset":17889},"indent":[]}}],"position":{"start":{"line":634,"column":19,"offset":17875},"end":{"line":634,"column":33,"offset":17889},"indent":[]}}],"position":{"start":{"line":634,"column":1,"offset":17857},"end":{"line":634,"column":35,"offset":17891},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"mimetype_from_filename","position":{"start":{"line":635,"column":3,"offset":17894},"end":{"line":635,"column":27,"offset":17918},"indent":[]}}],"position":{"start":{"line":635,"column":3,"offset":17894},"end":{"line":635,"column":27,"offset":17918},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"MimeType::fromFilename","position":{"start":{"line":635,"column":30,"offset":17921},"end":{"line":635,"column":54,"offset":17945},"indent":[]}}],"position":{"start":{"line":635,"column":30,"offset":17921},"end":{"line":635,"column":54,"offset":17945},"indent":[]}}],"position":{"start":{"line":635,"column":1,"offset":17892},"end":{"line":635,"column":56,"offset":17947},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"mimetype_from_extension","position":{"start":{"line":636,"column":3,"offset":17950},"end":{"line":636,"column":28,"offset":17975},"indent":[]}}],"position":{"start":{"line":636,"column":3,"offset":17950},"end":{"line":636,"column":28,"offset":17975},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"MimeType::fromExtension","position":{"start":{"line":636,"column":31,"offset":17978},"end":{"line":636,"column":56,"offset":18003},"indent":[]}}],"position":{"start":{"line":636,"column":31,"offset":17978},"end":{"line":636,"column":56,"offset":18003},"indent":[]}}],"position":{"start":{"line":636,"column":1,"offset":17948},"end":{"line":636,"column":58,"offset":18005},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"_parse_message","position":{"start":{"line":637,"column":3,"offset":18008},"end":{"line":637,"column":19,"offset":18024},"indent":[]}}],"position":{"start":{"line":637,"column":3,"offset":18008},"end":{"line":637,"column":19,"offset":18024},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Message::parseMessage","position":{"start":{"line":637,"column":22,"offset":18027},"end":{"line":637,"column":45,"offset":18050},"indent":[]}}],"position":{"start":{"line":637,"column":22,"offset":18027},"end":{"line":637,"column":45,"offset":18050},"indent":[]}}],"position":{"start":{"line":637,"column":1,"offset":18006},"end":{"line":637,"column":47,"offset":18052},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"_parse_request_uri","position":{"start":{"line":638,"column":3,"offset":18055},"end":{"line":638,"column":23,"offset":18075},"indent":[]}}],"position":{"start":{"line":638,"column":3,"offset":18055},"end":{"line":638,"column":23,"offset":18075},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Message::parseRequestUri","position":{"start":{"line":638,"column":26,"offset":18078},"end":{"line":638,"column":52,"offset":18104},"indent":[]}}],"position":{"start":{"line":638,"column":26,"offset":18078},"end":{"line":638,"column":52,"offset":18104},"indent":[]}}],"position":{"start":{"line":638,"column":1,"offset":18053},"end":{"line":638,"column":54,"offset":18106},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"get_message_body_summary","position":{"start":{"line":639,"column":3,"offset":18109},"end":{"line":639,"column":29,"offset":18135},"indent":[]}}],"position":{"start":{"line":639,"column":3,"offset":18109},"end":{"line":639,"column":29,"offset":18135},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Message::bodySummary","position":{"start":{"line":639,"column":32,"offset":18138},"end":{"line":639,"column":54,"offset":18160},"indent":[]}}],"position":{"start":{"line":639,"column":32,"offset":18138},"end":{"line":639,"column":54,"offset":18160},"indent":[]}}],"position":{"start":{"line":639,"column":1,"offset":18107},"end":{"line":639,"column":56,"offset":18162},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"_caseless_remove","position":{"start":{"line":640,"column":3,"offset":18165},"end":{"line":640,"column":21,"offset":18183},"indent":[]}}],"position":{"start":{"line":640,"column":3,"offset":18165},"end":{"line":640,"column":21,"offset":18183},"indent":[]}},{"type":"tableCell","children":[{"type":"inlineCode","value":"Utils::caselessRemove","position":{"start":{"line":640,"column":24,"offset":18186},"end":{"line":640,"column":47,"offset":18209},"indent":[]}}],"position":{"start":{"line":640,"column":24,"offset":18186},"end":{"line":640,"column":47,"offset":18209},"indent":[]}}],"position":{"start":{"line":640,"column":1,"offset":18163},"end":{"line":640,"column":49,"offset":18211},"indent":[]}}],"position":{"start":{"line":617,"column":1,"offset":17189},"end":{"line":640,"column":49,"offset":18211},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Additional URI Methods","position":{"start":{"line":643,"column":3,"offset":18216},"end":{"line":643,"column":25,"offset":18238},"indent":[]}}],"position":{"start":{"line":643,"column":1,"offset":18214},"end":{"line":643,"column":25,"offset":18238},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Aside from the standard ","position":{"start":{"line":645,"column":1,"offset":18240},"end":{"line":645,"column":25,"offset":18264},"indent":[]}},{"type":"inlineCode","value":"Psr\\Http\\Message\\UriInterface","position":{"start":{"line":645,"column":25,"offset":18264},"end":{"line":645,"column":56,"offset":18295},"indent":[]}},{"type":"text","value":" implementation in form of the ","position":{"start":{"line":645,"column":56,"offset":18295},"end":{"line":645,"column":87,"offset":18326},"indent":[]}},{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri","position":{"start":{"line":645,"column":87,"offset":18326},"end":{"line":645,"column":108,"offset":18347},"indent":[]}},{"type":"text","value":" class,\nthis library also provides additional functionality when working with URIs as static methods.","position":{"start":{"line":645,"column":108,"offset":18347},"end":{"line":646,"column":94,"offset":18448},"indent":[1]}}],"position":{"start":{"line":645,"column":1,"offset":18240},"end":{"line":646,"column":94,"offset":18448},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"URI Types","position":{"start":{"line":648,"column":4,"offset":18453},"end":{"line":648,"column":13,"offset":18462},"indent":[]}}],"position":{"start":{"line":648,"column":1,"offset":18450},"end":{"line":648,"column":13,"offset":18462},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An instance of ","position":{"start":{"line":650,"column":1,"offset":18464},"end":{"line":650,"column":16,"offset":18479},"indent":[]}},{"type":"inlineCode","value":"Psr\\Http\\Message\\UriInterface","position":{"start":{"line":650,"column":16,"offset":18479},"end":{"line":650,"column":47,"offset":18510},"indent":[]}},{"type":"text","value":" can either be an absolute URI or a relative reference.\nAn absolute URI has a scheme. A relative reference is used to express a URI relative to another URI,\nthe base URI. Relative references can be divided into several forms according to\n","position":{"start":{"line":650,"column":47,"offset":18510},"end":{"line":653,"column":1,"offset":18748},"indent":[1,1,1]}},{"type":"link","title":null,"url":"https://datatracker.ietf.org/doc/html/rfc3986#section-4.2","children":[{"type":"text","value":"RFC 3986 Section 4.2","position":{"start":{"line":653,"column":2,"offset":18749},"end":{"line":653,"column":22,"offset":18769},"indent":[]}}],"position":{"start":{"line":653,"column":1,"offset":18748},"end":{"line":653,"column":82,"offset":18829},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":653,"column":82,"offset":18829},"end":{"line":653,"column":83,"offset":18830},"indent":[]}}],"position":{"start":{"line":650,"column":1,"offset":18464},"end":{"line":653,"column":83,"offset":18830},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"network-path references, e.g. ","position":{"start":{"line":655,"column":3,"offset":18834},"end":{"line":655,"column":33,"offset":18864},"indent":[]}},{"type":"inlineCode","value":"//example.com/path","position":{"start":{"line":655,"column":33,"offset":18864},"end":{"line":655,"column":53,"offset":18884},"indent":[]}}],"position":{"start":{"line":655,"column":3,"offset":18834},"end":{"line":655,"column":53,"offset":18884},"indent":[]}}],"position":{"start":{"line":655,"column":1,"offset":18832},"end":{"line":655,"column":53,"offset":18884},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"absolute-path references, e.g. ","position":{"start":{"line":656,"column":3,"offset":18887},"end":{"line":656,"column":34,"offset":18918},"indent":[]}},{"type":"inlineCode","value":"/path","position":{"start":{"line":656,"column":34,"offset":18918},"end":{"line":656,"column":41,"offset":18925},"indent":[]}}],"position":{"start":{"line":656,"column":3,"offset":18887},"end":{"line":656,"column":41,"offset":18925},"indent":[]}}],"position":{"start":{"line":656,"column":1,"offset":18885},"end":{"line":656,"column":41,"offset":18925},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"relative-path references, e.g. ","position":{"start":{"line":657,"column":3,"offset":18928},"end":{"line":657,"column":34,"offset":18959},"indent":[]}},{"type":"inlineCode","value":"subpath","position":{"start":{"line":657,"column":34,"offset":18959},"end":{"line":657,"column":43,"offset":18968},"indent":[]}}],"position":{"start":{"line":657,"column":3,"offset":18928},"end":{"line":657,"column":43,"offset":18968},"indent":[]}}],"position":{"start":{"line":657,"column":1,"offset":18926},"end":{"line":657,"column":43,"offset":18968},"indent":[]}}],"position":{"start":{"line":655,"column":1,"offset":18832},"end":{"line":657,"column":43,"offset":18968},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The following methods can be used to identify the type of the URI.","position":{"start":{"line":659,"column":1,"offset":18970},"end":{"line":659,"column":67,"offset":19036},"indent":[]}}],"position":{"start":{"line":659,"column":1,"offset":18970},"end":{"line":659,"column":67,"offset":19036},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri::isAbsolute","position":{"start":{"line":661,"column":5,"offset":19042},"end":{"line":661,"column":38,"offset":19075},"indent":[]}}],"position":{"start":{"line":661,"column":1,"offset":19038},"end":{"line":661,"column":38,"offset":19075},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function isAbsolute(UriInterface $uri): bool","position":{"start":{"line":663,"column":1,"offset":19077},"end":{"line":663,"column":61,"offset":19137},"indent":[]}}],"position":{"start":{"line":663,"column":1,"offset":19077},"end":{"line":663,"column":61,"offset":19137},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whether the URI is absolute, i.e. it has a scheme.","position":{"start":{"line":665,"column":1,"offset":19139},"end":{"line":665,"column":51,"offset":19189},"indent":[]}}],"position":{"start":{"line":665,"column":1,"offset":19139},"end":{"line":665,"column":51,"offset":19189},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri::isNetworkPathReference","position":{"start":{"line":667,"column":5,"offset":19195},"end":{"line":667,"column":50,"offset":19240},"indent":[]}}],"position":{"start":{"line":667,"column":1,"offset":19191},"end":{"line":667,"column":50,"offset":19240},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function isNetworkPathReference(UriInterface $uri): bool","position":{"start":{"line":669,"column":1,"offset":19242},"end":{"line":669,"column":73,"offset":19314},"indent":[]}}],"position":{"start":{"line":669,"column":1,"offset":19242},"end":{"line":669,"column":73,"offset":19314},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whether the URI is a network-path reference. A relative reference that begins with two slash characters is\ntermed an network-path reference.","position":{"start":{"line":671,"column":1,"offset":19316},"end":{"line":672,"column":34,"offset":19456},"indent":[1]}}],"position":{"start":{"line":671,"column":1,"offset":19316},"end":{"line":672,"column":34,"offset":19456},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri::isAbsolutePathReference","position":{"start":{"line":674,"column":5,"offset":19462},"end":{"line":674,"column":51,"offset":19508},"indent":[]}}],"position":{"start":{"line":674,"column":1,"offset":19458},"end":{"line":674,"column":51,"offset":19508},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function isAbsolutePathReference(UriInterface $uri): bool","position":{"start":{"line":676,"column":1,"offset":19510},"end":{"line":676,"column":74,"offset":19583},"indent":[]}}],"position":{"start":{"line":676,"column":1,"offset":19510},"end":{"line":676,"column":74,"offset":19583},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whether the URI is a absolute-path reference. A relative reference that begins with a single slash character is\ntermed an absolute-path reference.","position":{"start":{"line":678,"column":1,"offset":19585},"end":{"line":679,"column":35,"offset":19731},"indent":[1]}}],"position":{"start":{"line":678,"column":1,"offset":19585},"end":{"line":679,"column":35,"offset":19731},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri::isRelativePathReference","position":{"start":{"line":681,"column":5,"offset":19737},"end":{"line":681,"column":51,"offset":19783},"indent":[]}}],"position":{"start":{"line":681,"column":1,"offset":19733},"end":{"line":681,"column":51,"offset":19783},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function isRelativePathReference(UriInterface $uri): bool","position":{"start":{"line":683,"column":1,"offset":19785},"end":{"line":683,"column":74,"offset":19858},"indent":[]}}],"position":{"start":{"line":683,"column":1,"offset":19785},"end":{"line":683,"column":74,"offset":19858},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whether the URI is a relative-path reference. A relative reference that does not begin with a slash character is\ntermed a relative-path reference.","position":{"start":{"line":685,"column":1,"offset":19860},"end":{"line":686,"column":34,"offset":20006},"indent":[1]}}],"position":{"start":{"line":685,"column":1,"offset":19860},"end":{"line":686,"column":34,"offset":20006},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri::isSameDocumentReference","position":{"start":{"line":688,"column":5,"offset":20012},"end":{"line":688,"column":51,"offset":20058},"indent":[]}}],"position":{"start":{"line":688,"column":1,"offset":20008},"end":{"line":688,"column":51,"offset":20058},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function isSameDocumentReference(UriInterface $uri, ?UriInterface $base = null): bool","position":{"start":{"line":690,"column":1,"offset":20060},"end":{"line":690,"column":102,"offset":20161},"indent":[]}}],"position":{"start":{"line":690,"column":1,"offset":20060},"end":{"line":690,"column":102,"offset":20161},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whether the URI is a same-document reference. A same-document reference refers to a URI that is, aside from its\nfragment component, identical to the base URI. When no base URI is given, only an empty URI reference\n(apart from its fragment) is considered a same-document reference.","position":{"start":{"line":692,"column":1,"offset":20163},"end":{"line":694,"column":67,"offset":20443},"indent":[1,1]}}],"position":{"start":{"line":692,"column":1,"offset":20163},"end":{"line":694,"column":67,"offset":20443},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"URI Components","position":{"start":{"line":696,"column":4,"offset":20448},"end":{"line":696,"column":18,"offset":20462},"indent":[]}}],"position":{"start":{"line":696,"column":1,"offset":20445},"end":{"line":696,"column":18,"offset":20462},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Additional methods to work with URI components.","position":{"start":{"line":698,"column":1,"offset":20464},"end":{"line":698,"column":48,"offset":20511},"indent":[]}}],"position":{"start":{"line":698,"column":1,"offset":20464},"end":{"line":698,"column":48,"offset":20511},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri::isDefaultPort","position":{"start":{"line":700,"column":5,"offset":20517},"end":{"line":700,"column":41,"offset":20553},"indent":[]}}],"position":{"start":{"line":700,"column":1,"offset":20513},"end":{"line":700,"column":41,"offset":20553},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function isDefaultPort(UriInterface $uri): bool","position":{"start":{"line":702,"column":1,"offset":20555},"end":{"line":702,"column":64,"offset":20618},"indent":[]}}],"position":{"start":{"line":702,"column":1,"offset":20555},"end":{"line":702,"column":64,"offset":20618},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whether the URI has the default port of the current scheme. ","position":{"start":{"line":704,"column":1,"offset":20620},"end":{"line":704,"column":61,"offset":20680},"indent":[]}},{"type":"inlineCode","value":"Psr\\Http\\Message\\UriInterface::getPort","position":{"start":{"line":704,"column":61,"offset":20680},"end":{"line":704,"column":101,"offset":20720},"indent":[]}},{"type":"text","value":" may return null\nor the standard port. This method can be used independently of the implementation.","position":{"start":{"line":704,"column":101,"offset":20720},"end":{"line":705,"column":83,"offset":20819},"indent":[1]}}],"position":{"start":{"line":704,"column":1,"offset":20620},"end":{"line":705,"column":83,"offset":20819},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri::composeComponents","position":{"start":{"line":707,"column":5,"offset":20825},"end":{"line":707,"column":45,"offset":20865},"indent":[]}}],"position":{"start":{"line":707,"column":1,"offset":20821},"end":{"line":707,"column":45,"offset":20865},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function composeComponents($scheme, $authority, $path, $query, $fragment): string","position":{"start":{"line":709,"column":1,"offset":20867},"end":{"line":709,"column":98,"offset":20964},"indent":[]}}],"position":{"start":{"line":709,"column":1,"offset":20867},"end":{"line":709,"column":98,"offset":20964},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Composes a URI reference string from its various components according to\n","position":{"start":{"line":711,"column":1,"offset":20966},"end":{"line":712,"column":1,"offset":21039},"indent":[1]}},{"type":"link","title":null,"url":"https://datatracker.ietf.org/doc/html/rfc3986#section-5.3","children":[{"type":"text","value":"RFC 3986 Section 5.3","position":{"start":{"line":712,"column":2,"offset":21040},"end":{"line":712,"column":22,"offset":21060},"indent":[]}}],"position":{"start":{"line":712,"column":1,"offset":21039},"end":{"line":712,"column":82,"offset":21120},"indent":[]}},{"type":"text","value":". Usually this method does not need\nto be called manually but instead is used indirectly via ","position":{"start":{"line":712,"column":82,"offset":21120},"end":{"line":713,"column":58,"offset":21213},"indent":[1]}},{"type":"inlineCode","value":"Psr\\Http\\Message\\UriInterface::__toString","position":{"start":{"line":713,"column":58,"offset":21213},"end":{"line":713,"column":101,"offset":21256},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":713,"column":101,"offset":21256},"end":{"line":713,"column":102,"offset":21257},"indent":[]}}],"position":{"start":{"line":711,"column":1,"offset":20966},"end":{"line":713,"column":102,"offset":21257},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri::fromParts","position":{"start":{"line":715,"column":5,"offset":21263},"end":{"line":715,"column":37,"offset":21295},"indent":[]}}],"position":{"start":{"line":715,"column":1,"offset":21259},"end":{"line":715,"column":37,"offset":21295},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function fromParts(array $parts): UriInterface","position":{"start":{"line":717,"column":1,"offset":21297},"end":{"line":717,"column":63,"offset":21359},"indent":[]}}],"position":{"start":{"line":717,"column":1,"offset":21297},"end":{"line":717,"column":63,"offset":21359},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Creates a URI from a hash of ","position":{"start":{"line":719,"column":1,"offset":21361},"end":{"line":719,"column":30,"offset":21390},"indent":[]}},{"type":"link","title":null,"url":"https://www.php.net/manual/en/function.parse-url.php","children":[{"type":"inlineCode","value":"parse_url","position":{"start":{"line":719,"column":31,"offset":21391},"end":{"line":719,"column":42,"offset":21402},"indent":[]}}],"position":{"start":{"line":719,"column":30,"offset":21390},"end":{"line":719,"column":97,"offset":21457},"indent":[]}},{"type":"text","value":" components.","position":{"start":{"line":719,"column":97,"offset":21457},"end":{"line":719,"column":109,"offset":21469},"indent":[]}}],"position":{"start":{"line":719,"column":1,"offset":21361},"end":{"line":719,"column":109,"offset":21469},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri::withQueryValue","position":{"start":{"line":722,"column":5,"offset":21476},"end":{"line":722,"column":42,"offset":21513},"indent":[]}}],"position":{"start":{"line":722,"column":1,"offset":21472},"end":{"line":722,"column":42,"offset":21513},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function withQueryValue(UriInterface $uri, $key, $value): UriInterface","position":{"start":{"line":724,"column":1,"offset":21515},"end":{"line":724,"column":87,"offset":21601},"indent":[]}}],"position":{"start":{"line":724,"column":1,"offset":21515},"end":{"line":724,"column":87,"offset":21601},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Creates a new URI with a specific query string value. Any existing query string values that exactly match the\nprovided key are removed and replaced with the given key value pair. A value of null will set the query string\nkey without a value, e.g. \"key\" instead of \"key=value\".","position":{"start":{"line":726,"column":1,"offset":21603},"end":{"line":728,"column":56,"offset":21879},"indent":[1,1]}}],"position":{"start":{"line":726,"column":1,"offset":21603},"end":{"line":728,"column":56,"offset":21879},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri::withQueryValues","position":{"start":{"line":730,"column":5,"offset":21885},"end":{"line":730,"column":43,"offset":21923},"indent":[]}}],"position":{"start":{"line":730,"column":1,"offset":21881},"end":{"line":730,"column":43,"offset":21923},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function withQueryValues(UriInterface $uri, array $keyValueArray): UriInterface","position":{"start":{"line":732,"column":1,"offset":21925},"end":{"line":732,"column":96,"offset":22020},"indent":[]}}],"position":{"start":{"line":732,"column":1,"offset":21925},"end":{"line":732,"column":96,"offset":22020},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Creates a new URI with multiple query string values. It has the same behavior as ","position":{"start":{"line":734,"column":1,"offset":22022},"end":{"line":734,"column":82,"offset":22103},"indent":[]}},{"type":"inlineCode","value":"withQueryValue()","position":{"start":{"line":734,"column":82,"offset":22103},"end":{"line":734,"column":100,"offset":22121},"indent":[]}},{"type":"text","value":" but for an\nassociative array of key => value.","position":{"start":{"line":734,"column":100,"offset":22121},"end":{"line":735,"column":35,"offset":22167},"indent":[1]}}],"position":{"start":{"line":734,"column":1,"offset":22022},"end":{"line":735,"column":35,"offset":22167},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\Uri::withoutQueryValue","position":{"start":{"line":737,"column":5,"offset":22173},"end":{"line":737,"column":45,"offset":22213},"indent":[]}}],"position":{"start":{"line":737,"column":1,"offset":22169},"end":{"line":737,"column":45,"offset":22213},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function withoutQueryValue(UriInterface $uri, $key): UriInterface","position":{"start":{"line":739,"column":1,"offset":22215},"end":{"line":739,"column":82,"offset":22296},"indent":[]}}],"position":{"start":{"line":739,"column":1,"offset":22215},"end":{"line":739,"column":82,"offset":22296},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Creates a new URI with a specific query string value removed. Any existing query string values that exactly match the\nprovided key are removed.","position":{"start":{"line":741,"column":1,"offset":22298},"end":{"line":742,"column":26,"offset":22441},"indent":[1]}}],"position":{"start":{"line":741,"column":1,"offset":22298},"end":{"line":742,"column":26,"offset":22441},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Cross-Origin Detection","position":{"start":{"line":744,"column":4,"offset":22446},"end":{"line":744,"column":26,"offset":22468},"indent":[]}}],"position":{"start":{"line":744,"column":1,"offset":22443},"end":{"line":744,"column":26,"offset":22468},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\UriComparator","position":{"start":{"line":746,"column":1,"offset":22470},"end":{"line":746,"column":32,"offset":22501},"indent":[]}},{"type":"text","value":" provides methods to determine if a modified URL should be considered cross-origin.","position":{"start":{"line":746,"column":32,"offset":22501},"end":{"line":746,"column":115,"offset":22584},"indent":[]}}],"position":{"start":{"line":746,"column":1,"offset":22470},"end":{"line":746,"column":115,"offset":22584},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\UriComparator::isCrossOrigin","position":{"start":{"line":748,"column":5,"offset":22590},"end":{"line":748,"column":51,"offset":22636},"indent":[]}}],"position":{"start":{"line":748,"column":1,"offset":22586},"end":{"line":748,"column":51,"offset":22636},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function isCrossOrigin(UriInterface $original, UriInterface $modified): bool","position":{"start":{"line":750,"column":1,"offset":22638},"end":{"line":750,"column":93,"offset":22730},"indent":[]}}],"position":{"start":{"line":750,"column":1,"offset":22638},"end":{"line":750,"column":93,"offset":22730},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Determines if a modified URL should be considered cross-origin with respect to an original URL.","position":{"start":{"line":752,"column":1,"offset":22732},"end":{"line":752,"column":96,"offset":22827},"indent":[]}}],"position":{"start":{"line":752,"column":1,"offset":22732},"end":{"line":752,"column":96,"offset":22827},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Reference Resolution","position":{"start":{"line":754,"column":4,"offset":22832},"end":{"line":754,"column":24,"offset":22852},"indent":[]}}],"position":{"start":{"line":754,"column":1,"offset":22829},"end":{"line":754,"column":24,"offset":22852},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\UriResolver","position":{"start":{"line":756,"column":1,"offset":22854},"end":{"line":756,"column":30,"offset":22883},"indent":[]}},{"type":"text","value":" provides methods to resolve a URI reference in the context of a base URI according\nto ","position":{"start":{"line":756,"column":30,"offset":22883},"end":{"line":757,"column":4,"offset":22970},"indent":[1]}},{"type":"link","title":null,"url":"https://datatracker.ietf.org/doc/html/rfc3986#section-5","children":[{"type":"text","value":"RFC 3986 Section 5","position":{"start":{"line":757,"column":5,"offset":22971},"end":{"line":757,"column":23,"offset":22989},"indent":[]}}],"position":{"start":{"line":757,"column":4,"offset":22970},"end":{"line":757,"column":81,"offset":23047},"indent":[]}},{"type":"text","value":". This is for example also what web\nbrowsers do when resolving a link in a website based on the current request URI.","position":{"start":{"line":757,"column":81,"offset":23047},"end":{"line":758,"column":81,"offset":23163},"indent":[1]}}],"position":{"start":{"line":756,"column":1,"offset":22854},"end":{"line":758,"column":81,"offset":23163},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\UriResolver::resolve","position":{"start":{"line":760,"column":5,"offset":23169},"end":{"line":760,"column":43,"offset":23207},"indent":[]}}],"position":{"start":{"line":760,"column":1,"offset":23165},"end":{"line":760,"column":43,"offset":23207},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function resolve(UriInterface $base, UriInterface $rel): UriInterface","position":{"start":{"line":762,"column":1,"offset":23209},"end":{"line":762,"column":86,"offset":23294},"indent":[]}}],"position":{"start":{"line":762,"column":1,"offset":23209},"end":{"line":762,"column":86,"offset":23294},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Converts the relative URI into a new URI that is resolved against the base URI.","position":{"start":{"line":764,"column":1,"offset":23296},"end":{"line":764,"column":80,"offset":23375},"indent":[]}}],"position":{"start":{"line":764,"column":1,"offset":23296},"end":{"line":764,"column":80,"offset":23375},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\UriResolver::removeDotSegments","position":{"start":{"line":766,"column":5,"offset":23381},"end":{"line":766,"column":53,"offset":23429},"indent":[]}}],"position":{"start":{"line":766,"column":1,"offset":23377},"end":{"line":766,"column":53,"offset":23429},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function removeDotSegments(string $path): string","position":{"start":{"line":768,"column":1,"offset":23431},"end":{"line":768,"column":65,"offset":23495},"indent":[]}}],"position":{"start":{"line":768,"column":1,"offset":23431},"end":{"line":768,"column":65,"offset":23495},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Removes dot segments from a path and returns the new path according to\n","position":{"start":{"line":770,"column":1,"offset":23497},"end":{"line":771,"column":1,"offset":23568},"indent":[1]}},{"type":"link","title":null,"url":"https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4","children":[{"type":"text","value":"RFC 3986 Section 5.2.4","position":{"start":{"line":771,"column":2,"offset":23569},"end":{"line":771,"column":24,"offset":23591},"indent":[]}}],"position":{"start":{"line":771,"column":1,"offset":23568},"end":{"line":771,"column":86,"offset":23653},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":771,"column":86,"offset":23653},"end":{"line":771,"column":87,"offset":23654},"indent":[]}}],"position":{"start":{"line":770,"column":1,"offset":23497},"end":{"line":771,"column":87,"offset":23654},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\UriResolver::relativize","position":{"start":{"line":773,"column":5,"offset":23660},"end":{"line":773,"column":46,"offset":23701},"indent":[]}}],"position":{"start":{"line":773,"column":1,"offset":23656},"end":{"line":773,"column":46,"offset":23701},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function relativize(UriInterface $base, UriInterface $target): UriInterface","position":{"start":{"line":775,"column":1,"offset":23703},"end":{"line":775,"column":92,"offset":23794},"indent":[]}}],"position":{"start":{"line":775,"column":1,"offset":23703},"end":{"line":775,"column":92,"offset":23794},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Returns the target URI as a relative reference from the base URI. This method is the counterpart to resolve():","position":{"start":{"line":777,"column":1,"offset":23796},"end":{"line":777,"column":111,"offset":23906},"indent":[]}}],"position":{"start":{"line":777,"column":1,"offset":23796},"end":{"line":777,"column":111,"offset":23906},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"(string) $target === (string) UriResolver::resolve($base, UriResolver::relativize($base, $target))","position":{"start":{"line":779,"column":1,"offset":23908},"end":{"line":781,"column":4,"offset":24017},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"One use-case is to use the current request URI as base URI and then generate relative links in your documents\nto reduce the document size or offer self-contained downloadable document archives.","position":{"start":{"line":783,"column":1,"offset":24019},"end":{"line":784,"column":84,"offset":24212},"indent":[1]}}],"position":{"start":{"line":783,"column":1,"offset":24019},"end":{"line":784,"column":84,"offset":24212},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"$base = new Uri('http://example.com/a/b/');\necho UriResolver::relativize($base, new Uri('http://example.com/a/b/c'));  // prints 'c'.\necho UriResolver::relativize($base, new Uri('http://example.com/a/x/y'));  // prints '../x/y'.\necho UriResolver::relativize($base, new Uri('http://example.com/a/b/?q')); // prints '?q'.\necho UriResolver::relativize($base, new Uri('http://example.org/a/b/'));   // prints '//example.org/a/b/'.","position":{"start":{"line":786,"column":1,"offset":24214},"end":{"line":792,"column":4,"offset":24651},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Normalization and Comparison","position":{"start":{"line":794,"column":4,"offset":24656},"end":{"line":794,"column":32,"offset":24684},"indent":[]}}],"position":{"start":{"line":794,"column":1,"offset":24653},"end":{"line":794,"column":32,"offset":24684},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\UriNormalizer","position":{"start":{"line":796,"column":1,"offset":24686},"end":{"line":796,"column":32,"offset":24717},"indent":[]}},{"type":"text","value":" provides methods to normalize and compare URIs according to\n","position":{"start":{"line":796,"column":32,"offset":24717},"end":{"line":797,"column":1,"offset":24778},"indent":[1]}},{"type":"link","title":null,"url":"https://datatracker.ietf.org/doc/html/rfc3986#section-6","children":[{"type":"text","value":"RFC 3986 Section 6","position":{"start":{"line":797,"column":2,"offset":24779},"end":{"line":797,"column":20,"offset":24797},"indent":[]}}],"position":{"start":{"line":797,"column":1,"offset":24778},"end":{"line":797,"column":78,"offset":24855},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":797,"column":78,"offset":24855},"end":{"line":797,"column":79,"offset":24856},"indent":[]}}],"position":{"start":{"line":796,"column":1,"offset":24686},"end":{"line":797,"column":79,"offset":24856},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\UriNormalizer::normalize","position":{"start":{"line":799,"column":5,"offset":24862},"end":{"line":799,"column":47,"offset":24904},"indent":[]}}],"position":{"start":{"line":799,"column":1,"offset":24858},"end":{"line":799,"column":47,"offset":24904},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function normalize(UriInterface $uri, $flags = self::PRESERVING_NORMALIZATIONS): UriInterface","position":{"start":{"line":801,"column":1,"offset":24906},"end":{"line":801,"column":110,"offset":25015},"indent":[]}}],"position":{"start":{"line":801,"column":1,"offset":24906},"end":{"line":801,"column":110,"offset":25015},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Returns a normalized URI. The scheme and host component are already normalized to lowercase per PSR-7 UriInterface.\nThis methods adds additional normalizations that can be configured with the ","position":{"start":{"line":803,"column":1,"offset":25017},"end":{"line":804,"column":77,"offset":25209},"indent":[1]}},{"type":"inlineCode","value":"$flags","position":{"start":{"line":804,"column":77,"offset":25209},"end":{"line":804,"column":85,"offset":25217},"indent":[]}},{"type":"text","value":" parameter which is a bitmask\nof normalizations to apply. The following normalizations are available:","position":{"start":{"line":804,"column":85,"offset":25217},"end":{"line":805,"column":72,"offset":25318},"indent":[1]}}],"position":{"start":{"line":803,"column":1,"offset":25017},"end":{"line":805,"column":72,"offset":25318},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"UriNormalizer::PRESERVING_NORMALIZATIONS","position":{"start":{"line":807,"column":3,"offset":25322},"end":{"line":807,"column":45,"offset":25364},"indent":[]}}],"position":{"start":{"line":807,"column":3,"offset":25322},"end":{"line":807,"column":45,"offset":25364},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  Default normalizations which only include the ones that preserve semantics.","position":{"start":{"line":809,"column":3,"offset":25368},"end":{"line":809,"column":80,"offset":25445},"indent":[]}}],"position":{"start":{"line":809,"column":3,"offset":25368},"end":{"line":809,"column":80,"offset":25445},"indent":[]}}],"position":{"start":{"line":807,"column":1,"offset":25320},"end":{"line":810,"column":1,"offset":25446},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"UriNormalizer::CAPITALIZE_PERCENT_ENCODING","position":{"start":{"line":811,"column":3,"offset":25449},"end":{"line":811,"column":47,"offset":25493},"indent":[]}}],"position":{"start":{"line":811,"column":3,"offset":25449},"end":{"line":811,"column":47,"offset":25493},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  All letters within a percent-encoding triplet (e.g., \"%3A\") are case-insensitive, and should be capitalized.","position":{"start":{"line":813,"column":3,"offset":25497},"end":{"line":813,"column":113,"offset":25607},"indent":[]}}],"position":{"start":{"line":813,"column":3,"offset":25497},"end":{"line":813,"column":113,"offset":25607},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  Example: ","position":{"start":{"line":815,"column":3,"offset":25611},"end":{"line":815,"column":14,"offset":25622},"indent":[]}},{"type":"inlineCode","value":"http://example.org/a%c2%b1b","position":{"start":{"line":815,"column":14,"offset":25622},"end":{"line":815,"column":43,"offset":25651},"indent":[]}},{"type":"text","value":" → ","position":{"start":{"line":815,"column":43,"offset":25651},"end":{"line":815,"column":46,"offset":25654},"indent":[]}},{"type":"inlineCode","value":"http://example.org/a%C2%B1b","position":{"start":{"line":815,"column":46,"offset":25654},"end":{"line":815,"column":75,"offset":25683},"indent":[]}}],"position":{"start":{"line":815,"column":3,"offset":25611},"end":{"line":815,"column":75,"offset":25683},"indent":[]}}],"position":{"start":{"line":811,"column":1,"offset":25447},"end":{"line":816,"column":1,"offset":25684},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"UriNormalizer::DECODE_UNRESERVED_CHARACTERS","position":{"start":{"line":817,"column":3,"offset":25687},"end":{"line":817,"column":48,"offset":25732},"indent":[]}}],"position":{"start":{"line":817,"column":3,"offset":25687},"end":{"line":817,"column":48,"offset":25732},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  Decodes percent-encoded octets of unreserved characters. For consistency, percent-encoded octets in the ranges of\n  ALPHA (%41–%5A and %61–%7A), DIGIT (%30–%39), hyphen (%2D), period (%2E), underscore (%5F), or tilde (%7E) should\n  not be created by URI producers and, when found in a URI, should be decoded to their corresponding unreserved\n  characters by URI normalizers.","position":{"start":{"line":819,"column":3,"offset":25736},"end":{"line":822,"column":35,"offset":26118},"indent":[3,3,3]}}],"position":{"start":{"line":819,"column":3,"offset":25736},"end":{"line":822,"column":35,"offset":26118},"indent":[3,3,3]}},{"type":"paragraph","children":[{"type":"text","value":"  Example: ","position":{"start":{"line":824,"column":3,"offset":26122},"end":{"line":824,"column":14,"offset":26133},"indent":[]}},{"type":"inlineCode","value":"http://example.org/%7Eusern%61me/","position":{"start":{"line":824,"column":14,"offset":26133},"end":{"line":824,"column":49,"offset":26168},"indent":[]}},{"type":"text","value":" → ","position":{"start":{"line":824,"column":49,"offset":26168},"end":{"line":824,"column":52,"offset":26171},"indent":[]}},{"type":"inlineCode","value":"http://example.org/~username/","position":{"start":{"line":824,"column":52,"offset":26171},"end":{"line":824,"column":83,"offset":26202},"indent":[]}}],"position":{"start":{"line":824,"column":3,"offset":26122},"end":{"line":824,"column":83,"offset":26202},"indent":[]}}],"position":{"start":{"line":817,"column":1,"offset":25685},"end":{"line":825,"column":1,"offset":26203},"indent":[1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"UriNormalizer::CONVERT_EMPTY_PATH","position":{"start":{"line":826,"column":3,"offset":26206},"end":{"line":826,"column":38,"offset":26241},"indent":[]}}],"position":{"start":{"line":826,"column":3,"offset":26206},"end":{"line":826,"column":38,"offset":26241},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  Converts the empty path to \"/\" for http and https URIs.","position":{"start":{"line":828,"column":3,"offset":26245},"end":{"line":828,"column":60,"offset":26302},"indent":[]}}],"position":{"start":{"line":828,"column":3,"offset":26245},"end":{"line":828,"column":60,"offset":26302},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  Example: ","position":{"start":{"line":830,"column":3,"offset":26306},"end":{"line":830,"column":14,"offset":26317},"indent":[]}},{"type":"inlineCode","value":"http://example.org","position":{"start":{"line":830,"column":14,"offset":26317},"end":{"line":830,"column":34,"offset":26337},"indent":[]}},{"type":"text","value":" → ","position":{"start":{"line":830,"column":34,"offset":26337},"end":{"line":830,"column":37,"offset":26340},"indent":[]}},{"type":"inlineCode","value":"http://example.org/","position":{"start":{"line":830,"column":37,"offset":26340},"end":{"line":830,"column":58,"offset":26361},"indent":[]}}],"position":{"start":{"line":830,"column":3,"offset":26306},"end":{"line":830,"column":58,"offset":26361},"indent":[]}}],"position":{"start":{"line":826,"column":1,"offset":26204},"end":{"line":831,"column":1,"offset":26362},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"UriNormalizer::REMOVE_DEFAULT_HOST","position":{"start":{"line":832,"column":3,"offset":26365},"end":{"line":832,"column":39,"offset":26401},"indent":[]}}],"position":{"start":{"line":832,"column":3,"offset":26365},"end":{"line":832,"column":39,"offset":26401},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  Removes the default host of the given URI scheme from the URI. Only the \"file\" scheme defines the default host\n  \"localhost\". All of ","position":{"start":{"line":834,"column":3,"offset":26405},"end":{"line":835,"column":25,"offset":26542},"indent":[3]}},{"type":"inlineCode","value":"file:/myfile","position":{"start":{"line":835,"column":25,"offset":26542},"end":{"line":835,"column":39,"offset":26556},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":835,"column":39,"offset":26556},"end":{"line":835,"column":41,"offset":26558},"indent":[]}},{"type":"inlineCode","value":"file:///myfile","position":{"start":{"line":835,"column":41,"offset":26558},"end":{"line":835,"column":57,"offset":26574},"indent":[]}},{"type":"text","value":", and ","position":{"start":{"line":835,"column":57,"offset":26574},"end":{"line":835,"column":63,"offset":26580},"indent":[]}},{"type":"inlineCode","value":"file://localhost/myfile","position":{"start":{"line":835,"column":63,"offset":26580},"end":{"line":835,"column":88,"offset":26605},"indent":[]}},{"type":"text","value":" are equivalent according to\n  RFC 3986.","position":{"start":{"line":835,"column":88,"offset":26605},"end":{"line":836,"column":14,"offset":26647},"indent":[3]}}],"position":{"start":{"line":834,"column":3,"offset":26405},"end":{"line":836,"column":14,"offset":26647},"indent":[3,3]}},{"type":"paragraph","children":[{"type":"text","value":"  Example: ","position":{"start":{"line":838,"column":3,"offset":26651},"end":{"line":838,"column":14,"offset":26662},"indent":[]}},{"type":"inlineCode","value":"file://localhost/myfile","position":{"start":{"line":838,"column":14,"offset":26662},"end":{"line":838,"column":39,"offset":26687},"indent":[]}},{"type":"text","value":" → ","position":{"start":{"line":838,"column":39,"offset":26687},"end":{"line":838,"column":42,"offset":26690},"indent":[]}},{"type":"inlineCode","value":"file:///myfile","position":{"start":{"line":838,"column":42,"offset":26690},"end":{"line":838,"column":58,"offset":26706},"indent":[]}}],"position":{"start":{"line":838,"column":3,"offset":26651},"end":{"line":838,"column":58,"offset":26706},"indent":[]}}],"position":{"start":{"line":832,"column":1,"offset":26363},"end":{"line":839,"column":1,"offset":26707},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"UriNormalizer::REMOVE_DEFAULT_PORT","position":{"start":{"line":840,"column":3,"offset":26710},"end":{"line":840,"column":39,"offset":26746},"indent":[]}}],"position":{"start":{"line":840,"column":3,"offset":26710},"end":{"line":840,"column":39,"offset":26746},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  Removes the default port of the given URI scheme from the URI.","position":{"start":{"line":842,"column":3,"offset":26750},"end":{"line":842,"column":67,"offset":26814},"indent":[]}}],"position":{"start":{"line":842,"column":3,"offset":26750},"end":{"line":842,"column":67,"offset":26814},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  Example: ","position":{"start":{"line":844,"column":3,"offset":26818},"end":{"line":844,"column":14,"offset":26829},"indent":[]}},{"type":"inlineCode","value":"http://example.org:80/","position":{"start":{"line":844,"column":14,"offset":26829},"end":{"line":844,"column":38,"offset":26853},"indent":[]}},{"type":"text","value":" → ","position":{"start":{"line":844,"column":38,"offset":26853},"end":{"line":844,"column":41,"offset":26856},"indent":[]}},{"type":"inlineCode","value":"http://example.org/","position":{"start":{"line":844,"column":41,"offset":26856},"end":{"line":844,"column":62,"offset":26877},"indent":[]}}],"position":{"start":{"line":844,"column":3,"offset":26818},"end":{"line":844,"column":62,"offset":26877},"indent":[]}}],"position":{"start":{"line":840,"column":1,"offset":26708},"end":{"line":845,"column":1,"offset":26878},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"UriNormalizer::REMOVE_DOT_SEGMENTS","position":{"start":{"line":846,"column":3,"offset":26881},"end":{"line":846,"column":39,"offset":26917},"indent":[]}}],"position":{"start":{"line":846,"column":3,"offset":26881},"end":{"line":846,"column":39,"offset":26917},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  Removes unnecessary dot-segments. Dot-segments in relative-path references are not removed as it would\n  change the semantics of the URI reference.","position":{"start":{"line":848,"column":3,"offset":26921},"end":{"line":849,"column":47,"offset":27072},"indent":[3]}}],"position":{"start":{"line":848,"column":3,"offset":26921},"end":{"line":849,"column":47,"offset":27072},"indent":[3]}},{"type":"paragraph","children":[{"type":"text","value":"  Example: ","position":{"start":{"line":851,"column":3,"offset":27076},"end":{"line":851,"column":14,"offset":27087},"indent":[]}},{"type":"inlineCode","value":"http://example.org/../a/b/../c/./d.html","position":{"start":{"line":851,"column":14,"offset":27087},"end":{"line":851,"column":55,"offset":27128},"indent":[]}},{"type":"text","value":" → ","position":{"start":{"line":851,"column":55,"offset":27128},"end":{"line":851,"column":58,"offset":27131},"indent":[]}},{"type":"inlineCode","value":"http://example.org/a/c/d.html","position":{"start":{"line":851,"column":58,"offset":27131},"end":{"line":851,"column":89,"offset":27162},"indent":[]}}],"position":{"start":{"line":851,"column":3,"offset":27076},"end":{"line":851,"column":89,"offset":27162},"indent":[]}}],"position":{"start":{"line":846,"column":1,"offset":26879},"end":{"line":852,"column":1,"offset":27163},"indent":[1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"UriNormalizer::REMOVE_DUPLICATE_SLASHES","position":{"start":{"line":853,"column":3,"offset":27166},"end":{"line":853,"column":44,"offset":27207},"indent":[]}}],"position":{"start":{"line":853,"column":3,"offset":27166},"end":{"line":853,"column":44,"offset":27207},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  Paths which include two or more adjacent slashes are converted to one. Webservers usually ignore duplicate slashes\n  and treat those URIs equivalent. But in theory those URIs do not need to be equivalent. So this normalization\n  may change the semantics. Encoded slashes (%2F) are not removed.","position":{"start":{"line":855,"column":3,"offset":27211},"end":{"line":857,"column":69,"offset":27510},"indent":[3,3]}}],"position":{"start":{"line":855,"column":3,"offset":27211},"end":{"line":857,"column":69,"offset":27510},"indent":[3,3]}},{"type":"paragraph","children":[{"type":"text","value":"  Example: ","position":{"start":{"line":859,"column":3,"offset":27514},"end":{"line":859,"column":14,"offset":27525},"indent":[]}},{"type":"inlineCode","value":"http://example.org//foo///bar.html","position":{"start":{"line":859,"column":14,"offset":27525},"end":{"line":859,"column":50,"offset":27561},"indent":[]}},{"type":"text","value":" → ","position":{"start":{"line":859,"column":50,"offset":27561},"end":{"line":859,"column":53,"offset":27564},"indent":[]}},{"type":"inlineCode","value":"http://example.org/foo/bar.html","position":{"start":{"line":859,"column":53,"offset":27564},"end":{"line":859,"column":86,"offset":27597},"indent":[]}}],"position":{"start":{"line":859,"column":3,"offset":27514},"end":{"line":859,"column":86,"offset":27597},"indent":[]}}],"position":{"start":{"line":853,"column":1,"offset":27164},"end":{"line":860,"column":1,"offset":27598},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"UriNormalizer::SORT_QUERY_PARAMETERS","position":{"start":{"line":861,"column":3,"offset":27601},"end":{"line":861,"column":41,"offset":27639},"indent":[]}}],"position":{"start":{"line":861,"column":3,"offset":27601},"end":{"line":861,"column":41,"offset":27639},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"  Sort query parameters with their values in alphabetical order. However, the order of parameters in a URI may be\n  significant (this is not defined by the standard). So this normalization is not safe and may change the semantics\n  of the URI.","position":{"start":{"line":863,"column":3,"offset":27643},"end":{"line":865,"column":16,"offset":27890},"indent":[3,3]}}],"position":{"start":{"line":863,"column":3,"offset":27643},"end":{"line":865,"column":16,"offset":27890},"indent":[3,3]}},{"type":"paragraph","children":[{"type":"text","value":"  Example: ","position":{"start":{"line":867,"column":3,"offset":27894},"end":{"line":867,"column":14,"offset":27905},"indent":[]}},{"type":"inlineCode","value":"?lang=en&article=fred","position":{"start":{"line":867,"column":14,"offset":27905},"end":{"line":867,"column":37,"offset":27928},"indent":[]}},{"type":"text","value":" → ","position":{"start":{"line":867,"column":37,"offset":27928},"end":{"line":867,"column":40,"offset":27931},"indent":[]}},{"type":"inlineCode","value":"?article=fred&lang=en","position":{"start":{"line":867,"column":40,"offset":27931},"end":{"line":867,"column":63,"offset":27954},"indent":[]}}],"position":{"start":{"line":867,"column":3,"offset":27894},"end":{"line":867,"column":63,"offset":27954},"indent":[]}}],"position":{"start":{"line":861,"column":1,"offset":27599},"end":{"line":867,"column":63,"offset":27954},"indent":[1,1,1,1,1,1]}}],"position":{"start":{"line":807,"column":1,"offset":25320},"end":{"line":867,"column":63,"offset":27954},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"GuzzleHttp\\Psr7\\UriNormalizer::isEquivalent","position":{"start":{"line":869,"column":5,"offset":27960},"end":{"line":869,"column":50,"offset":28005},"indent":[]}}],"position":{"start":{"line":869,"column":1,"offset":27956},"end":{"line":869,"column":50,"offset":28005},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"public static function isEquivalent(UriInterface $uri1, UriInterface $uri2, $normalizations = self::PRESERVING_NORMALIZATIONS): bool","position":{"start":{"line":871,"column":1,"offset":28007},"end":{"line":871,"column":135,"offset":28141},"indent":[]}}],"position":{"start":{"line":871,"column":1,"offset":28007},"end":{"line":871,"column":135,"offset":28141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whether two URIs can be considered equivalent. Both URIs are normalized automatically before comparison with the given\n","position":{"start":{"line":873,"column":1,"offset":28143},"end":{"line":874,"column":1,"offset":28262},"indent":[1]}},{"type":"inlineCode","value":"$normalizations","position":{"start":{"line":874,"column":1,"offset":28262},"end":{"line":874,"column":18,"offset":28279},"indent":[]}},{"type":"text","value":" bitmask. The method also accepts relative URI references and returns true when they are equivalent.\nThis of course assumes they will be resolved against the same base URI. If this is not the case, determination of\nequivalence or difference of relative references does not mean anything.","position":{"start":{"line":874,"column":18,"offset":28279},"end":{"line":876,"column":73,"offset":28566},"indent":[1,1]}}],"position":{"start":{"line":873,"column":1,"offset":28143},"end":{"line":876,"column":73,"offset":28566},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Security","position":{"start":{"line":879,"column":4,"offset":28572},"end":{"line":879,"column":12,"offset":28580},"indent":[]}}],"position":{"start":{"line":879,"column":1,"offset":28569},"end":{"line":879,"column":12,"offset":28580},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you discover a security vulnerability within this package, please send an email to ","position":{"start":{"line":881,"column":1,"offset":28582},"end":{"line":881,"column":87,"offset":28668},"indent":[]}},{"type":"link","title":null,"url":"mailto:security@tidelift.com.","children":[{"type":"text","value":"security@tidelift.com.","position":{"start":{"line":881,"column":87,"offset":28668},"end":{"line":881,"column":109,"offset":28690},"indent":[]}}],"position":{"start":{"line":881,"column":87,"offset":28668},"end":{"line":881,"column":109,"offset":28690},"indent":[]}},{"type":"text","value":" All security vulnerabilities will be promptly addressed. Please do not disclose security-related issues publicly until a fix has been announced. Please see ","position":{"start":{"line":881,"column":109,"offset":28690},"end":{"line":881,"column":266,"offset":28847},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/guzzle/psr7/security/policy","children":[{"type":"text","value":"Security Policy","position":{"start":{"line":881,"column":267,"offset":28848},"end":{"line":881,"column":282,"offset":28863},"indent":[]}}],"position":{"start":{"line":881,"column":266,"offset":28847},"end":{"line":881,"column":331,"offset":28912},"indent":[]}},{"type":"text","value":" for more information.","position":{"start":{"line":881,"column":331,"offset":28912},"end":{"line":881,"column":353,"offset":28934},"indent":[]}}],"position":{"start":{"line":881,"column":1,"offset":28582},"end":{"line":881,"column":353,"offset":28934},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"License","position":{"start":{"line":884,"column":4,"offset":28940},"end":{"line":884,"column":11,"offset":28947},"indent":[]}}],"position":{"start":{"line":884,"column":1,"offset":28937},"end":{"line":884,"column":11,"offset":28947},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Guzzle is made available under the MIT License (MIT). Please see ","position":{"start":{"line":886,"column":1,"offset":28949},"end":{"line":886,"column":66,"offset":29014},"indent":[]}},{"type":"link","title":null,"url":"LICENSE","children":[{"type":"text","value":"License File","position":{"start":{"line":886,"column":67,"offset":29015},"end":{"line":886,"column":79,"offset":29027},"indent":[]}}],"position":{"start":{"line":886,"column":66,"offset":29014},"end":{"line":886,"column":89,"offset":29037},"indent":[]}},{"type":"text","value":" for more information.","position":{"start":{"line":886,"column":89,"offset":29037},"end":{"line":886,"column":111,"offset":29059},"indent":[]}}],"position":{"start":{"line":886,"column":1,"offset":28949},"end":{"line":886,"column":111,"offset":29059},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"For Enterprise","position":{"start":{"line":889,"column":4,"offset":29065},"end":{"line":889,"column":18,"offset":29079},"indent":[]}}],"position":{"start":{"line":889,"column":1,"offset":29062},"end":{"line":889,"column":18,"offset":29079},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Available as part of the Tidelift Subscription","position":{"start":{"line":891,"column":1,"offset":29081},"end":{"line":891,"column":47,"offset":29127},"indent":[]}}],"position":{"start":{"line":891,"column":1,"offset":29081},"end":{"line":891,"column":47,"offset":29127},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The maintainers of Guzzle and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. ","position":{"start":{"line":893,"column":1,"offset":29129},"end":{"line":893,"column":313,"offset":29441},"indent":[]}},{"type":"link","title":null,"url":"https://tidelift.com/subscription/pkg/packagist-guzzlehttp-psr7?utm_source=packagist-guzzlehttp-psr7&utm_medium=referral&utm_campaign=enterprise&utm_term=repo","children":[{"type":"text","value":"Learn more.","position":{"start":{"line":893,"column":314,"offset":29442},"end":{"line":893,"column":325,"offset":29453},"indent":[]}}],"position":{"start":{"line":893,"column":313,"offset":29441},"end":{"line":893,"column":486,"offset":29614},"indent":[]}}],"position":{"start":{"line":893,"column":1,"offset":29129},"end":{"line":893,"column":486,"offset":29614},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":896,"column":1,"offset":29617},"end":{"line":896,"column":31,"offset":29647},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":896,"column":31,"offset":29647}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"psr-7-message-implementation\"\n    }}>{`PSR-7 Message Implementation`}</h1>\n    <p>{`This repository contains a full `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.php-fig.org/psr/psr-7/\"\n      }}>{`PSR-7`}</a>{`\nmessage implementation, several stream decorators, and some helpful\nfunctionality like query string parsing.`}</p>\n    <p><img alt=\"CI\" src=\"https://github.com/guzzle/psr7/workflows/CI/badge.svg\" />{`\n`}<img alt=\"Static analysis\" src=\"https://github.com/guzzle/psr7/workflows/Static%20analysis/badge.svg\" /></p>\n    <h2 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h2>\n    <p>{`This package comes with a number of stream implementations and stream\ndecorators.`}</p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`composer require guzzlehttp/psr7\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"version-guidance\"\n    }}>{`Version Guidance`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Version`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Status`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PHP Version`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1.x`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`EOL (2024-06-30)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`>=5.4,<8.2`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`2.x`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Latest`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`>=7.2.5,<8.5`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"appendstream\"\n    }}>{`AppendStream`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\AppendStream`}</inlineCode></p>\n    <p>{`Reads from multiple streams, one after the other.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use GuzzleHttp\\\\Psr7;\n\n$a = Psr7\\\\Utils::streamFor('abc, ');\n$b = Psr7\\\\Utils::streamFor('123.');\n$composed = new Psr7\\\\AppendStream([$a, $b]);\n\n$composed->addStream(Psr7\\\\Utils::streamFor(' Above all listen to me'));\n\necho $composed; // abc, 123. Above all listen to me.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"bufferstream\"\n    }}>{`BufferStream`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\BufferStream`}</inlineCode></p>\n    <p>{`Provides a buffer stream that can be written to fill a buffer, and read\nfrom to remove bytes from the buffer.`}</p>\n    <p>{`This stream returns a \"hwm\" metadata value that tells upstream consumers\nwhat the configured high water mark of the stream is, or the maximum\npreferred size of the buffer.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use GuzzleHttp\\\\Psr7;\n\n// When more than 1024 bytes are in the buffer, it will begin returning\n// false to writes. This is an indication that writers should slow down.\n$buffer = new Psr7\\\\BufferStream(1024);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"cachingstream\"\n    }}>{`CachingStream`}</h2>\n    <p>{`The CachingStream is used to allow seeking over previously read bytes on\nnon-seekable streams. This can be useful when transferring a non-seekable\nentity body fails due to needing to rewind the stream (for example, resulting\nfrom a redirect). Data that is read from the remote stream will be buffered in\na PHP temp stream so that previously read bytes are cached first in memory,\nthen on disk.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use GuzzleHttp\\\\Psr7;\n\n$original = Psr7\\\\Utils::streamFor(fopen('http://www.google.com', 'r'));\n$stream = new Psr7\\\\CachingStream($original);\n\n$stream->read(1024);\necho $stream->tell();\n// 1024\n\n$stream->seek(0);\necho $stream->tell();\n// 0\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"droppingstream\"\n    }}>{`DroppingStream`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\DroppingStream`}</inlineCode></p>\n    <p>{`Stream decorator that begins dropping data once the size of the underlying\nstream becomes too full.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use GuzzleHttp\\\\Psr7;\n\n// Create an empty stream\n$stream = Psr7\\\\Utils::streamFor();\n\n// Start dropping data when the stream has more than 10 bytes\n$dropping = new Psr7\\\\DroppingStream($stream, 10);\n\n$dropping->write('01234567890123456789');\necho $stream; // 0123456789\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fnstream\"\n    }}>{`FnStream`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\FnStream`}</inlineCode></p>\n    <p>{`Compose stream implementations based on a hash of functions.`}</p>\n    <p>{`Allows for easy testing and extension of a provided stream without needing\nto create a concrete class for a simple extension point.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nuse GuzzleHttp\\\\Psr7;\n\n$stream = Psr7\\\\Utils::streamFor('hi');\n$fnStream = Psr7\\\\FnStream::decorate($stream, [\n    'rewind' => function () use ($stream) {\n        echo 'About to rewind - ';\n        $stream->rewind();\n        echo 'rewound!';\n    }\n]);\n\n$fnStream->rewind();\n// Outputs: About to rewind - rewound!\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"inflatestream\"\n    }}>{`InflateStream`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\InflateStream`}</inlineCode></p>\n    <p>{`Uses PHP's zlib.inflate filter to inflate zlib (HTTP deflate, RFC1950) or gzipped (RFC1952) content.`}</p>\n    <p>{`This stream decorator converts the provided stream to a PHP stream resource,\nthen appends the zlib.inflate filter. The stream is then converted back\nto a Guzzle stream resource to be used as a Guzzle stream.`}</p>\n    <h2 {...{\n      \"id\": \"lazyopenstream\"\n    }}>{`LazyOpenStream`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\LazyOpenStream`}</inlineCode></p>\n    <p>{`Lazily reads or writes to a file that is opened only after an IO operation\ntake place on the stream.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use GuzzleHttp\\\\Psr7;\n\n$stream = new Psr7\\\\LazyOpenStream('/path/to/file', 'r');\n// The file has not yet been opened...\n\necho $stream->read(10);\n// The file is opened and read from only when needed.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"limitstream\"\n    }}>{`LimitStream`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\LimitStream`}</inlineCode></p>\n    <p>{`LimitStream can be used to read a subset or slice of an existing stream object.\nThis can be useful for breaking a large file into smaller pieces to be sent in\nchunks (e.g. Amazon S3's multipart upload API).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use GuzzleHttp\\\\Psr7;\n\n$original = Psr7\\\\Utils::streamFor(fopen('/tmp/test.txt', 'r+'));\necho $original->getSize();\n// >>> 1048576\n\n// Limit the size of the body to 1024 bytes and start reading from byte 2048\n$stream = new Psr7\\\\LimitStream($original, 1024, 2048);\necho $stream->getSize();\n// >>> 1024\necho $stream->tell();\n// >>> 0\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multipartstream\"\n    }}>{`MultipartStream`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\MultipartStream`}</inlineCode></p>\n    <p>{`Stream that when read returns bytes for a streaming multipart or\nmultipart/form-data stream.`}</p>\n    <h2 {...{\n      \"id\": \"noseekstream\"\n    }}>{`NoSeekStream`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\NoSeekStream`}</inlineCode></p>\n    <p>{`NoSeekStream wraps a stream and does not allow seeking.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use GuzzleHttp\\\\Psr7;\n\n$original = Psr7\\\\Utils::streamFor('foo');\n$noSeek = new Psr7\\\\NoSeekStream($original);\n\necho $noSeek->read(3);\n// foo\nvar_export($noSeek->isSeekable());\n// false\n$noSeek->seek(0);\nvar_export($noSeek->read(3));\n// NULL\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pumpstream\"\n    }}>{`PumpStream`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\PumpStream`}</inlineCode></p>\n    <p>{`Provides a read only stream that pumps data from a PHP callable.`}</p>\n    <p>{`When invoking the provided callable, the PumpStream will pass the amount of\ndata requested to read to the callable. The callable can choose to ignore\nthis value and return fewer or more bytes than requested. Any extra data\nreturned by the provided callable is buffered internally until drained using\nthe read() function of the PumpStream. The provided callable MUST return\nfalse when there is no more data to read.`}</p>\n    <h2 {...{\n      \"id\": \"implementing-stream-decorators\"\n    }}>{`Implementing stream decorators`}</h2>\n    <p>{`Creating a stream decorator is very easy thanks to the\n`}<inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\StreamDecoratorTrait`}</inlineCode>{`. This trait provides methods that\nimplement `}<inlineCode parentName=\"p\">{`Psr\\\\Http\\\\Message\\\\StreamInterface`}</inlineCode>{` by proxying to an underlying\nstream. Just `}<inlineCode parentName=\"p\">{`use`}</inlineCode>{` the `}<inlineCode parentName=\"p\">{`StreamDecoratorTrait`}</inlineCode>{` and implement your custom\nmethods.`}</p>\n    <p>{`For example, let's say we wanted to call a specific function each time the last\nbyte is read from a stream. This could be implemented by overriding the\n`}<inlineCode parentName=\"p\">{`read()`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use Psr\\\\Http\\\\Message\\\\StreamInterface;\nuse GuzzleHttp\\\\Psr7\\\\StreamDecoratorTrait;\n\nclass EofCallbackStream implements StreamInterface\n{\n    use StreamDecoratorTrait;\n\n    private $callback;\n\n    private $stream;\n\n    public function __construct(StreamInterface $stream, callable $cb)\n    {\n        $this->stream = $stream;\n        $this->callback = $cb;\n    }\n\n    public function read($length)\n    {\n        $result = $this->stream->read($length);\n\n        // Invoke the callback when EOF is hit.\n        if ($this->eof()) {\n            ($this->callback)();\n        }\n\n        return $result;\n    }\n}\n`}</code></pre>\n    <p>{`This decorator could be added to any existing stream and used like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use GuzzleHttp\\\\Psr7;\n\n$original = Psr7\\\\Utils::streamFor('foo');\n\n$eofStream = new EofCallbackStream($original, function () {\n    echo 'EOF!';\n});\n\n$eofStream->read(2);\n$eofStream->read(1);\n// echoes \"EOF!\"\n$eofStream->seek(0);\n$eofStream->read(3);\n// echoes \"EOF!\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"php-streamwrapper\"\n    }}>{`PHP StreamWrapper`}</h2>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\StreamWrapper`}</inlineCode>{` class if you need to use a\nPSR-7 stream as a PHP stream resource.`}</p>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\StreamWrapper::getResource()`}</inlineCode>{` method to create a PHP\nstream from a PSR-7 stream.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use GuzzleHttp\\\\Psr7\\\\StreamWrapper;\n\n$stream = GuzzleHttp\\\\Psr7\\\\Utils::streamFor('hello!');\n$resource = StreamWrapper::getResource($stream);\necho fread($resource, 6); // outputs hello!\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"static-api\"\n    }}>{`Static API`}</h1>\n    <p>{`There are various static methods available under the `}<inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7`}</inlineCode>{` namespace.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7messagetostring\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Message::toString`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function toString(MessageInterface $message): string`}</inlineCode></p>\n    <p>{`Returns the string representation of an HTTP message.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$request = new GuzzleHttp\\\\Psr7\\\\Request('GET', 'http://example.com');\necho GuzzleHttp\\\\Psr7\\\\Message::toString($request);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7messagebodysummary\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Message::bodySummary`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function bodySummary(MessageInterface $message, int $truncateAt = 120): string|null`}</inlineCode></p>\n    <p>{`Get a short summary of the message body.`}</p>\n    <p>{`Will return `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` if the response is not printable.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7messagerewindbody\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Message::rewindBody`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function rewindBody(MessageInterface $message): void`}</inlineCode></p>\n    <p>{`Attempts to rewind a message body and throws an exception on failure.`}</p>\n    <p>{`The body of the message will only be rewound if a call to `}<inlineCode parentName=\"p\">{`tell()`}</inlineCode>{`\nreturns a value other than `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7messageparsemessage\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Message::parseMessage`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function parseMessage(string $message): array`}</inlineCode></p>\n    <p>{`Parses an HTTP message into an associative array.`}</p>\n    <p>{`The array contains the \"start-line\" key containing the start line of\nthe message, \"headers\" key containing an associative array of header\narray values, and a \"body\" key containing the body of the message.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7messageparserequesturi\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Message::parseRequestUri`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function parseRequestUri(string $path, array $headers): string`}</inlineCode></p>\n    <p>{`Constructs a URI for an HTTP request message.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7messageparserequest\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Message::parseRequest`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function parseRequest(string $message): Request`}</inlineCode></p>\n    <p>{`Parses a request message string into a request object.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7messageparseresponse\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Message::parseResponse`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function parseResponse(string $message): Response`}</inlineCode></p>\n    <p>{`Parses a response message string into a response object.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7headerparse\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Header::parse`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function parse(string|array $header): array`}</inlineCode></p>\n    <p>{`Parse an array of header values containing \";\" separated data into an\narray of associative arrays representing the header key value pair data\nof the header. When a parameter does not contain a value, but just\ncontains a key, this function will inject a key with a '' string value.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7headersplitlist\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Header::splitList`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function splitList(string|string[] $header): string[]`}</inlineCode></p>\n    <p>{`Splits a HTTP header defined to contain a comma-separated list into\neach individual value:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$knownEtags = Header::splitList($request->getHeader('if-none-match'));\n`}</code></pre>\n    <p>{`Example headers include `}<inlineCode parentName=\"p\">{`accept`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`cache-control`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`if-none-match`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7headernormalize-deprecated\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Header::normalize`}</inlineCode>{` (deprecated)`}</h2>\n    <p><inlineCode parentName=\"p\">{`public static function normalize(string|array $header): array`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`Header::normalize()`}</inlineCode>{` is deprecated in favor of `}<a parentName=\"p\" {...{\n        \"href\": \"README.md#guzzlehttppsr7headersplitlist\"\n      }}><inlineCode parentName=\"a\">{`Header::splitList()`}</inlineCode></a>{`\nwhich performs the same operation with a cleaned up API and improved\ndocumentation.`}</p>\n    <p>{`Converts an array of header values that may contain comma separated\nheaders into an array of headers with no comma separated values.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7queryparse\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Query::parse`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function parse(string $str, int|bool $urlEncoding = true): array`}</inlineCode></p>\n    <p>{`Parse a query string into an associative array.`}</p>\n    <p>{`If multiple values are found for the same key, the value of that key\nvalue pair will become an array. This function does not parse nested\nPHP style arrays into an associative array (e.g., `}<inlineCode parentName=\"p\">{`foo[a]=1&foo[b]=2`}</inlineCode>{`\nwill be parsed into `}<inlineCode parentName=\"p\">{`['foo[a]' => '1', 'foo[b]' => '2'])`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7querybuild\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Query::build`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function build(array $params, int|false $encoding = PHP_QUERY_RFC3986, bool $treatBoolsAsInts = true): string`}</inlineCode></p>\n    <p>{`Build a query string from an array of key value pairs.`}</p>\n    <p>{`This function can use the return value of `}<inlineCode parentName=\"p\">{`parse()`}</inlineCode>{` to build a query\nstring. This function does not modify the provided keys when an array is\nencountered (like `}<inlineCode parentName=\"p\">{`http_build_query()`}</inlineCode>{` would).`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7utilscaselessremove\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Utils::caselessRemove`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function caselessRemove(iterable<string> $keys, $keys, array $data): array`}</inlineCode></p>\n    <p>{`Remove the items given by the keys, case insensitively from the data.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7utilscopytostream\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Utils::copyToStream`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function copyToStream(StreamInterface $source, StreamInterface $dest, int $maxLen = -1): void`}</inlineCode></p>\n    <p>{`Copy the contents of a stream into another stream until the given number\nof bytes have been read.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7utilscopytostring\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Utils::copyToString`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function copyToString(StreamInterface $stream, int $maxLen = -1): string`}</inlineCode></p>\n    <p>{`Copy the contents of a stream into a string until the given number of\nbytes have been read.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7utilshash\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Utils::hash`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function hash(StreamInterface $stream, string $algo, bool $rawOutput = false): string`}</inlineCode></p>\n    <p>{`Calculate a hash of a stream.`}</p>\n    <p>{`This method reads the entire stream to calculate a rolling hash, based on\nPHP's `}<inlineCode parentName=\"p\">{`hash_init`}</inlineCode>{` functions.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7utilsmodifyrequest\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Utils::modifyRequest`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function modifyRequest(RequestInterface $request, array $changes): RequestInterface`}</inlineCode></p>\n    <p>{`Clone and modify a request with the given changes.`}</p>\n    <p>{`This method is useful for reducing the number of clones needed to mutate\na message.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`method: (string) Changes the HTTP method.`}</li>\n      <li parentName=\"ul\">{`set_headers: (array) Sets the given headers.`}</li>\n      <li parentName=\"ul\">{`remove_headers: (array) Remove the given headers.`}</li>\n      <li parentName=\"ul\">{`body: (mixed) Sets the given body.`}</li>\n      <li parentName=\"ul\">{`uri: (UriInterface) Set the URI.`}</li>\n      <li parentName=\"ul\">{`query: (string) Set the query string value of the URI.`}</li>\n      <li parentName=\"ul\">{`version: (string) Set the protocol version.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7utilsreadline\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Utils::readLine`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function readLine(StreamInterface $stream, ?int $maxLength = null): string`}</inlineCode></p>\n    <p>{`Read a line from the stream up to the maximum allowed buffer length.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7utilsredactuserinfo\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Utils::redactUserInfo`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function redactUserInfo(UriInterface $uri): UriInterface`}</inlineCode></p>\n    <p>{`Redact the password in the user info part of a URI.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7utilsstreamfor\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Utils::streamFor`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function streamFor(resource|string|null|int|float|bool|StreamInterface|callable|\\\\Iterator $resource = '', array $options = []): StreamInterface`}</inlineCode></p>\n    <p>{`Create a new stream based on the input type.`}</p>\n    <p>{`Options is an associative array that can contain the following keys:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`metadata: Array of custom metadata.`}</li>\n      <li parentName=\"ul\">{`size: Size of the stream.`}</li>\n    </ul>\n    <p>{`This method accepts the following `}<inlineCode parentName=\"p\">{`$resource`}</inlineCode>{` types:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Psr\\\\Http\\\\Message\\\\StreamInterface`}</inlineCode>{`: Returns the value as-is.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`string`}</inlineCode>{`: Creates a stream object that uses the given string as the contents.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`resource`}</inlineCode>{`: Creates a stream object that wraps the given PHP stream resource.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Iterator`}</inlineCode>{`: If the provided value implements `}<inlineCode parentName=\"li\">{`Iterator`}</inlineCode>{`, then a read-only\nstream object will be created that wraps the given iterable. Each time the\nstream is read from, data from the iterator will fill a buffer and will be\ncontinuously called until the buffer is equal to the requested read size.\nSubsequent read calls will first read from the buffer and then call `}<inlineCode parentName=\"li\">{`next`}</inlineCode>{`\non the underlying iterator until it is exhausted.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`object`}</inlineCode>{` with `}<inlineCode parentName=\"li\">{`__toString()`}</inlineCode>{`: If the object has the `}<inlineCode parentName=\"li\">{`__toString()`}</inlineCode>{` method,\nthe object will be cast to a string and then a stream will be returned that\nuses the string value.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`NULL`}</inlineCode>{`: When `}<inlineCode parentName=\"li\">{`null`}</inlineCode>{` is passed, an empty stream object is returned.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`callable`}</inlineCode>{` When a callable is passed, a read-only stream object will be\ncreated that invokes the given callable. The callable is invoked with the\nnumber of suggested bytes to read. The callable can return any number of\nbytes, but MUST return `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` when there is no more data to return. The\nstream object that wraps the callable will invoke the callable until the\nnumber of requested bytes are available. Any additional bytes will be\nbuffered and used in subsequent reads.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$stream = GuzzleHttp\\\\Psr7\\\\Utils::streamFor('foo');\n$stream = GuzzleHttp\\\\Psr7\\\\Utils::streamFor(fopen('/path/to/file', 'r'));\n\n$generator = function ($bytes) {\n    for ($i = 0; $i < $bytes; $i++) {\n        yield ' ';\n    }\n}\n\n$stream = GuzzleHttp\\\\Psr7\\\\Utils::streamFor($generator(100));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7utilstryfopen\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Utils::tryFopen`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function tryFopen(string $filename, string $mode): resource`}</inlineCode></p>\n    <p>{`Safely opens a PHP stream resource using a filename.`}</p>\n    <p>{`When fopen fails, PHP normally raises a warning. This function adds an\nerror handler that checks for errors and throws an exception instead.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7utilstrygetcontents\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Utils::tryGetContents`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function tryGetContents(resource $stream): string`}</inlineCode></p>\n    <p>{`Safely gets the contents of a given stream.`}</p>\n    <p>{`When stream_get_contents fails, PHP normally raises a warning. This\nfunction adds an error handler that checks for errors and throws an\nexception instead.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7utilsurifor\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\Utils::uriFor`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function uriFor(string|UriInterface $uri): UriInterface`}</inlineCode></p>\n    <p>{`Returns a UriInterface for the given value.`}</p>\n    <p>{`This function accepts a string or UriInterface and returns a\nUriInterface for the given value. If the value is already a\nUriInterface, it is returned as-is.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7mimetypefromfilename\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\MimeType::fromFilename`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function fromFilename(string $filename): string|null`}</inlineCode></p>\n    <p>{`Determines the mimetype of a file by looking at its extension.`}</p>\n    <h2 {...{\n      \"id\": \"guzzlehttppsr7mimetypefromextension\"\n    }}><inlineCode parentName=\"h2\">{`GuzzleHttp\\\\Psr7\\\\MimeType::fromExtension`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`public static function fromExtension(string $extension): string|null`}</inlineCode></p>\n    <p>{`Maps a file extensions to a mimetype.`}</p>\n    <h2 {...{\n      \"id\": \"upgrading-from-function-api\"\n    }}>{`Upgrading from Function API`}</h2>\n    <p>{`The static API was first introduced in 1.7.0, in order to mitigate problems with functions conflicting between global and local copies of the package. The function API was removed in 2.0.0. A migration table has been provided here for your convenience:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Original Function`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Replacement Method`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`str`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Message::toString`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`uri_for`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Utils::uriFor`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`stream_for`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Utils::streamFor`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`parse_header`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Header::parse`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`normalize_header`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Header::normalize`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`modify_request`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Utils::modifyRequest`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`rewind_body`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Message::rewindBody`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`try_fopen`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Utils::tryFopen`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`copy_to_string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Utils::copyToString`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`copy_to_stream`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Utils::copyToStream`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hash`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Utils::hash`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`readline`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Utils::readLine`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`parse_request`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Message::parseRequest`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`parse_response`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Message::parseResponse`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`parse_query`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Query::parse`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`build_query`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Query::build`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`mimetype_from_filename`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`MimeType::fromFilename`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`mimetype_from_extension`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`MimeType::fromExtension`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`_parse_message`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Message::parseMessage`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`_parse_request_uri`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Message::parseRequestUri`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`get_message_body_summary`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Message::bodySummary`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`_caseless_remove`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Utils::caselessRemove`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h1 {...{\n      \"id\": \"additional-uri-methods\"\n    }}>{`Additional URI Methods`}</h1>\n    <p>{`Aside from the standard `}<inlineCode parentName=\"p\">{`Psr\\\\Http\\\\Message\\\\UriInterface`}</inlineCode>{` implementation in form of the `}<inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\Uri`}</inlineCode>{` class,\nthis library also provides additional functionality when working with URIs as static methods.`}</p>\n    <h2 {...{\n      \"id\": \"uri-types\"\n    }}>{`URI Types`}</h2>\n    <p>{`An instance of `}<inlineCode parentName=\"p\">{`Psr\\\\Http\\\\Message\\\\UriInterface`}</inlineCode>{` can either be an absolute URI or a relative reference.\nAn absolute URI has a scheme. A relative reference is used to express a URI relative to another URI,\nthe base URI. Relative references can be divided into several forms according to\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://datatracker.ietf.org/doc/html/rfc3986#section-4.2\"\n      }}>{`RFC 3986 Section 4.2`}</a>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`network-path references, e.g. `}<inlineCode parentName=\"li\">{`//example.com/path`}</inlineCode></li>\n      <li parentName=\"ul\">{`absolute-path references, e.g. `}<inlineCode parentName=\"li\">{`/path`}</inlineCode></li>\n      <li parentName=\"ul\">{`relative-path references, e.g. `}<inlineCode parentName=\"li\">{`subpath`}</inlineCode></li>\n    </ul>\n    <p>{`The following methods can be used to identify the type of the URI.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriisabsolute\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\Uri::isAbsolute`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function isAbsolute(UriInterface $uri): bool`}</inlineCode></p>\n    <p>{`Whether the URI is absolute, i.e. it has a scheme.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriisnetworkpathreference\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\Uri::isNetworkPathReference`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function isNetworkPathReference(UriInterface $uri): bool`}</inlineCode></p>\n    <p>{`Whether the URI is a network-path reference. A relative reference that begins with two slash characters is\ntermed an network-path reference.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriisabsolutepathreference\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\Uri::isAbsolutePathReference`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function isAbsolutePathReference(UriInterface $uri): bool`}</inlineCode></p>\n    <p>{`Whether the URI is a absolute-path reference. A relative reference that begins with a single slash character is\ntermed an absolute-path reference.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriisrelativepathreference\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\Uri::isRelativePathReference`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function isRelativePathReference(UriInterface $uri): bool`}</inlineCode></p>\n    <p>{`Whether the URI is a relative-path reference. A relative reference that does not begin with a slash character is\ntermed a relative-path reference.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriissamedocumentreference\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\Uri::isSameDocumentReference`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function isSameDocumentReference(UriInterface $uri, ?UriInterface $base = null): bool`}</inlineCode></p>\n    <p>{`Whether the URI is a same-document reference. A same-document reference refers to a URI that is, aside from its\nfragment component, identical to the base URI. When no base URI is given, only an empty URI reference\n(apart from its fragment) is considered a same-document reference.`}</p>\n    <h2 {...{\n      \"id\": \"uri-components\"\n    }}>{`URI Components`}</h2>\n    <p>{`Additional methods to work with URI components.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriisdefaultport\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\Uri::isDefaultPort`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function isDefaultPort(UriInterface $uri): bool`}</inlineCode></p>\n    <p>{`Whether the URI has the default port of the current scheme. `}<inlineCode parentName=\"p\">{`Psr\\\\Http\\\\Message\\\\UriInterface::getPort`}</inlineCode>{` may return null\nor the standard port. This method can be used independently of the implementation.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uricomposecomponents\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\Uri::composeComponents`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function composeComponents($scheme, $authority, $path, $query, $fragment): string`}</inlineCode></p>\n    <p>{`Composes a URI reference string from its various components according to\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://datatracker.ietf.org/doc/html/rfc3986#section-5.3\"\n      }}>{`RFC 3986 Section 5.3`}</a>{`. Usually this method does not need\nto be called manually but instead is used indirectly via `}<inlineCode parentName=\"p\">{`Psr\\\\Http\\\\Message\\\\UriInterface::__toString`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7urifromparts\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\Uri::fromParts`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function fromParts(array $parts): UriInterface`}</inlineCode></p>\n    <p>{`Creates a URI from a hash of `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.php.net/manual/en/function.parse-url.php\"\n      }}><inlineCode parentName=\"a\">{`parse_url`}</inlineCode></a>{` components.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriwithqueryvalue\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\Uri::withQueryValue`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function withQueryValue(UriInterface $uri, $key, $value): UriInterface`}</inlineCode></p>\n    <p>{`Creates a new URI with a specific query string value. Any existing query string values that exactly match the\nprovided key are removed and replaced with the given key value pair. A value of null will set the query string\nkey without a value, e.g. \"key\" instead of \"key=value\".`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriwithqueryvalues\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\Uri::withQueryValues`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function withQueryValues(UriInterface $uri, array $keyValueArray): UriInterface`}</inlineCode></p>\n    <p>{`Creates a new URI with multiple query string values. It has the same behavior as `}<inlineCode parentName=\"p\">{`withQueryValue()`}</inlineCode>{` but for an\nassociative array of key => value.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriwithoutqueryvalue\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\Uri::withoutQueryValue`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function withoutQueryValue(UriInterface $uri, $key): UriInterface`}</inlineCode></p>\n    <p>{`Creates a new URI with a specific query string value removed. Any existing query string values that exactly match the\nprovided key are removed.`}</p>\n    <h2 {...{\n      \"id\": \"cross-origin-detection\"\n    }}>{`Cross-Origin Detection`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\UriComparator`}</inlineCode>{` provides methods to determine if a modified URL should be considered cross-origin.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uricomparatoriscrossorigin\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\UriComparator::isCrossOrigin`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function isCrossOrigin(UriInterface $original, UriInterface $modified): bool`}</inlineCode></p>\n    <p>{`Determines if a modified URL should be considered cross-origin with respect to an original URL.`}</p>\n    <h2 {...{\n      \"id\": \"reference-resolution\"\n    }}>{`Reference Resolution`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\UriResolver`}</inlineCode>{` provides methods to resolve a URI reference in the context of a base URI according\nto `}<a parentName=\"p\" {...{\n        \"href\": \"https://datatracker.ietf.org/doc/html/rfc3986#section-5\"\n      }}>{`RFC 3986 Section 5`}</a>{`. This is for example also what web\nbrowsers do when resolving a link in a website based on the current request URI.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriresolverresolve\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\UriResolver::resolve`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function resolve(UriInterface $base, UriInterface $rel): UriInterface`}</inlineCode></p>\n    <p>{`Converts the relative URI into a new URI that is resolved against the base URI.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriresolverremovedotsegments\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\UriResolver::removeDotSegments`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function removeDotSegments(string $path): string`}</inlineCode></p>\n    <p>{`Removes dot segments from a path and returns the new path according to\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\"\n      }}>{`RFC 3986 Section 5.2.4`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7uriresolverrelativize\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\UriResolver::relativize`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function relativize(UriInterface $base, UriInterface $target): UriInterface`}</inlineCode></p>\n    <p>{`Returns the target URI as a relative reference from the base URI. This method is the counterpart to resolve():`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`(string) $target === (string) UriResolver::resolve($base, UriResolver::relativize($base, $target))\n`}</code></pre>\n    <p>{`One use-case is to use the current request URI as base URI and then generate relative links in your documents\nto reduce the document size or offer self-contained downloadable document archives.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$base = new Uri('http://example.com/a/b/');\necho UriResolver::relativize($base, new Uri('http://example.com/a/b/c'));  // prints 'c'.\necho UriResolver::relativize($base, new Uri('http://example.com/a/x/y'));  // prints '../x/y'.\necho UriResolver::relativize($base, new Uri('http://example.com/a/b/?q')); // prints '?q'.\necho UriResolver::relativize($base, new Uri('http://example.org/a/b/'));   // prints '//example.org/a/b/'.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"normalization-and-comparison\"\n    }}>{`Normalization and Comparison`}</h2>\n    <p><inlineCode parentName=\"p\">{`GuzzleHttp\\\\Psr7\\\\UriNormalizer`}</inlineCode>{` provides methods to normalize and compare URIs according to\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://datatracker.ietf.org/doc/html/rfc3986#section-6\"\n      }}>{`RFC 3986 Section 6`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7urinormalizernormalize\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\UriNormalizer::normalize`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function normalize(UriInterface $uri, $flags = self::PRESERVING_NORMALIZATIONS): UriInterface`}</inlineCode></p>\n    <p>{`Returns a normalized URI. The scheme and host component are already normalized to lowercase per PSR-7 UriInterface.\nThis methods adds additional normalizations that can be configured with the `}<inlineCode parentName=\"p\">{`$flags`}</inlineCode>{` parameter which is a bitmask\nof normalizations to apply. The following normalizations are available:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`UriNormalizer::PRESERVING_NORMALIZATIONS`}</inlineCode></p>\n        <p parentName=\"li\">{`  Default normalizations which only include the ones that preserve semantics.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`UriNormalizer::CAPITALIZE_PERCENT_ENCODING`}</inlineCode></p>\n        <p parentName=\"li\">{`  All letters within a percent-encoding triplet (e.g., \"%3A\") are case-insensitive, and should be capitalized.`}</p>\n        <p parentName=\"li\">{`  Example: `}<inlineCode parentName=\"p\">{`http://example.org/a%c2%b1b`}</inlineCode>{` → `}<inlineCode parentName=\"p\">{`http://example.org/a%C2%B1b`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`UriNormalizer::DECODE_UNRESERVED_CHARACTERS`}</inlineCode></p>\n        <p parentName=\"li\">{`  Decodes percent-encoded octets of unreserved characters. For consistency, percent-encoded octets in the ranges of\nALPHA (%41–%5A and %61–%7A), DIGIT (%30–%39), hyphen (%2D), period (%2E), underscore (%5F), or tilde (%7E) should\nnot be created by URI producers and, when found in a URI, should be decoded to their corresponding unreserved\ncharacters by URI normalizers.`}</p>\n        <p parentName=\"li\">{`  Example: `}<inlineCode parentName=\"p\">{`http://example.org/%7Eusern%61me/`}</inlineCode>{` → `}<inlineCode parentName=\"p\">{`http://example.org/~username/`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`UriNormalizer::CONVERT_EMPTY_PATH`}</inlineCode></p>\n        <p parentName=\"li\">{`  Converts the empty path to \"/\" for http and https URIs.`}</p>\n        <p parentName=\"li\">{`  Example: `}<inlineCode parentName=\"p\">{`http://example.org`}</inlineCode>{` → `}<inlineCode parentName=\"p\">{`http://example.org/`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`UriNormalizer::REMOVE_DEFAULT_HOST`}</inlineCode></p>\n        <p parentName=\"li\">{`  Removes the default host of the given URI scheme from the URI. Only the \"file\" scheme defines the default host\n\"localhost\". All of `}<inlineCode parentName=\"p\">{`file:/myfile`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`file:///myfile`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`file://localhost/myfile`}</inlineCode>{` are equivalent according to\nRFC 3986.`}</p>\n        <p parentName=\"li\">{`  Example: `}<inlineCode parentName=\"p\">{`file://localhost/myfile`}</inlineCode>{` → `}<inlineCode parentName=\"p\">{`file:///myfile`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`UriNormalizer::REMOVE_DEFAULT_PORT`}</inlineCode></p>\n        <p parentName=\"li\">{`  Removes the default port of the given URI scheme from the URI.`}</p>\n        <p parentName=\"li\">{`  Example: `}<inlineCode parentName=\"p\">{`http://example.org:80/`}</inlineCode>{` → `}<inlineCode parentName=\"p\">{`http://example.org/`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`UriNormalizer::REMOVE_DOT_SEGMENTS`}</inlineCode></p>\n        <p parentName=\"li\">{`  Removes unnecessary dot-segments. Dot-segments in relative-path references are not removed as it would\nchange the semantics of the URI reference.`}</p>\n        <p parentName=\"li\">{`  Example: `}<inlineCode parentName=\"p\">{`http://example.org/../a/b/../c/./d.html`}</inlineCode>{` → `}<inlineCode parentName=\"p\">{`http://example.org/a/c/d.html`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`UriNormalizer::REMOVE_DUPLICATE_SLASHES`}</inlineCode></p>\n        <p parentName=\"li\">{`  Paths which include two or more adjacent slashes are converted to one. Webservers usually ignore duplicate slashes\nand treat those URIs equivalent. But in theory those URIs do not need to be equivalent. So this normalization\nmay change the semantics. Encoded slashes (%2F) are not removed.`}</p>\n        <p parentName=\"li\">{`  Example: `}<inlineCode parentName=\"p\">{`http://example.org//foo///bar.html`}</inlineCode>{` → `}<inlineCode parentName=\"p\">{`http://example.org/foo/bar.html`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`UriNormalizer::SORT_QUERY_PARAMETERS`}</inlineCode></p>\n        <p parentName=\"li\">{`  Sort query parameters with their values in alphabetical order. However, the order of parameters in a URI may be\nsignificant (this is not defined by the standard). So this normalization is not safe and may change the semantics\nof the URI.`}</p>\n        <p parentName=\"li\">{`  Example: `}<inlineCode parentName=\"p\">{`?lang=en&article=fred`}</inlineCode>{` → `}<inlineCode parentName=\"p\">{`?article=fred&lang=en`}</inlineCode></p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"guzzlehttppsr7urinormalizerisequivalent\"\n    }}><inlineCode parentName=\"h3\">{`GuzzleHttp\\\\Psr7\\\\UriNormalizer::isEquivalent`}</inlineCode></h3>\n    <p><inlineCode parentName=\"p\">{`public static function isEquivalent(UriInterface $uri1, UriInterface $uri2, $normalizations = self::PRESERVING_NORMALIZATIONS): bool`}</inlineCode></p>\n    <p>{`Whether two URIs can be considered equivalent. Both URIs are normalized automatically before comparison with the given\n`}<inlineCode parentName=\"p\">{`$normalizations`}</inlineCode>{` bitmask. The method also accepts relative URI references and returns true when they are equivalent.\nThis of course assumes they will be resolved against the same base URI. If this is not the case, determination of\nequivalence or difference of relative references does not mean anything.`}</p>\n    <h2 {...{\n      \"id\": \"security\"\n    }}>{`Security`}</h2>\n    <p>{`If you discover a security vulnerability within this package, please send an email to `}<a parentName=\"p\" {...{\n        \"href\": \"mailto:security@tidelift.com.\"\n      }}>{`security@tidelift.com.`}</a>{` All security vulnerabilities will be promptly addressed. Please do not disclose security-related issues publicly until a fix has been announced. Please see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/guzzle/psr7/security/policy\"\n      }}>{`Security Policy`}</a>{` for more information.`}</p>\n    <h2 {...{\n      \"id\": \"license\"\n    }}>{`License`}</h2>\n    <p>{`Guzzle is made available under the MIT License (MIT). Please see `}<a parentName=\"p\" {...{\n        \"href\": \"LICENSE\"\n      }}>{`License File`}</a>{` for more information.`}</p>\n    <h2 {...{\n      \"id\": \"for-enterprise\"\n    }}>{`For Enterprise`}</h2>\n    <p>{`Available as part of the Tidelift Subscription`}</p>\n    <p>{`The maintainers of Guzzle and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. `}<a parentName=\"p\" {...{\n        \"href\": \"https://tidelift.com/subscription/pkg/packagist-guzzlehttp-psr7?utm_source=packagist-guzzlehttp-psr7&utm_medium=referral&utm_campaign=enterprise&utm_term=repo\"\n      }}>{`Learn more.`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}