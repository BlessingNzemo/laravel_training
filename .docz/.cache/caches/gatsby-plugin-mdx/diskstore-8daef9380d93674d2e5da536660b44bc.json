{"expireTime":9007200985218041000,"key":"gatsby-plugin-mdx-entire-payload-c72bf79a89ff4f887486be4db2334568-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":109,"offset":110},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":112},"end":{"line":5,"column":29,"offset":140},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"This is the PHP port of Hamcrest Matchers","position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":7,"column":42,"offset":183},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":8,"column":42,"offset":225},"indent":[1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://travis-ci.org/hamcrest/hamcrest-php","children":[{"type":"image","title":null,"url":"https://travis-ci.org/hamcrest/hamcrest-php.png?branch=master","alt":"Build Status","position":{"start":{"line":10,"column":2,"offset":228},"end":{"line":10,"column":80,"offset":306},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":227},"end":{"line":10,"column":126,"offset":352},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":227},"end":{"line":10,"column":126,"offset":352},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hamcrest is a matching library originally written for Java, but\nsubsequently ported to many other languages.  hamcrest-php is the\nofficial PHP port of Hamcrest and essentially follows a literal\ntranslation of the original Java API for Hamcrest, with a few\nExceptions, mostly down to PHP language barriers:","position":{"start":{"line":12,"column":1,"offset":354},"end":{"line":16,"column":50,"offset":659},"indent":[1,1,1,1]}}],"position":{"start":{"line":12,"column":1,"offset":354},"end":{"line":16,"column":50,"offset":659},"indent":[1,1,1,1]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"instanceOf($theClass)","position":{"start":{"line":18,"column":6,"offset":666},"end":{"line":18,"column":29,"offset":689},"indent":[]}},{"type":"text","value":" is actually ","position":{"start":{"line":18,"column":29,"offset":689},"end":{"line":18,"column":42,"offset":702},"indent":[]}},{"type":"inlineCode","value":"anInstanceOf($theClass)","position":{"start":{"line":18,"column":42,"offset":702},"end":{"line":18,"column":67,"offset":727},"indent":[]}}],"position":{"start":{"line":18,"column":6,"offset":666},"end":{"line":18,"column":67,"offset":727},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":661},"end":{"line":19,"column":1,"offset":728},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"both(containsString('a'))->and(containsString('b'))","position":{"start":{"line":20,"column":6,"offset":734},"end":{"line":20,"column":59,"offset":787},"indent":[]}},{"type":"text","value":"\nis actually ","position":{"start":{"line":20,"column":59,"offset":787},"end":{"line":21,"column":18,"offset":805},"indent":[6]}},{"type":"inlineCode","value":"both(containsString('a'))->andAlso(containsString('b'))","position":{"start":{"line":21,"column":18,"offset":805},"end":{"line":21,"column":75,"offset":862},"indent":[]}}],"position":{"start":{"line":20,"column":6,"offset":734},"end":{"line":21,"column":75,"offset":862},"indent":[6]}}],"position":{"start":{"line":20,"column":1,"offset":729},"end":{"line":22,"column":1,"offset":863},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"either(containsString('a'))->or(containsString('b'))","position":{"start":{"line":23,"column":6,"offset":869},"end":{"line":23,"column":60,"offset":923},"indent":[]}},{"type":"text","value":"\nis actually ","position":{"start":{"line":23,"column":60,"offset":923},"end":{"line":24,"column":18,"offset":941},"indent":[6]}},{"type":"inlineCode","value":"either(containsString('a'))->orElse(containsString('b'))","position":{"start":{"line":24,"column":18,"offset":941},"end":{"line":24,"column":76,"offset":999},"indent":[]}}],"position":{"start":{"line":23,"column":6,"offset":869},"end":{"line":24,"column":76,"offset":999},"indent":[6]}}],"position":{"start":{"line":23,"column":1,"offset":864},"end":{"line":25,"column":1,"offset":1000},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Unless it would be non-semantic for a matcher to do so, hamcrest-php\nallows dynamic typing for it's input, in \"the PHP way\". Exception are\nwhere semantics surrounding the type itself would suggest otherwise,\nsuch as stringContains() and greaterThan().","position":{"start":{"line":26,"column":6,"offset":1006},"end":{"line":29,"column":49,"offset":1272},"indent":[6,6,6]}}],"position":{"start":{"line":26,"column":6,"offset":1006},"end":{"line":29,"column":49,"offset":1272},"indent":[6,6,6]}}],"position":{"start":{"line":26,"column":1,"offset":1001},"end":{"line":30,"column":1,"offset":1273},"indent":[1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Several official matchers have not been ported because they don't\nmake sense or don't apply in PHP:","position":{"start":{"line":31,"column":6,"offset":1279},"end":{"line":32,"column":39,"offset":1383},"indent":[6]}}],"position":{"start":{"line":31,"column":6,"offset":1279},"end":{"line":32,"column":39,"offset":1383},"indent":[6]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"typeCompatibleWith($theClass)","position":{"start":{"line":34,"column":10,"offset":1394},"end":{"line":34,"column":41,"offset":1425},"indent":[]}}],"position":{"start":{"line":34,"column":10,"offset":1394},"end":{"line":34,"column":41,"offset":1425},"indent":[]}}],"position":{"start":{"line":34,"column":6,"offset":1390},"end":{"line":34,"column":41,"offset":1425},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"eventFrom($source)","position":{"start":{"line":35,"column":10,"offset":1435},"end":{"line":35,"column":30,"offset":1455},"indent":[]}}],"position":{"start":{"line":35,"column":10,"offset":1435},"end":{"line":35,"column":30,"offset":1455},"indent":[]}}],"position":{"start":{"line":35,"column":6,"offset":1431},"end":{"line":35,"column":30,"offset":1455},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hasProperty($name)","position":{"start":{"line":36,"column":10,"offset":1465},"end":{"line":36,"column":30,"offset":1485},"indent":[]}},{"type":"text","value":" **","position":{"start":{"line":36,"column":30,"offset":1485},"end":{"line":36,"column":33,"offset":1488},"indent":[]}}],"position":{"start":{"line":36,"column":10,"offset":1465},"end":{"line":36,"column":33,"offset":1488},"indent":[]}}],"position":{"start":{"line":36,"column":6,"offset":1461},"end":{"line":36,"column":33,"offset":1488},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"samePropertyValuesAs($obj)","position":{"start":{"line":37,"column":10,"offset":1498},"end":{"line":37,"column":38,"offset":1526},"indent":[]}},{"type":"text","value":" **","position":{"start":{"line":37,"column":38,"offset":1526},"end":{"line":37,"column":41,"offset":1529},"indent":[]}}],"position":{"start":{"line":37,"column":10,"offset":1498},"end":{"line":37,"column":41,"offset":1529},"indent":[]}}],"position":{"start":{"line":37,"column":6,"offset":1494},"end":{"line":37,"column":41,"offset":1529},"indent":[]}}],"position":{"start":{"line":34,"column":6,"offset":1390},"end":{"line":37,"column":41,"offset":1529},"indent":[6,6,6]}}],"position":{"start":{"line":31,"column":1,"offset":1274},"end":{"line":38,"column":1,"offset":1530},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When most of the collections matchers are finally ported, PHP-specific\naliases will probably be created due to a difference in naming\nconventions between Java's Arrays, Collections, Sets and Maps compared\nwith PHP's Arrays.","position":{"start":{"line":39,"column":6,"offset":1536},"end":{"line":42,"column":24,"offset":1774},"indent":[6,6,6]}}],"position":{"start":{"line":39,"column":6,"offset":1536},"end":{"line":42,"column":24,"offset":1774},"indent":[6,6,6]}}],"position":{"start":{"line":39,"column":1,"offset":1531},"end":{"line":42,"column":24,"offset":1774},"indent":[1,1,1]}}],"position":{"start":{"line":18,"column":1,"offset":661},"end":{"line":42,"column":24,"offset":1774},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":44,"column":1,"offset":1776},"end":{"line":44,"column":4,"offset":1779},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"** ","position":{"start":{"line":45,"column":1,"offset":1780},"end":{"line":45,"column":4,"offset":1783},"indent":[]}},{"type":"linkReference","identifier":"unless we consider popo's (plain old php objects) akin to javabeans","label":"Unless we consider POPO's (Plain Old PHP Objects) akin to JavaBeans","referenceType":"shortcut","children":[{"type":"text","value":"Unless we consider POPO's (Plain Old PHP Objects) akin to JavaBeans","position":{"start":{"line":45,"column":5,"offset":1784},"end":{"line":45,"column":72,"offset":1851},"indent":[]}}],"position":{"start":{"line":45,"column":4,"offset":1783},"end":{"line":45,"column":73,"offset":1852},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1780},"end":{"line":45,"column":73,"offset":1852},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" - The POPO thing is a joke.  Java devs coin the term POJO's (Plain Old\n   Java Objects).","position":{"start":{"line":46,"column":1,"offset":1853},"end":{"line":47,"column":22,"offset":1950},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Usage","position":{"start":{"line":50,"column":1,"offset":1953},"end":{"line":50,"column":6,"offset":1958},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1953},"end":{"line":51,"column":6,"offset":1964},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Hamcrest matchers are easy to use as:","position":{"start":{"line":53,"column":1,"offset":1966},"end":{"line":53,"column":38,"offset":2003},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1966},"end":{"line":53,"column":38,"offset":2003},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"Hamcrest_MatcherAssert::assertThat('a', Hamcrest_Matchers::equalToIgnoringCase('A'));","position":{"start":{"line":55,"column":1,"offset":2005},"end":{"line":57,"column":4,"offset":2101},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively, you can use the global proxy-functions:","position":{"start":{"line":59,"column":1,"offset":2103},"end":{"line":59,"column":55,"offset":2157},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":2103},"end":{"line":59,"column":55,"offset":2157},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$result = true;\n// with an identifier\nassertThat(\"result should be true\", $result, equalTo(true));\n\n// without an identifier\nassertThat($result, equalTo(true));\n\n// evaluate a boolean expression\nassertThat($result === true);\n\n// with syntactic sugar is()\nassertThat(true, is(true));","position":{"start":{"line":61,"column":1,"offset":2159},"end":{"line":74,"column":4,"offset":2452},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":":warning: ","position":{"start":{"line":76,"column":1,"offset":2454},"end":{"line":76,"column":11,"offset":2464},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"NOTE:","position":{"start":{"line":76,"column":13,"offset":2466},"end":{"line":76,"column":18,"offset":2471},"indent":[]}}],"position":{"start":{"line":76,"column":11,"offset":2464},"end":{"line":76,"column":20,"offset":2473},"indent":[]}},{"type":"text","value":" the global proxy-functions aren't autoloaded by default, so you will need to load them first:","position":{"start":{"line":76,"column":20,"offset":2473},"end":{"line":76,"column":114,"offset":2567},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":2454},"end":{"line":76,"column":114,"offset":2567},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"\\Hamcrest\\Util::registerGlobalFunctions();","position":{"start":{"line":78,"column":1,"offset":2569},"end":{"line":80,"column":4,"offset":2622},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For brevity, all of the examples below use the proxy-functions.","position":{"start":{"line":82,"column":1,"offset":2624},"end":{"line":82,"column":64,"offset":2687},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2624},"end":{"line":82,"column":64,"offset":2687},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Documentation","position":{"start":{"line":85,"column":1,"offset":2690},"end":{"line":85,"column":14,"offset":2703},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2690},"end":{"line":86,"column":14,"offset":2717},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"A tutorial can be found on the ","position":{"start":{"line":87,"column":1,"offset":2718},"end":{"line":87,"column":32,"offset":2749},"indent":[]}},{"type":"link","title":null,"url":"https://code.google.com/archive/p/hamcrest/wikis/TutorialPHP.wiki","children":[{"type":"text","value":"Hamcrest site","position":{"start":{"line":87,"column":33,"offset":2750},"end":{"line":87,"column":46,"offset":2763},"indent":[]}}],"position":{"start":{"line":87,"column":32,"offset":2749},"end":{"line":87,"column":114,"offset":2831},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":87,"column":114,"offset":2831},"end":{"line":87,"column":115,"offset":2832},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2718},"end":{"line":87,"column":115,"offset":2832},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Available Matchers","position":{"start":{"line":90,"column":1,"offset":2835},"end":{"line":90,"column":19,"offset":2853},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":2835},"end":{"line":91,"column":19,"offset":2872},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"../master/README.md#array","children":[{"type":"text","value":"Array","position":{"start":{"line":92,"column":4,"offset":2876},"end":{"line":92,"column":9,"offset":2881},"indent":[]}}],"position":{"start":{"line":92,"column":3,"offset":2875},"end":{"line":92,"column":37,"offset":2909},"indent":[]}}],"position":{"start":{"line":92,"column":3,"offset":2875},"end":{"line":92,"column":37,"offset":2909},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2873},"end":{"line":92,"column":37,"offset":2909},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"../master/README.md#collection","children":[{"type":"text","value":"Collection","position":{"start":{"line":93,"column":4,"offset":2913},"end":{"line":93,"column":14,"offset":2923},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":2912},"end":{"line":93,"column":47,"offset":2956},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":2912},"end":{"line":93,"column":47,"offset":2956},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2910},"end":{"line":93,"column":47,"offset":2956},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"../master/README.md#object","children":[{"type":"text","value":"Object","position":{"start":{"line":94,"column":4,"offset":2960},"end":{"line":94,"column":10,"offset":2966},"indent":[]}}],"position":{"start":{"line":94,"column":3,"offset":2959},"end":{"line":94,"column":39,"offset":2995},"indent":[]}}],"position":{"start":{"line":94,"column":3,"offset":2959},"end":{"line":94,"column":39,"offset":2995},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":2957},"end":{"line":94,"column":39,"offset":2995},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"../master/README.md#numbers","children":[{"type":"text","value":"Numbers","position":{"start":{"line":95,"column":4,"offset":2999},"end":{"line":95,"column":11,"offset":3006},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":2998},"end":{"line":95,"column":41,"offset":3036},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":2998},"end":{"line":95,"column":41,"offset":3036},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2996},"end":{"line":95,"column":41,"offset":3036},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"../master/README.md#type-checking","children":[{"type":"text","value":"Type checking","position":{"start":{"line":96,"column":4,"offset":3040},"end":{"line":96,"column":17,"offset":3053},"indent":[]}}],"position":{"start":{"line":96,"column":3,"offset":3039},"end":{"line":96,"column":53,"offset":3089},"indent":[]}}],"position":{"start":{"line":96,"column":3,"offset":3039},"end":{"line":96,"column":53,"offset":3089},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":3037},"end":{"line":96,"column":53,"offset":3089},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"../master/README.md#xml","children":[{"type":"text","value":"XML","position":{"start":{"line":97,"column":4,"offset":3093},"end":{"line":97,"column":7,"offset":3096},"indent":[]}}],"position":{"start":{"line":97,"column":3,"offset":3092},"end":{"line":97,"column":33,"offset":3122},"indent":[]}}],"position":{"start":{"line":97,"column":3,"offset":3092},"end":{"line":97,"column":33,"offset":3122},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":3090},"end":{"line":97,"column":33,"offset":3122},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2873},"end":{"line":97,"column":33,"offset":3122},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Array","position":{"start":{"line":100,"column":5,"offset":3129},"end":{"line":100,"column":10,"offset":3134},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":3125},"end":{"line":100,"column":10,"offset":3134},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"anArray","position":{"start":{"line":102,"column":3,"offset":3138},"end":{"line":102,"column":12,"offset":3147},"indent":[]}},{"type":"text","value":" - evaluates an array","position":{"start":{"line":102,"column":12,"offset":3147},"end":{"line":102,"column":33,"offset":3168},"indent":[]}}],"position":{"start":{"line":102,"column":3,"offset":3138},"end":{"line":102,"column":33,"offset":3168},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":3136},"end":{"line":102,"column":33,"offset":3168},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":3136},"end":{"line":102,"column":33,"offset":3168},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([], anArray());","position":{"start":{"line":103,"column":1,"offset":3169},"end":{"line":105,"column":4,"offset":3206},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hasItemInArray","position":{"start":{"line":107,"column":3,"offset":3210},"end":{"line":107,"column":19,"offset":3226},"indent":[]}},{"type":"text","value":" - check if item exists in array","position":{"start":{"line":107,"column":19,"offset":3226},"end":{"line":107,"column":51,"offset":3258},"indent":[]}}],"position":{"start":{"line":107,"column":3,"offset":3210},"end":{"line":107,"column":51,"offset":3258},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3208},"end":{"line":107,"column":51,"offset":3258},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3208},"end":{"line":107,"column":51,"offset":3258},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$list = range(2, 7, 2);\n$item = 4;\nassertThat($list, hasItemInArray($item));","position":{"start":{"line":108,"column":1,"offset":3259},"end":{"line":112,"column":4,"offset":3346},"indent":[1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hasValue","position":{"start":{"line":114,"column":3,"offset":3350},"end":{"line":114,"column":13,"offset":3360},"indent":[]}},{"type":"text","value":" - alias of hasItemInArray","position":{"start":{"line":114,"column":13,"offset":3360},"end":{"line":114,"column":39,"offset":3386},"indent":[]}}],"position":{"start":{"line":114,"column":3,"offset":3350},"end":{"line":114,"column":39,"offset":3386},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":3348},"end":{"line":115,"column":1,"offset":3387},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"arrayContainingInAnyOrder","position":{"start":{"line":116,"column":3,"offset":3390},"end":{"line":116,"column":30,"offset":3417},"indent":[]}},{"type":"text","value":" - check if array contains elements in any order","position":{"start":{"line":116,"column":30,"offset":3417},"end":{"line":116,"column":78,"offset":3465},"indent":[]}}],"position":{"start":{"line":116,"column":3,"offset":3390},"end":{"line":116,"column":78,"offset":3465},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":3388},"end":{"line":116,"column":78,"offset":3465},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":3348},"end":{"line":116,"column":78,"offset":3465},"indent":[1,1]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([2, 4, 6], arrayContainingInAnyOrder([6, 4, 2]));\nassertThat([2, 4, 6], arrayContainingInAnyOrder([4, 2, 6]));","position":{"start":{"line":117,"column":1,"offset":3466},"end":{"line":120,"column":4,"offset":3598},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"containsInAnyOrder","position":{"start":{"line":122,"column":3,"offset":3602},"end":{"line":122,"column":23,"offset":3622},"indent":[]}},{"type":"text","value":" - alias of arrayContainingInAnyOrder","position":{"start":{"line":122,"column":23,"offset":3622},"end":{"line":122,"column":60,"offset":3659},"indent":[]}}],"position":{"start":{"line":122,"column":3,"offset":3602},"end":{"line":122,"column":60,"offset":3659},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":3600},"end":{"line":123,"column":1,"offset":3660},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"arrayContaining","position":{"start":{"line":124,"column":3,"offset":3663},"end":{"line":124,"column":20,"offset":3680},"indent":[]}},{"type":"text","value":" - An array with elements that match the given matchers in the same order.","position":{"start":{"line":124,"column":20,"offset":3680},"end":{"line":124,"column":94,"offset":3754},"indent":[]}}],"position":{"start":{"line":124,"column":3,"offset":3663},"end":{"line":124,"column":94,"offset":3754},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":3661},"end":{"line":124,"column":94,"offset":3754},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":3600},"end":{"line":124,"column":94,"offset":3754},"indent":[1,1]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([2, 4, 6], arrayContaining([2, 4, 6]));\nassertthat([2, 4, 6], not(arrayContaining([6, 4, 2])));","position":{"start":{"line":125,"column":1,"offset":3755},"end":{"line":128,"column":4,"offset":3872},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"contains","position":{"start":{"line":130,"column":3,"offset":3876},"end":{"line":130,"column":13,"offset":3886},"indent":[]}},{"type":"text","value":" - check array in same order","position":{"start":{"line":130,"column":13,"offset":3886},"end":{"line":130,"column":41,"offset":3914},"indent":[]}}],"position":{"start":{"line":130,"column":3,"offset":3876},"end":{"line":130,"column":41,"offset":3914},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":3874},"end":{"line":130,"column":41,"offset":3914},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":3874},"end":{"line":130,"column":41,"offset":3914},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([2, 4, 6], contains([2, 4, 6]));","position":{"start":{"line":131,"column":1,"offset":3915},"end":{"line":133,"column":4,"offset":3969},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hasKeyInArray","position":{"start":{"line":135,"column":3,"offset":3973},"end":{"line":135,"column":18,"offset":3988},"indent":[]}},{"type":"text","value":" - check if array has given key","position":{"start":{"line":135,"column":18,"offset":3988},"end":{"line":135,"column":49,"offset":4019},"indent":[]}}],"position":{"start":{"line":135,"column":3,"offset":3973},"end":{"line":135,"column":49,"offset":4019},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":3971},"end":{"line":135,"column":49,"offset":4019},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":3971},"end":{"line":135,"column":49,"offset":4019},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(['name'=> 'foobar'], hasKeyInArray('name'));","position":{"start":{"line":136,"column":1,"offset":4020},"end":{"line":138,"column":4,"offset":4086},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hasKey","position":{"start":{"line":140,"column":3,"offset":4090},"end":{"line":140,"column":11,"offset":4098},"indent":[]}},{"type":"text","value":" - alias of hasKeyInArray","position":{"start":{"line":140,"column":11,"offset":4098},"end":{"line":140,"column":36,"offset":4123},"indent":[]}}],"position":{"start":{"line":140,"column":3,"offset":4090},"end":{"line":140,"column":36,"offset":4123},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":4088},"end":{"line":141,"column":1,"offset":4124},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hasKeyValuePair","position":{"start":{"line":142,"column":3,"offset":4127},"end":{"line":142,"column":20,"offset":4144},"indent":[]}},{"type":"text","value":" - check if arary has given key, value pair","position":{"start":{"line":142,"column":20,"offset":4144},"end":{"line":142,"column":63,"offset":4187},"indent":[]}}],"position":{"start":{"line":142,"column":3,"offset":4127},"end":{"line":142,"column":63,"offset":4187},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":4125},"end":{"line":142,"column":63,"offset":4187},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":4088},"end":{"line":142,"column":63,"offset":4187},"indent":[1,1]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(['name'=> 'foobar'], hasKeyValuePair('name', 'foobar'));","position":{"start":{"line":143,"column":1,"offset":4188},"end":{"line":145,"column":4,"offset":4266},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hasEntry","position":{"start":{"line":146,"column":3,"offset":4269},"end":{"line":146,"column":13,"offset":4279},"indent":[]}},{"type":"text","value":" - same as hasKeyValuePair","position":{"start":{"line":146,"column":13,"offset":4279},"end":{"line":146,"column":39,"offset":4305},"indent":[]}}],"position":{"start":{"line":146,"column":3,"offset":4269},"end":{"line":146,"column":39,"offset":4305},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":4267},"end":{"line":147,"column":1,"offset":4306},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"arrayWithSize","position":{"start":{"line":148,"column":3,"offset":4309},"end":{"line":148,"column":18,"offset":4324},"indent":[]}},{"type":"text","value":" - check array has given size","position":{"start":{"line":148,"column":18,"offset":4324},"end":{"line":148,"column":47,"offset":4353},"indent":[]}}],"position":{"start":{"line":148,"column":3,"offset":4309},"end":{"line":148,"column":47,"offset":4353},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":4307},"end":{"line":148,"column":47,"offset":4353},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":4267},"end":{"line":148,"column":47,"offset":4353},"indent":[1,1]}},{"type":"code","lang":"php","meta":null,"value":"assertthat([2, 4, 6], arrayWithSize(3));","position":{"start":{"line":149,"column":1,"offset":4354},"end":{"line":151,"column":4,"offset":4405},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"emptyArray","position":{"start":{"line":152,"column":3,"offset":4408},"end":{"line":152,"column":15,"offset":4420},"indent":[]}},{"type":"text","value":" - check if array is emtpy","position":{"start":{"line":152,"column":15,"offset":4420},"end":{"line":152,"column":41,"offset":4446},"indent":[]}}],"position":{"start":{"line":152,"column":3,"offset":4408},"end":{"line":152,"column":41,"offset":4446},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":4406},"end":{"line":152,"column":41,"offset":4446},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":4406},"end":{"line":152,"column":41,"offset":4446},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([], emptyArray());","position":{"start":{"line":153,"column":1,"offset":4447},"end":{"line":155,"column":4,"offset":4487},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"nonEmptyArray","position":{"start":{"line":157,"column":3,"offset":4491},"end":{"line":157,"column":18,"offset":4506},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":4491},"end":{"line":157,"column":18,"offset":4506},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":4489},"end":{"line":157,"column":18,"offset":4506},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":4489},"end":{"line":157,"column":18,"offset":4506},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([1], nonEmptyArray());","position":{"start":{"line":158,"column":1,"offset":4507},"end":{"line":160,"column":4,"offset":4551},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Collection","position":{"start":{"line":162,"column":5,"offset":4557},"end":{"line":162,"column":15,"offset":4567},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":4553},"end":{"line":162,"column":15,"offset":4567},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"emptyTraversable","position":{"start":{"line":164,"column":3,"offset":4571},"end":{"line":164,"column":21,"offset":4589},"indent":[]}},{"type":"text","value":" - check if traversable is empty","position":{"start":{"line":164,"column":21,"offset":4589},"end":{"line":164,"column":53,"offset":4621},"indent":[]}}],"position":{"start":{"line":164,"column":3,"offset":4571},"end":{"line":164,"column":53,"offset":4621},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":4569},"end":{"line":164,"column":53,"offset":4621},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":4569},"end":{"line":164,"column":53,"offset":4621},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$empty_it = new EmptyIterator;\nassertThat($empty_it, emptyTraversable());","position":{"start":{"line":165,"column":1,"offset":4622},"end":{"line":168,"column":4,"offset":4706},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"nonEmptyTraversable","position":{"start":{"line":170,"column":3,"offset":4710},"end":{"line":170,"column":24,"offset":4731},"indent":[]}},{"type":"text","value":" - check if traversable isn't empty","position":{"start":{"line":170,"column":24,"offset":4731},"end":{"line":170,"column":59,"offset":4766},"indent":[]}}],"position":{"start":{"line":170,"column":3,"offset":4710},"end":{"line":170,"column":59,"offset":4766},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":4708},"end":{"line":170,"column":59,"offset":4766},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":4708},"end":{"line":170,"column":59,"offset":4766},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$non_empty_it = new ArrayIterator(range(1, 10));\nassertThat($non_empty_it, nonEmptyTraversable());\na","position":{"start":{"line":171,"column":1,"offset":4767},"end":{"line":175,"column":4,"offset":4878},"indent":[1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"traversableWithSize","position":{"start":{"line":177,"column":3,"offset":4882},"end":{"line":177,"column":24,"offset":4903},"indent":[]}}],"position":{"start":{"line":177,"column":3,"offset":4882},"end":{"line":177,"column":24,"offset":4903},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":4880},"end":{"line":177,"column":24,"offset":4903},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":4880},"end":{"line":177,"column":24,"offset":4903},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$non_empty_it = new ArrayIterator(range(1, 10));\nassertThat($non_empty_it, traversableWithSize(count(range(1, 10))));\n`","position":{"start":{"line":178,"column":1,"offset":4904},"end":{"line":182,"column":4,"offset":5034},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Core","position":{"start":{"line":184,"column":5,"offset":5040},"end":{"line":184,"column":9,"offset":5044},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":5036},"end":{"line":184,"column":9,"offset":5044},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"allOf","position":{"start":{"line":186,"column":3,"offset":5048},"end":{"line":186,"column":10,"offset":5055},"indent":[]}},{"type":"text","value":" - Evaluates to true only if ALL of the passed in matchers evaluate to true.","position":{"start":{"line":186,"column":10,"offset":5055},"end":{"line":186,"column":86,"offset":5131},"indent":[]}}],"position":{"start":{"line":186,"column":3,"offset":5048},"end":{"line":186,"column":86,"offset":5131},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":5046},"end":{"line":186,"column":86,"offset":5131},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":5046},"end":{"line":186,"column":86,"offset":5131},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([2,4,6], allOf(hasValue(2), arrayWithSize(3)));","position":{"start":{"line":187,"column":1,"offset":5132},"end":{"line":189,"column":4,"offset":5201},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"anyOf","position":{"start":{"line":191,"column":3,"offset":5205},"end":{"line":191,"column":10,"offset":5212},"indent":[]}},{"type":"text","value":" - Evaluates to true if ANY of the passed in matchers evaluate to true.","position":{"start":{"line":191,"column":10,"offset":5212},"end":{"line":191,"column":81,"offset":5283},"indent":[]}}],"position":{"start":{"line":191,"column":3,"offset":5205},"end":{"line":191,"column":81,"offset":5283},"indent":[]}}],"position":{"start":{"line":191,"column":1,"offset":5203},"end":{"line":191,"column":81,"offset":5283},"indent":[]}}],"position":{"start":{"line":191,"column":1,"offset":5203},"end":{"line":191,"column":81,"offset":5283},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([2, 4, 6], anyOf(hasValue(8), hasValue(2)));","position":{"start":{"line":192,"column":1,"offset":5284},"end":{"line":194,"column":4,"offset":5350},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"noneOf","position":{"start":{"line":196,"column":3,"offset":5354},"end":{"line":196,"column":11,"offset":5362},"indent":[]}},{"type":"text","value":" - Evaluates to false if ANY of the passed in matchers evaluate to true.","position":{"start":{"line":196,"column":11,"offset":5362},"end":{"line":196,"column":83,"offset":5434},"indent":[]}}],"position":{"start":{"line":196,"column":3,"offset":5354},"end":{"line":196,"column":83,"offset":5434},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":5352},"end":{"line":196,"column":83,"offset":5434},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":5352},"end":{"line":196,"column":83,"offset":5434},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([2, 4, 6], noneOf(hasValue(1), hasValue(3)));","position":{"start":{"line":197,"column":1,"offset":5435},"end":{"line":199,"column":4,"offset":5502},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"both","position":{"start":{"line":201,"column":3,"offset":5506},"end":{"line":201,"column":9,"offset":5512},"indent":[]}},{"type":"text","value":" + ","position":{"start":{"line":201,"column":9,"offset":5512},"end":{"line":201,"column":12,"offset":5515},"indent":[]}},{"type":"inlineCode","value":"andAlso","position":{"start":{"line":201,"column":12,"offset":5515},"end":{"line":201,"column":21,"offset":5524},"indent":[]}},{"type":"text","value":" - This is useful for fluently combining matchers that must both pass.","position":{"start":{"line":201,"column":21,"offset":5524},"end":{"line":201,"column":91,"offset":5594},"indent":[]}}],"position":{"start":{"line":201,"column":3,"offset":5506},"end":{"line":201,"column":91,"offset":5594},"indent":[]}}],"position":{"start":{"line":201,"column":1,"offset":5504},"end":{"line":201,"column":91,"offset":5594},"indent":[]}}],"position":{"start":{"line":201,"column":1,"offset":5504},"end":{"line":201,"column":91,"offset":5594},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([2, 4, 6], both(hasValue(2))->andAlso(hasValue(4)));","position":{"start":{"line":202,"column":1,"offset":5595},"end":{"line":204,"column":4,"offset":5669},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"either","position":{"start":{"line":206,"column":3,"offset":5673},"end":{"line":206,"column":11,"offset":5681},"indent":[]}},{"type":"text","value":" + ","position":{"start":{"line":206,"column":11,"offset":5681},"end":{"line":206,"column":14,"offset":5684},"indent":[]}},{"type":"inlineCode","value":"orElse","position":{"start":{"line":206,"column":14,"offset":5684},"end":{"line":206,"column":22,"offset":5692},"indent":[]}},{"type":"text","value":" - This is useful for fluently combining matchers where either may pass,","position":{"start":{"line":206,"column":22,"offset":5692},"end":{"line":206,"column":94,"offset":5764},"indent":[]}}],"position":{"start":{"line":206,"column":3,"offset":5673},"end":{"line":206,"column":94,"offset":5764},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":5671},"end":{"line":206,"column":94,"offset":5764},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":5671},"end":{"line":206,"column":94,"offset":5764},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([2, 4, 6], either(hasValue(2))->orElse(hasValue(4)));","position":{"start":{"line":207,"column":1,"offset":5765},"end":{"line":209,"column":4,"offset":5840},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"describedAs","position":{"start":{"line":211,"column":3,"offset":5844},"end":{"line":211,"column":16,"offset":5857},"indent":[]}},{"type":"text","value":" - Wraps an existing matcher and overrides the description when it fails.","position":{"start":{"line":211,"column":16,"offset":5857},"end":{"line":211,"column":89,"offset":5930},"indent":[]}}],"position":{"start":{"line":211,"column":3,"offset":5844},"end":{"line":211,"column":89,"offset":5930},"indent":[]}}],"position":{"start":{"line":211,"column":1,"offset":5842},"end":{"line":211,"column":89,"offset":5930},"indent":[]}}],"position":{"start":{"line":211,"column":1,"offset":5842},"end":{"line":211,"column":89,"offset":5930},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$expected = \"Dog\";\n$found = null;\n// this assertion would result error message as Expected: is not null but: was null\n//assertThat(\"Expected {$expected}, got {$found}\", $found, is(notNullValue()));\n// and this assertion would result error message as Expected: Dog but: was null\n//assertThat($found, describedAs($expected, notNullValue()));","position":{"start":{"line":212,"column":1,"offset":5931},"end":{"line":219,"column":4,"offset":6282},"indent":[1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"everyItem","position":{"start":{"line":221,"column":3,"offset":6286},"end":{"line":221,"column":14,"offset":6297},"indent":[]}},{"type":"text","value":" - A matcher to apply to every element in an array.","position":{"start":{"line":221,"column":14,"offset":6297},"end":{"line":221,"column":65,"offset":6348},"indent":[]}}],"position":{"start":{"line":221,"column":3,"offset":6286},"end":{"line":221,"column":65,"offset":6348},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":6284},"end":{"line":221,"column":65,"offset":6348},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":6284},"end":{"line":221,"column":65,"offset":6348},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([2, 4, 6], everyItem(notNullValue()));","position":{"start":{"line":222,"column":1,"offset":6349},"end":{"line":224,"column":4,"offset":6409},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hasItem","position":{"start":{"line":226,"column":3,"offset":6413},"end":{"line":226,"column":12,"offset":6422},"indent":[]}},{"type":"text","value":" - check array has given item, it can take a matcher argument","position":{"start":{"line":226,"column":12,"offset":6422},"end":{"line":226,"column":73,"offset":6483},"indent":[]}}],"position":{"start":{"line":226,"column":3,"offset":6413},"end":{"line":226,"column":73,"offset":6483},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":6411},"end":{"line":226,"column":73,"offset":6483},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":6411},"end":{"line":226,"column":73,"offset":6483},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([2, 4, 6], hasItem(equalTo(2)));","position":{"start":{"line":227,"column":1,"offset":6484},"end":{"line":229,"column":4,"offset":6538},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hasItems","position":{"start":{"line":231,"column":3,"offset":6542},"end":{"line":231,"column":13,"offset":6552},"indent":[]}},{"type":"text","value":" - check array has givem items, it can take multiple matcher as arguments","position":{"start":{"line":231,"column":13,"offset":6552},"end":{"line":231,"column":86,"offset":6625},"indent":[]}}],"position":{"start":{"line":231,"column":3,"offset":6542},"end":{"line":231,"column":86,"offset":6625},"indent":[]}}],"position":{"start":{"line":231,"column":1,"offset":6540},"end":{"line":231,"column":86,"offset":6625},"indent":[]}}],"position":{"start":{"line":231,"column":1,"offset":6540},"end":{"line":231,"column":86,"offset":6625},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([1, 3, 5], hasItems(equalTo(1), equalTo(3)));","position":{"start":{"line":232,"column":1,"offset":6626},"end":{"line":234,"column":4,"offset":6693},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Object","position":{"start":{"line":236,"column":5,"offset":6699},"end":{"line":236,"column":11,"offset":6705},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":6695},"end":{"line":236,"column":11,"offset":6705},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hasToString","position":{"start":{"line":238,"column":3,"offset":6709},"end":{"line":238,"column":16,"offset":6722},"indent":[]}},{"type":"text","value":" - check ","position":{"start":{"line":238,"column":16,"offset":6722},"end":{"line":238,"column":25,"offset":6731},"indent":[]}},{"type":"inlineCode","value":"__toString","position":{"start":{"line":238,"column":25,"offset":6731},"end":{"line":238,"column":37,"offset":6743},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":238,"column":37,"offset":6743},"end":{"line":238,"column":41,"offset":6747},"indent":[]}},{"type":"inlineCode","value":"toString","position":{"start":{"line":238,"column":41,"offset":6747},"end":{"line":238,"column":51,"offset":6757},"indent":[]}},{"type":"text","value":" method","position":{"start":{"line":238,"column":51,"offset":6757},"end":{"line":238,"column":58,"offset":6764},"indent":[]}}],"position":{"start":{"line":238,"column":3,"offset":6709},"end":{"line":238,"column":58,"offset":6764},"indent":[]}}],"position":{"start":{"line":238,"column":1,"offset":6707},"end":{"line":238,"column":58,"offset":6764},"indent":[]}}],"position":{"start":{"line":238,"column":1,"offset":6707},"end":{"line":238,"column":58,"offset":6764},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"class Foo {\n    public $name = null;\n\n    public function __toString() {\n        return \"[Foo]Instance\";\n    }\n}\n$foo = new Foo;\nassertThat($foo, hasToString(equalTo(\"[Foo]Instance\")));","position":{"start":{"line":239,"column":1,"offset":6765},"end":{"line":249,"column":4,"offset":6961},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"equalTo","position":{"start":{"line":251,"column":3,"offset":6965},"end":{"line":251,"column":12,"offset":6974},"indent":[]}},{"type":"text","value":" - compares two instances using comparison operator '=='","position":{"start":{"line":251,"column":12,"offset":6974},"end":{"line":251,"column":68,"offset":7030},"indent":[]}}],"position":{"start":{"line":251,"column":3,"offset":6965},"end":{"line":251,"column":68,"offset":7030},"indent":[]}}],"position":{"start":{"line":251,"column":1,"offset":6963},"end":{"line":251,"column":68,"offset":7030},"indent":[]}}],"position":{"start":{"line":251,"column":1,"offset":6963},"end":{"line":251,"column":68,"offset":7030},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$foo = new Foo;\n$foo2 = new Foo;\nassertThat($foo, equalTo($foo2));","position":{"start":{"line":252,"column":1,"offset":7031},"end":{"line":256,"column":4,"offset":7108},"indent":[1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"identicalTo","position":{"start":{"line":258,"column":3,"offset":7112},"end":{"line":258,"column":16,"offset":7125},"indent":[]}},{"type":"text","value":" - compares two instances using identity operator '==='","position":{"start":{"line":258,"column":16,"offset":7125},"end":{"line":258,"column":71,"offset":7180},"indent":[]}}],"position":{"start":{"line":258,"column":3,"offset":7112},"end":{"line":258,"column":71,"offset":7180},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":7110},"end":{"line":258,"column":71,"offset":7180},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":7110},"end":{"line":258,"column":71,"offset":7180},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat($foo, is(not(identicalTo($foo2))));","position":{"start":{"line":259,"column":1,"offset":7181},"end":{"line":261,"column":4,"offset":7238},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"anInstanceOf","position":{"start":{"line":263,"column":3,"offset":7242},"end":{"line":263,"column":17,"offset":7256},"indent":[]}},{"type":"text","value":" - check instance is an instance|sub-class of given class","position":{"start":{"line":263,"column":17,"offset":7256},"end":{"line":263,"column":74,"offset":7313},"indent":[]}}],"position":{"start":{"line":263,"column":3,"offset":7242},"end":{"line":263,"column":74,"offset":7313},"indent":[]}}],"position":{"start":{"line":263,"column":1,"offset":7240},"end":{"line":263,"column":74,"offset":7313},"indent":[]}}],"position":{"start":{"line":263,"column":1,"offset":7240},"end":{"line":263,"column":74,"offset":7313},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat($foo, anInstanceOf(Foo::class));","position":{"start":{"line":264,"column":1,"offset":7314},"end":{"line":266,"column":4,"offset":7368},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"any","position":{"start":{"line":268,"column":3,"offset":7372},"end":{"line":268,"column":8,"offset":7377},"indent":[]}},{"type":"text","value":" - alias of ","position":{"start":{"line":268,"column":8,"offset":7377},"end":{"line":268,"column":20,"offset":7389},"indent":[]}},{"type":"inlineCode","value":"anInstanceOf","position":{"start":{"line":268,"column":20,"offset":7389},"end":{"line":268,"column":34,"offset":7403},"indent":[]}}],"position":{"start":{"line":268,"column":3,"offset":7372},"end":{"line":268,"column":34,"offset":7403},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":7370},"end":{"line":269,"column":1,"offset":7404},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"nullValue","position":{"start":{"line":270,"column":3,"offset":7407},"end":{"line":270,"column":14,"offset":7418},"indent":[]}},{"type":"text","value":" check null","position":{"start":{"line":270,"column":14,"offset":7418},"end":{"line":270,"column":25,"offset":7429},"indent":[]}}],"position":{"start":{"line":270,"column":3,"offset":7407},"end":{"line":270,"column":25,"offset":7429},"indent":[]}}],"position":{"start":{"line":270,"column":1,"offset":7405},"end":{"line":270,"column":25,"offset":7429},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":7370},"end":{"line":270,"column":25,"offset":7429},"indent":[1,1]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(null, is(nullValue()));","position":{"start":{"line":271,"column":1,"offset":7430},"end":{"line":273,"column":4,"offset":7475},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"notNullValue","position":{"start":{"line":275,"column":3,"offset":7479},"end":{"line":275,"column":17,"offset":7493},"indent":[]}},{"type":"text","value":" check not null","position":{"start":{"line":275,"column":17,"offset":7493},"end":{"line":275,"column":32,"offset":7508},"indent":[]}}],"position":{"start":{"line":275,"column":3,"offset":7479},"end":{"line":275,"column":32,"offset":7508},"indent":[]}}],"position":{"start":{"line":275,"column":1,"offset":7477},"end":{"line":275,"column":32,"offset":7508},"indent":[]}}],"position":{"start":{"line":275,"column":1,"offset":7477},"end":{"line":275,"column":32,"offset":7508},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"\", notNullValue());","position":{"start":{"line":276,"column":1,"offset":7509},"end":{"line":278,"column":4,"offset":7551},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"sameInstance","position":{"start":{"line":280,"column":3,"offset":7555},"end":{"line":280,"column":17,"offset":7569},"indent":[]}},{"type":"text","value":" - check for same instance","position":{"start":{"line":280,"column":17,"offset":7569},"end":{"line":280,"column":43,"offset":7595},"indent":[]}}],"position":{"start":{"line":280,"column":3,"offset":7555},"end":{"line":280,"column":43,"offset":7595},"indent":[]}}],"position":{"start":{"line":280,"column":1,"offset":7553},"end":{"line":280,"column":43,"offset":7595},"indent":[]}}],"position":{"start":{"line":280,"column":1,"offset":7553},"end":{"line":280,"column":43,"offset":7595},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat($foo, is(not(sameInstance($foo2))));\nassertThat($foo, is(sameInstance($foo)));","position":{"start":{"line":281,"column":1,"offset":7596},"end":{"line":284,"column":4,"offset":7696},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"typeOf","position":{"start":{"line":286,"column":3,"offset":7700},"end":{"line":286,"column":11,"offset":7708},"indent":[]}},{"type":"text","value":"- check type","position":{"start":{"line":286,"column":11,"offset":7708},"end":{"line":286,"column":23,"offset":7720},"indent":[]}}],"position":{"start":{"line":286,"column":3,"offset":7700},"end":{"line":286,"column":23,"offset":7720},"indent":[]}}],"position":{"start":{"line":286,"column":1,"offset":7698},"end":{"line":286,"column":23,"offset":7720},"indent":[]}}],"position":{"start":{"line":286,"column":1,"offset":7698},"end":{"line":286,"column":23,"offset":7720},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(1, typeOf(\"integer\"));","position":{"start":{"line":287,"column":1,"offset":7721},"end":{"line":289,"column":4,"offset":7766},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"notSet","position":{"start":{"line":291,"column":3,"offset":7770},"end":{"line":291,"column":11,"offset":7778},"indent":[]}},{"type":"text","value":" - check if instance property is not set","position":{"start":{"line":291,"column":11,"offset":7778},"end":{"line":291,"column":51,"offset":7818},"indent":[]}}],"position":{"start":{"line":291,"column":3,"offset":7770},"end":{"line":291,"column":51,"offset":7818},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":7768},"end":{"line":291,"column":51,"offset":7818},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":7768},"end":{"line":291,"column":51,"offset":7818},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat($foo, notSet(\"name\"));","position":{"start":{"line":292,"column":1,"offset":7819},"end":{"line":294,"column":4,"offset":7863},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"set","position":{"start":{"line":296,"column":3,"offset":7867},"end":{"line":296,"column":8,"offset":7872},"indent":[]}},{"type":"text","value":" - check if instance property is set","position":{"start":{"line":296,"column":8,"offset":7872},"end":{"line":296,"column":44,"offset":7908},"indent":[]}}],"position":{"start":{"line":296,"column":3,"offset":7867},"end":{"line":296,"column":44,"offset":7908},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":7865},"end":{"line":296,"column":44,"offset":7908},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":7865},"end":{"line":296,"column":44,"offset":7908},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$foo->name = \"bar\";\nassertThat($foo, set(\"name\"));","position":{"start":{"line":297,"column":1,"offset":7909},"end":{"line":300,"column":4,"offset":7970},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Numbers","position":{"start":{"line":302,"column":5,"offset":7976},"end":{"line":302,"column":12,"offset":7983},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":7972},"end":{"line":302,"column":12,"offset":7983},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"closeTo","position":{"start":{"line":304,"column":3,"offset":7987},"end":{"line":304,"column":12,"offset":7996},"indent":[]}},{"type":"text","value":" - check value close to a range","position":{"start":{"line":304,"column":12,"offset":7996},"end":{"line":304,"column":43,"offset":8027},"indent":[]}}],"position":{"start":{"line":304,"column":3,"offset":7987},"end":{"line":304,"column":43,"offset":8027},"indent":[]}}],"position":{"start":{"line":304,"column":1,"offset":7985},"end":{"line":304,"column":43,"offset":8027},"indent":[]}}],"position":{"start":{"line":304,"column":1,"offset":7985},"end":{"line":304,"column":43,"offset":8027},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(3, closeTo(3, 0.5));","position":{"start":{"line":305,"column":1,"offset":8028},"end":{"line":307,"column":4,"offset":8070},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"comparesEqualTo","position":{"start":{"line":309,"column":3,"offset":8074},"end":{"line":309,"column":20,"offset":8091},"indent":[]}},{"type":"text","value":" - check with '=='","position":{"start":{"line":309,"column":20,"offset":8091},"end":{"line":309,"column":38,"offset":8109},"indent":[]}}],"position":{"start":{"line":309,"column":3,"offset":8074},"end":{"line":309,"column":38,"offset":8109},"indent":[]}}],"position":{"start":{"line":309,"column":1,"offset":8072},"end":{"line":309,"column":38,"offset":8109},"indent":[]}}],"position":{"start":{"line":309,"column":1,"offset":8072},"end":{"line":309,"column":38,"offset":8109},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(2, comparesEqualTo(2));","position":{"start":{"line":310,"column":1,"offset":8110},"end":{"line":312,"column":4,"offset":8155},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"greaterThan","position":{"start":{"line":314,"column":3,"offset":8159},"end":{"line":314,"column":16,"offset":8172},"indent":[]}},{"type":"text","value":" - check '>'","position":{"start":{"line":314,"column":16,"offset":8172},"end":{"line":314,"column":28,"offset":8184},"indent":[]}}],"position":{"start":{"line":314,"column":3,"offset":8159},"end":{"line":314,"column":28,"offset":8184},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":8157},"end":{"line":314,"column":28,"offset":8184},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":8157},"end":{"line":314,"column":28,"offset":8184},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"assertThat(2, greaterThan(1));","position":{"start":{"line":315,"column":1,"offset":8185},"end":{"line":317,"column":4,"offset":8223},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"greaterThanOrEqualTo","position":{"start":{"line":319,"column":3,"offset":8227},"end":{"line":319,"column":25,"offset":8249},"indent":[]}}],"position":{"start":{"line":319,"column":3,"offset":8227},"end":{"line":319,"column":25,"offset":8249},"indent":[]}}],"position":{"start":{"line":319,"column":1,"offset":8225},"end":{"line":319,"column":25,"offset":8249},"indent":[]}}],"position":{"start":{"line":319,"column":1,"offset":8225},"end":{"line":319,"column":25,"offset":8249},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(2, greaterThanOrEqualTo(2));","position":{"start":{"line":320,"column":1,"offset":8250},"end":{"line":322,"column":4,"offset":8300},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"atLeast","position":{"start":{"line":324,"column":3,"offset":8304},"end":{"line":324,"column":12,"offset":8313},"indent":[]}},{"type":"text","value":" - The value is >= given value","position":{"start":{"line":324,"column":12,"offset":8313},"end":{"line":324,"column":42,"offset":8343},"indent":[]}}],"position":{"start":{"line":324,"column":3,"offset":8304},"end":{"line":324,"column":42,"offset":8343},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":8302},"end":{"line":324,"column":42,"offset":8343},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":8302},"end":{"line":324,"column":42,"offset":8343},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(3, atLeast(2));","position":{"start":{"line":325,"column":1,"offset":8344},"end":{"line":327,"column":4,"offset":8381},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"lessThan","position":{"start":{"line":328,"column":3,"offset":8384},"end":{"line":328,"column":13,"offset":8394},"indent":[]}}],"position":{"start":{"line":328,"column":3,"offset":8384},"end":{"line":328,"column":13,"offset":8394},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":8382},"end":{"line":328,"column":13,"offset":8394},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":8382},"end":{"line":328,"column":13,"offset":8394},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(2, lessThan(3));","position":{"start":{"line":329,"column":1,"offset":8395},"end":{"line":331,"column":4,"offset":8433},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"lessThanOrEqualTo","position":{"start":{"line":333,"column":3,"offset":8437},"end":{"line":333,"column":22,"offset":8456},"indent":[]}}],"position":{"start":{"line":333,"column":3,"offset":8437},"end":{"line":333,"column":22,"offset":8456},"indent":[]}}],"position":{"start":{"line":333,"column":1,"offset":8435},"end":{"line":333,"column":22,"offset":8456},"indent":[]}}],"position":{"start":{"line":333,"column":1,"offset":8435},"end":{"line":333,"column":22,"offset":8456},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(2, lessThanOrEqualTo(3));","position":{"start":{"line":334,"column":1,"offset":8457},"end":{"line":336,"column":4,"offset":8504},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"atMost","position":{"start":{"line":338,"column":3,"offset":8508},"end":{"line":338,"column":11,"offset":8516},"indent":[]}},{"type":"text","value":" - The value is <= given value","position":{"start":{"line":338,"column":11,"offset":8516},"end":{"line":338,"column":41,"offset":8546},"indent":[]}}],"position":{"start":{"line":338,"column":3,"offset":8508},"end":{"line":338,"column":41,"offset":8546},"indent":[]}}],"position":{"start":{"line":338,"column":1,"offset":8506},"end":{"line":338,"column":41,"offset":8546},"indent":[]}}],"position":{"start":{"line":338,"column":1,"offset":8506},"end":{"line":338,"column":41,"offset":8546},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(2, atMost(3));","position":{"start":{"line":339,"column":1,"offset":8547},"end":{"line":341,"column":4,"offset":8583},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"String","position":{"start":{"line":343,"column":5,"offset":8589},"end":{"line":343,"column":11,"offset":8595},"indent":[]}}],"position":{"start":{"line":343,"column":1,"offset":8585},"end":{"line":343,"column":11,"offset":8595},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"emptyString","position":{"start":{"line":345,"column":3,"offset":8599},"end":{"line":345,"column":16,"offset":8612},"indent":[]}},{"type":"text","value":" - check for empty string","position":{"start":{"line":345,"column":16,"offset":8612},"end":{"line":345,"column":41,"offset":8637},"indent":[]}}],"position":{"start":{"line":345,"column":3,"offset":8599},"end":{"line":345,"column":41,"offset":8637},"indent":[]}}],"position":{"start":{"line":345,"column":1,"offset":8597},"end":{"line":345,"column":41,"offset":8637},"indent":[]}}],"position":{"start":{"line":345,"column":1,"offset":8597},"end":{"line":345,"column":41,"offset":8637},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"\", emptyString());","position":{"start":{"line":346,"column":1,"offset":8638},"end":{"line":348,"column":4,"offset":8679},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"isEmptyOrNullString","position":{"start":{"line":350,"column":3,"offset":8683},"end":{"line":350,"column":24,"offset":8704},"indent":[]}}],"position":{"start":{"line":350,"column":3,"offset":8683},"end":{"line":350,"column":24,"offset":8704},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":8681},"end":{"line":350,"column":24,"offset":8704},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":8681},"end":{"line":350,"column":24,"offset":8704},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(null, isEmptyOrNullString());","position":{"start":{"line":351,"column":1,"offset":8705},"end":{"line":353,"column":4,"offset":8756},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"nullOrEmptyString","position":{"start":{"line":355,"column":3,"offset":8760},"end":{"line":355,"column":22,"offset":8779},"indent":[]}}],"position":{"start":{"line":355,"column":3,"offset":8760},"end":{"line":355,"column":22,"offset":8779},"indent":[]}}],"position":{"start":{"line":355,"column":1,"offset":8758},"end":{"line":355,"column":22,"offset":8779},"indent":[]}}],"position":{"start":{"line":355,"column":1,"offset":8758},"end":{"line":355,"column":22,"offset":8779},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"\", nullOrEmptyString());","position":{"start":{"line":356,"column":1,"offset":8780},"end":{"line":358,"column":4,"offset":8827},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"isNonEmptyString","position":{"start":{"line":360,"column":3,"offset":8831},"end":{"line":360,"column":21,"offset":8849},"indent":[]}}],"position":{"start":{"line":360,"column":3,"offset":8831},"end":{"line":360,"column":21,"offset":8849},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":8829},"end":{"line":360,"column":21,"offset":8849},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":8829},"end":{"line":360,"column":21,"offset":8849},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"foo\", isNonEmptyString());","position":{"start":{"line":361,"column":1,"offset":8850},"end":{"line":363,"column":4,"offset":8899},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"nonEmptyString","position":{"start":{"line":365,"column":3,"offset":8903},"end":{"line":365,"column":19,"offset":8919},"indent":[]}}],"position":{"start":{"line":365,"column":3,"offset":8903},"end":{"line":365,"column":19,"offset":8919},"indent":[]}}],"position":{"start":{"line":365,"column":1,"offset":8901},"end":{"line":365,"column":19,"offset":8919},"indent":[]}}],"position":{"start":{"line":365,"column":1,"offset":8901},"end":{"line":365,"column":19,"offset":8919},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"foo\", nonEmptyString());","position":{"start":{"line":366,"column":1,"offset":8920},"end":{"line":368,"column":4,"offset":8967},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"equalToIgnoringCase","position":{"start":{"line":370,"column":3,"offset":8971},"end":{"line":370,"column":24,"offset":8992},"indent":[]}}],"position":{"start":{"line":370,"column":3,"offset":8971},"end":{"line":370,"column":24,"offset":8992},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":8969},"end":{"line":370,"column":24,"offset":8992},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":8969},"end":{"line":370,"column":24,"offset":8992},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"Foo\", equalToIgnoringCase(\"foo\"));","position":{"start":{"line":371,"column":1,"offset":8993},"end":{"line":373,"column":4,"offset":9050},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"equalToIgnoringWhiteSpace","position":{"start":{"line":374,"column":3,"offset":9053},"end":{"line":374,"column":30,"offset":9080},"indent":[]}}],"position":{"start":{"line":374,"column":3,"offset":9053},"end":{"line":374,"column":30,"offset":9080},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":9051},"end":{"line":374,"column":30,"offset":9080},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":9051},"end":{"line":374,"column":30,"offset":9080},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\" Foo \", equalToIgnoringWhiteSpace(\"Foo\"));","position":{"start":{"line":375,"column":1,"offset":9081},"end":{"line":377,"column":4,"offset":9146},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"matchesPattern","position":{"start":{"line":379,"column":3,"offset":9150},"end":{"line":379,"column":19,"offset":9166},"indent":[]}},{"type":"text","value":" - matches with regex pattern","position":{"start":{"line":379,"column":19,"offset":9166},"end":{"line":379,"column":48,"offset":9195},"indent":[]}}],"position":{"start":{"line":379,"column":3,"offset":9150},"end":{"line":379,"column":48,"offset":9195},"indent":[]}}],"position":{"start":{"line":379,"column":1,"offset":9148},"end":{"line":379,"column":48,"offset":9195},"indent":[]}}],"position":{"start":{"line":379,"column":1,"offset":9148},"end":{"line":379,"column":48,"offset":9195},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"foobarbaz\", matchesPattern('/(foo)(bar)(baz)/'));","position":{"start":{"line":380,"column":1,"offset":9196},"end":{"line":382,"column":4,"offset":9268},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"containsString","position":{"start":{"line":384,"column":3,"offset":9272},"end":{"line":384,"column":19,"offset":9288},"indent":[]}},{"type":"text","value":" - check for substring","position":{"start":{"line":384,"column":19,"offset":9288},"end":{"line":384,"column":41,"offset":9310},"indent":[]}}],"position":{"start":{"line":384,"column":3,"offset":9272},"end":{"line":384,"column":41,"offset":9310},"indent":[]}}],"position":{"start":{"line":384,"column":1,"offset":9270},"end":{"line":384,"column":41,"offset":9310},"indent":[]}}],"position":{"start":{"line":384,"column":1,"offset":9270},"end":{"line":384,"column":41,"offset":9310},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"foobar\", containsString(\"foo\"));","position":{"start":{"line":385,"column":1,"offset":9311},"end":{"line":387,"column":4,"offset":9366},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"containsStringIgnoringCase","position":{"start":{"line":389,"column":3,"offset":9370},"end":{"line":389,"column":31,"offset":9398},"indent":[]}}],"position":{"start":{"line":389,"column":3,"offset":9370},"end":{"line":389,"column":31,"offset":9398},"indent":[]}}],"position":{"start":{"line":389,"column":1,"offset":9368},"end":{"line":389,"column":31,"offset":9398},"indent":[]}}],"position":{"start":{"line":389,"column":1,"offset":9368},"end":{"line":389,"column":31,"offset":9398},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"fooBar\", containsStringIgnoringCase(\"bar\"));","position":{"start":{"line":390,"column":1,"offset":9399},"end":{"line":392,"column":4,"offset":9466},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"stringContainsInOrder","position":{"start":{"line":394,"column":3,"offset":9470},"end":{"line":394,"column":26,"offset":9493},"indent":[]}}],"position":{"start":{"line":394,"column":3,"offset":9470},"end":{"line":394,"column":26,"offset":9493},"indent":[]}}],"position":{"start":{"line":394,"column":1,"offset":9468},"end":{"line":394,"column":26,"offset":9493},"indent":[]}}],"position":{"start":{"line":394,"column":1,"offset":9468},"end":{"line":394,"column":26,"offset":9493},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"foo\", stringContainsInOrder(\"foo\"));","position":{"start":{"line":395,"column":1,"offset":9494},"end":{"line":397,"column":4,"offset":9553},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"endsWith","position":{"start":{"line":399,"column":3,"offset":9557},"end":{"line":399,"column":13,"offset":9567},"indent":[]}},{"type":"text","value":" - check string that ends with given value","position":{"start":{"line":399,"column":13,"offset":9567},"end":{"line":399,"column":55,"offset":9609},"indent":[]}}],"position":{"start":{"line":399,"column":3,"offset":9557},"end":{"line":399,"column":55,"offset":9609},"indent":[]}}],"position":{"start":{"line":399,"column":1,"offset":9555},"end":{"line":399,"column":55,"offset":9609},"indent":[]}}],"position":{"start":{"line":399,"column":1,"offset":9555},"end":{"line":399,"column":55,"offset":9609},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"foo\", endsWith(\"oo\"));","position":{"start":{"line":400,"column":1,"offset":9610},"end":{"line":402,"column":4,"offset":9655},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"startsWith","position":{"start":{"line":404,"column":3,"offset":9659},"end":{"line":404,"column":15,"offset":9671},"indent":[]}},{"type":"text","value":" - check string that starts with given value","position":{"start":{"line":404,"column":15,"offset":9671},"end":{"line":404,"column":59,"offset":9715},"indent":[]}}],"position":{"start":{"line":404,"column":3,"offset":9659},"end":{"line":404,"column":59,"offset":9715},"indent":[]}}],"position":{"start":{"line":404,"column":1,"offset":9657},"end":{"line":404,"column":59,"offset":9715},"indent":[]}}],"position":{"start":{"line":404,"column":1,"offset":9657},"end":{"line":404,"column":59,"offset":9715},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"bar\", startsWith(\"ba\"));","position":{"start":{"line":405,"column":1,"offset":9716},"end":{"line":407,"column":4,"offset":9763},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Type-checking","position":{"start":{"line":409,"column":5,"offset":9769},"end":{"line":409,"column":18,"offset":9782},"indent":[]}}],"position":{"start":{"line":409,"column":1,"offset":9765},"end":{"line":409,"column":18,"offset":9782},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"arrayValue","position":{"start":{"line":411,"column":3,"offset":9786},"end":{"line":411,"column":15,"offset":9798},"indent":[]}},{"type":"text","value":" - check array type","position":{"start":{"line":411,"column":15,"offset":9798},"end":{"line":411,"column":34,"offset":9817},"indent":[]}}],"position":{"start":{"line":411,"column":3,"offset":9786},"end":{"line":411,"column":34,"offset":9817},"indent":[]}}],"position":{"start":{"line":411,"column":1,"offset":9784},"end":{"line":411,"column":34,"offset":9817},"indent":[]}}],"position":{"start":{"line":411,"column":1,"offset":9784},"end":{"line":411,"column":34,"offset":9817},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat([], arrayValue());","position":{"start":{"line":412,"column":1,"offset":9818},"end":{"line":414,"column":4,"offset":9858},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"booleanValue","position":{"start":{"line":416,"column":3,"offset":9862},"end":{"line":416,"column":17,"offset":9876},"indent":[]}}],"position":{"start":{"line":416,"column":3,"offset":9862},"end":{"line":416,"column":17,"offset":9876},"indent":[]}}],"position":{"start":{"line":416,"column":1,"offset":9860},"end":{"line":416,"column":17,"offset":9876},"indent":[]}}],"position":{"start":{"line":416,"column":1,"offset":9860},"end":{"line":416,"column":17,"offset":9876},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(true, booleanValue());","position":{"start":{"line":417,"column":1,"offset":9877},"end":{"line":419,"column":4,"offset":9921},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"boolValue","position":{"start":{"line":420,"column":3,"offset":9924},"end":{"line":420,"column":14,"offset":9935},"indent":[]}},{"type":"text","value":" - alias of booleanValue","position":{"start":{"line":420,"column":14,"offset":9935},"end":{"line":420,"column":38,"offset":9959},"indent":[]}}],"position":{"start":{"line":420,"column":3,"offset":9924},"end":{"line":420,"column":38,"offset":9959},"indent":[]}}],"position":{"start":{"line":420,"column":1,"offset":9922},"end":{"line":421,"column":1,"offset":9960},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"callableValue","position":{"start":{"line":422,"column":3,"offset":9963},"end":{"line":422,"column":18,"offset":9978},"indent":[]}},{"type":"text","value":" - check if value is callable","position":{"start":{"line":422,"column":18,"offset":9978},"end":{"line":422,"column":47,"offset":10007},"indent":[]}}],"position":{"start":{"line":422,"column":3,"offset":9963},"end":{"line":422,"column":47,"offset":10007},"indent":[]}}],"position":{"start":{"line":422,"column":1,"offset":9961},"end":{"line":422,"column":47,"offset":10007},"indent":[]}}],"position":{"start":{"line":420,"column":1,"offset":9922},"end":{"line":422,"column":47,"offset":10007},"indent":[1,1]}},{"type":"code","lang":"php","meta":null,"value":"$func = function () {};\nassertThat($func, callableValue());","position":{"start":{"line":423,"column":1,"offset":10008},"end":{"line":426,"column":4,"offset":10078},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"doubleValue","position":{"start":{"line":427,"column":3,"offset":10081},"end":{"line":427,"column":16,"offset":10094},"indent":[]}}],"position":{"start":{"line":427,"column":3,"offset":10081},"end":{"line":427,"column":16,"offset":10094},"indent":[]}}],"position":{"start":{"line":427,"column":1,"offset":10079},"end":{"line":427,"column":16,"offset":10094},"indent":[]}}],"position":{"start":{"line":427,"column":1,"offset":10079},"end":{"line":427,"column":16,"offset":10094},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(3.14, doubleValue());","position":{"start":{"line":428,"column":1,"offset":10095},"end":{"line":430,"column":4,"offset":10138},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"floatValue","position":{"start":{"line":432,"column":3,"offset":10142},"end":{"line":432,"column":15,"offset":10154},"indent":[]}}],"position":{"start":{"line":432,"column":3,"offset":10142},"end":{"line":432,"column":15,"offset":10154},"indent":[]}}],"position":{"start":{"line":432,"column":1,"offset":10140},"end":{"line":432,"column":15,"offset":10154},"indent":[]}}],"position":{"start":{"line":432,"column":1,"offset":10140},"end":{"line":432,"column":15,"offset":10154},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(3.14, floatValue());","position":{"start":{"line":433,"column":1,"offset":10155},"end":{"line":435,"column":4,"offset":10197},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"integerValue","position":{"start":{"line":437,"column":3,"offset":10201},"end":{"line":437,"column":17,"offset":10215},"indent":[]}}],"position":{"start":{"line":437,"column":3,"offset":10201},"end":{"line":437,"column":17,"offset":10215},"indent":[]}}],"position":{"start":{"line":437,"column":1,"offset":10199},"end":{"line":437,"column":17,"offset":10215},"indent":[]}}],"position":{"start":{"line":437,"column":1,"offset":10199},"end":{"line":437,"column":17,"offset":10215},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(1, integerValue());","position":{"start":{"line":438,"column":1,"offset":10216},"end":{"line":440,"column":4,"offset":10257},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"intValue","position":{"start":{"line":442,"column":3,"offset":10261},"end":{"line":442,"column":13,"offset":10271},"indent":[]}},{"type":"text","value":" - alias of ","position":{"start":{"line":442,"column":13,"offset":10271},"end":{"line":442,"column":25,"offset":10283},"indent":[]}},{"type":"inlineCode","value":"integerValue","position":{"start":{"line":442,"column":25,"offset":10283},"end":{"line":442,"column":39,"offset":10297},"indent":[]}}],"position":{"start":{"line":442,"column":3,"offset":10261},"end":{"line":442,"column":39,"offset":10297},"indent":[]}}],"position":{"start":{"line":442,"column":1,"offset":10259},"end":{"line":443,"column":1,"offset":10298},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"numericValue","position":{"start":{"line":444,"column":3,"offset":10301},"end":{"line":444,"column":17,"offset":10315},"indent":[]}},{"type":"text","value":" - check if value is numeric","position":{"start":{"line":444,"column":17,"offset":10315},"end":{"line":444,"column":45,"offset":10343},"indent":[]}}],"position":{"start":{"line":444,"column":3,"offset":10301},"end":{"line":444,"column":45,"offset":10343},"indent":[]}}],"position":{"start":{"line":444,"column":1,"offset":10299},"end":{"line":444,"column":45,"offset":10343},"indent":[]}}],"position":{"start":{"line":442,"column":1,"offset":10259},"end":{"line":444,"column":45,"offset":10343},"indent":[1,1]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"123\", numericValue());","position":{"start":{"line":445,"column":1,"offset":10344},"end":{"line":447,"column":4,"offset":10389},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"objectValue","position":{"start":{"line":449,"column":3,"offset":10393},"end":{"line":449,"column":16,"offset":10406},"indent":[]}},{"type":"text","value":" - check for object","position":{"start":{"line":449,"column":16,"offset":10406},"end":{"line":449,"column":35,"offset":10425},"indent":[]}}],"position":{"start":{"line":449,"column":3,"offset":10393},"end":{"line":449,"column":35,"offset":10425},"indent":[]}}],"position":{"start":{"line":449,"column":1,"offset":10391},"end":{"line":449,"column":35,"offset":10425},"indent":[]}}],"position":{"start":{"line":449,"column":1,"offset":10391},"end":{"line":449,"column":35,"offset":10425},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$obj = new stdClass;\nassertThat($obj, objectValue());","position":{"start":{"line":450,"column":1,"offset":10426},"end":{"line":453,"column":4,"offset":10490},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"anObject","position":{"start":{"line":454,"column":3,"offset":10493},"end":{"line":454,"column":13,"offset":10503},"indent":[]}}],"position":{"start":{"line":454,"column":3,"offset":10493},"end":{"line":454,"column":13,"offset":10503},"indent":[]}}],"position":{"start":{"line":454,"column":1,"offset":10491},"end":{"line":454,"column":13,"offset":10503},"indent":[]}}],"position":{"start":{"line":454,"column":1,"offset":10491},"end":{"line":454,"column":13,"offset":10503},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat($obj, anObject());","position":{"start":{"line":455,"column":1,"offset":10504},"end":{"line":457,"column":4,"offset":10544},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"resourceValue","position":{"start":{"line":459,"column":3,"offset":10548},"end":{"line":459,"column":18,"offset":10563},"indent":[]}},{"type":"text","value":" - check resource type","position":{"start":{"line":459,"column":18,"offset":10563},"end":{"line":459,"column":40,"offset":10585},"indent":[]}}],"position":{"start":{"line":459,"column":3,"offset":10548},"end":{"line":459,"column":40,"offset":10585},"indent":[]}}],"position":{"start":{"line":459,"column":1,"offset":10546},"end":{"line":459,"column":40,"offset":10585},"indent":[]}}],"position":{"start":{"line":459,"column":1,"offset":10546},"end":{"line":459,"column":40,"offset":10585},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$fp = fopen(\"/tmp/foo\", \"w+\");\nassertThat($fp, resourceValue());","position":{"start":{"line":460,"column":1,"offset":10586},"end":{"line":463,"column":4,"offset":10661},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"scalarValue","position":{"start":{"line":465,"column":3,"offset":10665},"end":{"line":465,"column":16,"offset":10678},"indent":[]}},{"type":"text","value":" - check for scaler value","position":{"start":{"line":465,"column":16,"offset":10678},"end":{"line":465,"column":41,"offset":10703},"indent":[]}}],"position":{"start":{"line":465,"column":3,"offset":10665},"end":{"line":465,"column":41,"offset":10703},"indent":[]}}],"position":{"start":{"line":465,"column":1,"offset":10663},"end":{"line":465,"column":41,"offset":10703},"indent":[]}}],"position":{"start":{"line":465,"column":1,"offset":10663},"end":{"line":465,"column":41,"offset":10703},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(1, scalarValue());","position":{"start":{"line":466,"column":1,"offset":10704},"end":{"line":468,"column":4,"offset":10744},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"stringValue","position":{"start":{"line":470,"column":3,"offset":10748},"end":{"line":470,"column":16,"offset":10761},"indent":[]}}],"position":{"start":{"line":470,"column":3,"offset":10748},"end":{"line":470,"column":16,"offset":10761},"indent":[]}}],"position":{"start":{"line":470,"column":1,"offset":10746},"end":{"line":470,"column":16,"offset":10761},"indent":[]}}],"position":{"start":{"line":470,"column":1,"offset":10746},"end":{"line":470,"column":16,"offset":10761},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"assertThat(\"\", stringValue());","position":{"start":{"line":471,"column":1,"offset":10762},"end":{"line":473,"column":4,"offset":10803},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"XML","position":{"start":{"line":475,"column":5,"offset":10809},"end":{"line":475,"column":8,"offset":10812},"indent":[]}}],"position":{"start":{"line":475,"column":1,"offset":10805},"end":{"line":475,"column":8,"offset":10812},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"hasXPath","position":{"start":{"line":477,"column":3,"offset":10816},"end":{"line":477,"column":13,"offset":10826},"indent":[]}},{"type":"text","value":" - check xml with a xpath","position":{"start":{"line":477,"column":13,"offset":10826},"end":{"line":477,"column":38,"offset":10851},"indent":[]}}],"position":{"start":{"line":477,"column":3,"offset":10816},"end":{"line":477,"column":38,"offset":10851},"indent":[]}}],"position":{"start":{"line":477,"column":1,"offset":10814},"end":{"line":477,"column":38,"offset":10851},"indent":[]}}],"position":{"start":{"line":477,"column":1,"offset":10814},"end":{"line":477,"column":38,"offset":10851},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$xml = <<<XML\n<books>\n  <book>\n    <isbn>1</isbn>   \n  </book>\n  <book>\n    <isbn>2</isbn>   \n  </book>\n</books>\nXML;\n\n$doc = new DOMDocument;\n$doc->loadXML($xml);\nassertThat($doc, hasXPath(\"book\", 2));","position":{"start":{"line":478,"column":1,"offset":10852},"end":{"line":493,"column":4,"offset":11065},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":497,"column":1,"offset":11069},"end":{"line":497,"column":31,"offset":11099},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":497,"column":31,"offset":11099}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"this-is-the-php-port-of-hamcrest-matchers\"\n    }}>{`This is the PHP port of Hamcrest Matchers`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://travis-ci.org/hamcrest/hamcrest-php\"\n      }}><img alt=\"Build Status\" src=\"https://travis-ci.org/hamcrest/hamcrest-php.png?branch=master\" /></a></p>\n    <p>{`Hamcrest is a matching library originally written for Java, but\nsubsequently ported to many other languages.  hamcrest-php is the\nofficial PHP port of Hamcrest and essentially follows a literal\ntranslation of the original Java API for Hamcrest, with a few\nExceptions, mostly down to PHP language barriers:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`instanceOf($theClass)`}</inlineCode>{` is actually `}<inlineCode parentName=\"p\">{`anInstanceOf($theClass)`}</inlineCode></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`both(containsString('a'))->and(containsString('b'))`}</inlineCode>{`\nis actually `}<inlineCode parentName=\"p\">{`both(containsString('a'))->andAlso(containsString('b'))`}</inlineCode></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`either(containsString('a'))->or(containsString('b'))`}</inlineCode>{`\nis actually `}<inlineCode parentName=\"p\">{`either(containsString('a'))->orElse(containsString('b'))`}</inlineCode></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Unless it would be non-semantic for a matcher to do so, hamcrest-php\nallows dynamic typing for it's input, in \"the PHP way\". Exception are\nwhere semantics surrounding the type itself would suggest otherwise,\nsuch as stringContains() and greaterThan().`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Several official matchers have not been ported because they don't\nmake sense or don't apply in PHP:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`typeCompatibleWith($theClass)`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`eventFrom($source)`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hasProperty($name)`}</inlineCode>{` **`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`samePropertyValuesAs($obj)`}</inlineCode>{` **`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`When most of the collections matchers are finally ported, PHP-specific\naliases will probably be created due to a difference in naming\nconventions between Java's Arrays, Collections, Sets and Maps compared\nwith PHP's Arrays.`}</p>\n      </li>\n    </ol>\n    <hr></hr>\n    <p>{`** `}{`[Unless we consider POPO's (Plain Old PHP Objects) akin to JavaBeans]`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` - The POPO thing is a joke.  Java devs coin the term POJO's (Plain Old\n   Java Objects).\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Hamcrest matchers are easy to use as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Hamcrest_MatcherAssert::assertThat('a', Hamcrest_Matchers::equalToIgnoringCase('A'));\n`}</code></pre>\n    <p>{`Alternatively, you can use the global proxy-functions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$result = true;\n// with an identifier\nassertThat(\"result should be true\", $result, equalTo(true));\n\n// without an identifier\nassertThat($result, equalTo(true));\n\n// evaluate a boolean expression\nassertThat($result === true);\n\n// with syntactic sugar is()\nassertThat(true, is(true));\n`}</code></pre>\n    <p>{`:warning: `}<strong parentName=\"p\">{`NOTE:`}</strong>{` the global proxy-functions aren't autoloaded by default, so you will need to load them first:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\\\\Hamcrest\\\\Util::registerGlobalFunctions();\n`}</code></pre>\n    <p>{`For brevity, all of the examples below use the proxy-functions.`}</p>\n    <h2 {...{\n      \"id\": \"documentation\"\n    }}>{`Documentation`}</h2>\n    <p>{`A tutorial can be found on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://code.google.com/archive/p/hamcrest/wikis/TutorialPHP.wiki\"\n      }}>{`Hamcrest site`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"available-matchers\"\n    }}>{`Available Matchers`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../master/README.md#array\"\n        }}>{`Array`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../master/README.md#collection\"\n        }}>{`Collection`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../master/README.md#object\"\n        }}>{`Object`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../master/README.md#numbers\"\n        }}>{`Numbers`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../master/README.md#type-checking\"\n        }}>{`Type checking`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../master/README.md#xml\"\n        }}>{`XML`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"array\"\n    }}>{`Array`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`anArray`}</inlineCode>{` - evaluates an array`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([], anArray());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hasItemInArray`}</inlineCode>{` - check if item exists in array`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$list = range(2, 7, 2);\n$item = 4;\nassertThat($list, hasItemInArray($item));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`hasValue`}</inlineCode>{` - alias of hasItemInArray`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`arrayContainingInAnyOrder`}</inlineCode>{` - check if array contains elements in any order`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([2, 4, 6], arrayContainingInAnyOrder([6, 4, 2]));\nassertThat([2, 4, 6], arrayContainingInAnyOrder([4, 2, 6]));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`containsInAnyOrder`}</inlineCode>{` - alias of arrayContainingInAnyOrder`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`arrayContaining`}</inlineCode>{` - An array with elements that match the given matchers in the same order.`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([2, 4, 6], arrayContaining([2, 4, 6]));\nassertthat([2, 4, 6], not(arrayContaining([6, 4, 2])));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`contains`}</inlineCode>{` - check array in same order`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([2, 4, 6], contains([2, 4, 6]));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hasKeyInArray`}</inlineCode>{` - check if array has given key`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(['name'=> 'foobar'], hasKeyInArray('name'));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`hasKey`}</inlineCode>{` - alias of hasKeyInArray`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`hasKeyValuePair`}</inlineCode>{` - check if arary has given key, value pair`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(['name'=> 'foobar'], hasKeyValuePair('name', 'foobar'));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`hasEntry`}</inlineCode>{` - same as hasKeyValuePair`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`arrayWithSize`}</inlineCode>{` - check array has given size`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertthat([2, 4, 6], arrayWithSize(3));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`emptyArray`}</inlineCode>{` - check if array is emtpy`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([], emptyArray());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`nonEmptyArray`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([1], nonEmptyArray());\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"collection\"\n    }}>{`Collection`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`emptyTraversable`}</inlineCode>{` - check if traversable is empty`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$empty_it = new EmptyIterator;\nassertThat($empty_it, emptyTraversable());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`nonEmptyTraversable`}</inlineCode>{` - check if traversable isn't empty`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$non_empty_it = new ArrayIterator(range(1, 10));\nassertThat($non_empty_it, nonEmptyTraversable());\na\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`traversableWithSize`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$non_empty_it = new ArrayIterator(range(1, 10));\nassertThat($non_empty_it, traversableWithSize(count(range(1, 10))));\n\\`\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"core\"\n    }}>{`Core`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`allOf`}</inlineCode>{` - Evaluates to true only if ALL of the passed in matchers evaluate to true.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([2,4,6], allOf(hasValue(2), arrayWithSize(3)));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`anyOf`}</inlineCode>{` - Evaluates to true if ANY of the passed in matchers evaluate to true.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([2, 4, 6], anyOf(hasValue(8), hasValue(2)));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`noneOf`}</inlineCode>{` - Evaluates to false if ANY of the passed in matchers evaluate to true.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([2, 4, 6], noneOf(hasValue(1), hasValue(3)));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`both`}</inlineCode>{` + `}<inlineCode parentName=\"li\">{`andAlso`}</inlineCode>{` - This is useful for fluently combining matchers that must both pass.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([2, 4, 6], both(hasValue(2))->andAlso(hasValue(4)));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`either`}</inlineCode>{` + `}<inlineCode parentName=\"li\">{`orElse`}</inlineCode>{` - This is useful for fluently combining matchers where either may pass,`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([2, 4, 6], either(hasValue(2))->orElse(hasValue(4)));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`describedAs`}</inlineCode>{` - Wraps an existing matcher and overrides the description when it fails.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$expected = \"Dog\";\n$found = null;\n// this assertion would result error message as Expected: is not null but: was null\n//assertThat(\"Expected {$expected}, got {$found}\", $found, is(notNullValue()));\n// and this assertion would result error message as Expected: Dog but: was null\n//assertThat($found, describedAs($expected, notNullValue()));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`everyItem`}</inlineCode>{` - A matcher to apply to every element in an array.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([2, 4, 6], everyItem(notNullValue()));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hasItem`}</inlineCode>{` - check array has given item, it can take a matcher argument`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([2, 4, 6], hasItem(equalTo(2)));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hasItems`}</inlineCode>{` - check array has givem items, it can take multiple matcher as arguments`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([1, 3, 5], hasItems(equalTo(1), equalTo(3)));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"object\"\n    }}>{`Object`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hasToString`}</inlineCode>{` - check `}<inlineCode parentName=\"li\">{`__toString`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`toString`}</inlineCode>{` method`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class Foo {\n    public $name = null;\n\n    public function __toString() {\n        return \"[Foo]Instance\";\n    }\n}\n$foo = new Foo;\nassertThat($foo, hasToString(equalTo(\"[Foo]Instance\")));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`equalTo`}</inlineCode>{` - compares two instances using comparison operator '=='`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$foo = new Foo;\n$foo2 = new Foo;\nassertThat($foo, equalTo($foo2));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`identicalTo`}</inlineCode>{` - compares two instances using identity operator '==='`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat($foo, is(not(identicalTo($foo2))));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`anInstanceOf`}</inlineCode>{` - check instance is an instance|sub-class of given class`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat($foo, anInstanceOf(Foo::class));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`any`}</inlineCode>{` - alias of `}<inlineCode parentName=\"p\">{`anInstanceOf`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`nullValue`}</inlineCode>{` check null`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(null, is(nullValue()));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`notNullValue`}</inlineCode>{` check not null`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"\", notNullValue());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sameInstance`}</inlineCode>{` - check for same instance`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat($foo, is(not(sameInstance($foo2))));\nassertThat($foo, is(sameInstance($foo)));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`typeOf`}</inlineCode>{`- check type`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(1, typeOf(\"integer\"));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`notSet`}</inlineCode>{` - check if instance property is not set`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat($foo, notSet(\"name\"));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`set`}</inlineCode>{` - check if instance property is set`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$foo->name = \"bar\";\nassertThat($foo, set(\"name\"));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"numbers\"\n    }}>{`Numbers`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`closeTo`}</inlineCode>{` - check value close to a range`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(3, closeTo(3, 0.5));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`comparesEqualTo`}</inlineCode>{` - check with '=='`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(2, comparesEqualTo(2));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`greaterThan`}</inlineCode>{` - check '>'`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`assertThat(2, greaterThan(1));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`greaterThanOrEqualTo`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(2, greaterThanOrEqualTo(2));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`atLeast`}</inlineCode>{` - The value is >= given value`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(3, atLeast(2));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`lessThan`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(2, lessThan(3));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`lessThanOrEqualTo`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(2, lessThanOrEqualTo(3));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`atMost`}</inlineCode>{` - The value is <= given value`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(2, atMost(3));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"string\"\n    }}>{`String`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`emptyString`}</inlineCode>{` - check for empty string`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"\", emptyString());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isEmptyOrNullString`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(null, isEmptyOrNullString());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`nullOrEmptyString`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"\", nullOrEmptyString());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isNonEmptyString`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"foo\", isNonEmptyString());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`nonEmptyString`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"foo\", nonEmptyString());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`equalToIgnoringCase`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"Foo\", equalToIgnoringCase(\"foo\"));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`equalToIgnoringWhiteSpace`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\" Foo \", equalToIgnoringWhiteSpace(\"Foo\"));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`matchesPattern`}</inlineCode>{` - matches with regex pattern`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"foobarbaz\", matchesPattern('/(foo)(bar)(baz)/'));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`containsString`}</inlineCode>{` - check for substring`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"foobar\", containsString(\"foo\"));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`containsStringIgnoringCase`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"fooBar\", containsStringIgnoringCase(\"bar\"));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stringContainsInOrder`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"foo\", stringContainsInOrder(\"foo\"));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`endsWith`}</inlineCode>{` - check string that ends with given value`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"foo\", endsWith(\"oo\"));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`startsWith`}</inlineCode>{` - check string that starts with given value`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"bar\", startsWith(\"ba\"));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type-checking\"\n    }}>{`Type-checking`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`arrayValue`}</inlineCode>{` - check array type`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat([], arrayValue());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`booleanValue`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(true, booleanValue());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`boolValue`}</inlineCode>{` - alias of booleanValue`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`callableValue`}</inlineCode>{` - check if value is callable`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$func = function () {};\nassertThat($func, callableValue());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`doubleValue`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(3.14, doubleValue());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`floatValue`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(3.14, floatValue());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`integerValue`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(1, integerValue());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`intValue`}</inlineCode>{` - alias of `}<inlineCode parentName=\"p\">{`integerValue`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`numericValue`}</inlineCode>{` - check if value is numeric`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"123\", numericValue());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`objectValue`}</inlineCode>{` - check for object`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$obj = new stdClass;\nassertThat($obj, objectValue());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`anObject`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat($obj, anObject());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`resourceValue`}</inlineCode>{` - check resource type`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$fp = fopen(\"/tmp/foo\", \"w+\");\nassertThat($fp, resourceValue());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`scalarValue`}</inlineCode>{` - check for scaler value`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(1, scalarValue());\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stringValue`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`assertThat(\"\", stringValue());\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"xml\"\n    }}>{`XML`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hasXPath`}</inlineCode>{` - check xml with a xpath`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$xml = <<<XML\n<books>\n  <book>\n    <isbn>1</isbn>   \n  </book>\n  <book>\n    <isbn>2</isbn>   \n  </book>\n</books>\nXML;\n\n$doc = new DOMDocument;\n$doc->loadXML($xml);\nassertThat($doc, hasXPath(\"book\", 2));\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}