{"expireTime":9007200985218083000,"key":"gatsby-plugin-mdx-entire-payload-634baa1670983be9c7584d1550ac393d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":109,"offset":110},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":112},"end":{"line":5,"column":29,"offset":140},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"PSR-7 Usage","position":{"start":{"line":7,"column":5,"offset":146},"end":{"line":7,"column":16,"offset":157},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":7,"column":16,"offset":157},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All PSR-7 applications comply with these interfaces \nThey were created to establish a standard between middleware implementations.","position":{"start":{"line":9,"column":1,"offset":159},"end":{"line":10,"column":78,"offset":289},"indent":[1]}}],"position":{"start":{"line":9,"column":1,"offset":159},"end":{"line":10,"column":78,"offset":289},"indent":[1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"RequestInterface","position":{"start":{"line":12,"column":3,"offset":293},"end":{"line":12,"column":21,"offset":311},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":12,"column":21,"offset":311},"end":{"line":12,"column":23,"offset":313},"indent":[]}},{"type":"inlineCode","value":"ServerRequestInterface","position":{"start":{"line":12,"column":23,"offset":313},"end":{"line":12,"column":47,"offset":337},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":12,"column":47,"offset":337},"end":{"line":12,"column":49,"offset":339},"indent":[]}},{"type":"inlineCode","value":"ResponseInterface","position":{"start":{"line":12,"column":49,"offset":339},"end":{"line":12,"column":68,"offset":358},"indent":[]}},{"type":"text","value":" extend ","position":{"start":{"line":12,"column":68,"offset":358},"end":{"line":12,"column":76,"offset":366},"indent":[]}},{"type":"inlineCode","value":"MessageInterface","position":{"start":{"line":12,"column":76,"offset":366},"end":{"line":12,"column":94,"offset":384},"indent":[]}},{"type":"text","value":"  because the ","position":{"start":{"line":12,"column":94,"offset":384},"end":{"line":12,"column":108,"offset":398},"indent":[]}},{"type":"inlineCode","value":"Request","position":{"start":{"line":12,"column":108,"offset":398},"end":{"line":12,"column":117,"offset":407},"indent":[]}},{"type":"text","value":" and the ","position":{"start":{"line":12,"column":117,"offset":407},"end":{"line":12,"column":126,"offset":416},"indent":[]}},{"type":"inlineCode","value":"Response","position":{"start":{"line":12,"column":126,"offset":416},"end":{"line":12,"column":136,"offset":426},"indent":[]}},{"type":"text","value":" are ","position":{"start":{"line":12,"column":136,"offset":426},"end":{"line":12,"column":141,"offset":431},"indent":[]}},{"type":"inlineCode","value":"HTTP Messages","position":{"start":{"line":12,"column":141,"offset":431},"end":{"line":12,"column":156,"offset":446},"indent":[]}},{"type":"text","value":".\nWhen using ","position":{"start":{"line":12,"column":156,"offset":446},"end":{"line":13,"column":14,"offset":461},"indent":[3]}},{"type":"inlineCode","value":"ServerRequestInterface","position":{"start":{"line":13,"column":14,"offset":461},"end":{"line":13,"column":38,"offset":485},"indent":[]}},{"type":"text","value":", both ","position":{"start":{"line":13,"column":38,"offset":485},"end":{"line":13,"column":45,"offset":492},"indent":[]}},{"type":"inlineCode","value":"RequestInterface","position":{"start":{"line":13,"column":45,"offset":492},"end":{"line":13,"column":63,"offset":510},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":13,"column":63,"offset":510},"end":{"line":13,"column":68,"offset":515},"indent":[]}},{"type":"inlineCode","value":"Psr\\Http\\Message\\MessageInterface","position":{"start":{"line":13,"column":68,"offset":515},"end":{"line":13,"column":103,"offset":550},"indent":[]}},{"type":"text","value":" methods are considered.","position":{"start":{"line":13,"column":103,"offset":550},"end":{"line":13,"column":127,"offset":574},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":293},"end":{"line":13,"column":127,"offset":574},"indent":[3]}}],"position":{"start":{"line":12,"column":1,"offset":291},"end":{"line":13,"column":127,"offset":574},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The following examples will illustrate how basic operations are done in PSR-7.","position":{"start":{"line":16,"column":1,"offset":577},"end":{"line":16,"column":79,"offset":655},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":577},"end":{"line":16,"column":79,"offset":655},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"Examples","position":{"start":{"line":18,"column":7,"offset":663},"end":{"line":18,"column":15,"offset":671},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":657},"end":{"line":18,"column":15,"offset":671},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For this examples to work (at least) a PSR-7 implementation package is required. (eg: zendframework/zend-diactoros, guzzlehttp/psr7, slim/slim, etc)\nAll PSR-7 implementations should have the same behaviour.","position":{"start":{"line":21,"column":1,"offset":674},"end":{"line":22,"column":58,"offset":880},"indent":[1]}}],"position":{"start":{"line":21,"column":1,"offset":674},"end":{"line":22,"column":58,"offset":880},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The following will be assumed: \n","position":{"start":{"line":24,"column":1,"offset":882},"end":{"line":25,"column":1,"offset":914},"indent":[1]}},{"type":"inlineCode","value":"$request","position":{"start":{"line":25,"column":1,"offset":914},"end":{"line":25,"column":11,"offset":924},"indent":[]}},{"type":"text","value":" is an object of ","position":{"start":{"line":25,"column":11,"offset":924},"end":{"line":25,"column":28,"offset":941},"indent":[]}},{"type":"inlineCode","value":"Psr\\Http\\Message\\RequestInterface","position":{"start":{"line":25,"column":28,"offset":941},"end":{"line":25,"column":63,"offset":976},"indent":[]}},{"type":"text","value":" and","position":{"start":{"line":25,"column":63,"offset":976},"end":{"line":25,"column":67,"offset":980},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":882},"end":{"line":25,"column":67,"offset":980},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"$response","position":{"start":{"line":27,"column":1,"offset":982},"end":{"line":27,"column":12,"offset":993},"indent":[]}},{"type":"text","value":" is an object implementing ","position":{"start":{"line":27,"column":12,"offset":993},"end":{"line":27,"column":39,"offset":1020},"indent":[]}},{"type":"inlineCode","value":"Psr\\Http\\Message\\RequestInterface","position":{"start":{"line":27,"column":39,"offset":1020},"end":{"line":27,"column":74,"offset":1055},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":982},"end":{"line":27,"column":74,"offset":1055},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Working with HTTP Headers","position":{"start":{"line":30,"column":5,"offset":1062},"end":{"line":30,"column":30,"offset":1087},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1058},"end":{"line":30,"column":30,"offset":1087},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Adding headers to response:","position":{"start":{"line":32,"column":6,"offset":1094},"end":{"line":32,"column":33,"offset":1121},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1089},"end":{"line":32,"column":33,"offset":1121},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$response->withHeader('My-Custom-Header', 'My Custom Message');","position":{"start":{"line":34,"column":1,"offset":1123},"end":{"line":36,"column":4,"offset":1197},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Appending values to headers","position":{"start":{"line":38,"column":6,"offset":1204},"end":{"line":38,"column":33,"offset":1231},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1199},"end":{"line":38,"column":33,"offset":1231},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$response->withAddedHeader('My-Custom-Header', 'The second message');","position":{"start":{"line":40,"column":1,"offset":1233},"end":{"line":42,"column":4,"offset":1313},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Checking if header exists:","position":{"start":{"line":44,"column":6,"offset":1320},"end":{"line":44,"column":32,"offset":1346},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1315},"end":{"line":44,"column":32,"offset":1346},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$request->hasHeader('My-Custom-Header'); // will return false\n$response->hasHeader('My-Custom-Header'); // will return true","position":{"start":{"line":46,"column":1,"offset":1348},"end":{"line":49,"column":4,"offset":1482},"indent":[1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Note: My-Custom-Header was only added in the Response","position":{"start":{"line":51,"column":3,"offset":1486},"end":{"line":51,"column":56,"offset":1539},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":1486},"end":{"line":51,"column":56,"offset":1539},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1484},"end":{"line":51,"column":56,"offset":1539},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Getting comma-separated values from a header (also applies to request)","position":{"start":{"line":53,"column":6,"offset":1546},"end":{"line":53,"column":76,"offset":1616},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1541},"end":{"line":53,"column":76,"offset":1616},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// getting value from request headers\n$request->getHeaderLine('Content-Type'); // will return: \"text/html; charset=UTF-8\"\n// getting value from response headers\n$response->getHeaderLine('My-Custom-Header'); // will return:  \"My Custom Message; The second message\"","position":{"start":{"line":55,"column":1,"offset":1618},"end":{"line":60,"column":4,"offset":1892},"indent":[1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Getting array of value from a header (also applies to request)","position":{"start":{"line":62,"column":6,"offset":1899},"end":{"line":62,"column":68,"offset":1961},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1894},"end":{"line":62,"column":68,"offset":1961},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// getting value from request headers\n$request->getHeader('Content-Type'); // will return: [\"text/html\", \"charset=UTF-8\"]\n// getting value from response headers\n$response->getHeader('My-Custom-Header'); // will return:  [\"My Custom Message\",  \"The second message\"]","position":{"start":{"line":63,"column":1,"offset":1962},"end":{"line":68,"column":4,"offset":2237},"indent":[1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Removing headers from HTTP Messages","position":{"start":{"line":70,"column":6,"offset":2244},"end":{"line":70,"column":41,"offset":2279},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2239},"end":{"line":70,"column":41,"offset":2279},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// removing a header from Request, removing deprecated \"Content-MD5\" header\n$request->withoutHeader('Content-MD5'); \n\n// removing a header from Response\n// effect: the browser won't know the size of the stream\n// the browser will download the stream till it ends\n$response->withoutHeader('Content-Length');","position":{"start":{"line":71,"column":1,"offset":2280},"end":{"line":79,"column":4,"offset":2597},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Working with HTTP Message Body","position":{"start":{"line":81,"column":5,"offset":2603},"end":{"line":81,"column":35,"offset":2633},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2599},"end":{"line":81,"column":35,"offset":2633},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When working with the PSR-7 there are two methods of implementation:","position":{"start":{"line":83,"column":1,"offset":2635},"end":{"line":83,"column":69,"offset":2703},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2635},"end":{"line":83,"column":69,"offset":2703},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"1. Getting the body separately","position":{"start":{"line":84,"column":6,"offset":2709},"end":{"line":84,"column":36,"offset":2739},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2704},"end":{"line":84,"column":36,"offset":2739},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"This method makes the body handling easier to understand and is useful when repeatedly calling body methods. (You only call ","position":{"start":{"line":86,"column":3,"offset":2743},"end":{"line":86,"column":127,"offset":2867},"indent":[]}},{"type":"inlineCode","value":"getBody()","position":{"start":{"line":86,"column":127,"offset":2867},"end":{"line":86,"column":138,"offset":2878},"indent":[]}},{"type":"text","value":" once). Using this method mistakes like ","position":{"start":{"line":86,"column":138,"offset":2878},"end":{"line":86,"column":178,"offset":2918},"indent":[]}},{"type":"inlineCode","value":"$response->write()","position":{"start":{"line":86,"column":178,"offset":2918},"end":{"line":86,"column":198,"offset":2938},"indent":[]}},{"type":"text","value":" are also prevented.","position":{"start":{"line":86,"column":198,"offset":2938},"end":{"line":86,"column":218,"offset":2958},"indent":[]}}],"position":{"start":{"line":86,"column":3,"offset":2743},"end":{"line":86,"column":218,"offset":2958},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2741},"end":{"line":86,"column":218,"offset":2958},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$body = $response->getBody();\n// operations on body, eg. read, write, seek\n// ...\n// replacing the old body\n$response->withBody($body); \n// this last statement is optional as we working with objects\n// in this case the \"new\" body is same with the \"old\" one\n// the $body variable has the same value as the one in $request, only the reference is passed","position":{"start":{"line":88,"column":1,"offset":2960},"end":{"line":97,"column":4,"offset":3321},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"2. Working directly on response","position":{"start":{"line":99,"column":6,"offset":3328},"end":{"line":99,"column":37,"offset":3359},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":3323},"end":{"line":99,"column":37,"offset":3359},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"This method is useful when only performing few operations as the ","position":{"start":{"line":101,"column":3,"offset":3363},"end":{"line":101,"column":68,"offset":3428},"indent":[]}},{"type":"inlineCode","value":"$request->getBody()","position":{"start":{"line":101,"column":68,"offset":3428},"end":{"line":101,"column":89,"offset":3449},"indent":[]}},{"type":"text","value":" statement fragment is required","position":{"start":{"line":101,"column":89,"offset":3449},"end":{"line":101,"column":120,"offset":3480},"indent":[]}}],"position":{"start":{"line":101,"column":3,"offset":3363},"end":{"line":101,"column":120,"offset":3480},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":3361},"end":{"line":101,"column":120,"offset":3480},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$response->getBody()->write('hello');","position":{"start":{"line":103,"column":1,"offset":3482},"end":{"line":105,"column":4,"offset":3530},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Getting the body contents","position":{"start":{"line":107,"column":5,"offset":3536},"end":{"line":107,"column":30,"offset":3561},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3532},"end":{"line":107,"column":30,"offset":3561},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following snippet gets the contents of a stream contents.","position":{"start":{"line":109,"column":1,"offset":3563},"end":{"line":109,"column":62,"offset":3624},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":3563},"end":{"line":109,"column":62,"offset":3624},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Note: Streams must be rewinded, if content was written into streams, it will be ignored when calling ","position":{"start":{"line":110,"column":3,"offset":3627},"end":{"line":110,"column":104,"offset":3728},"indent":[]}},{"type":"inlineCode","value":"getContents()","position":{"start":{"line":110,"column":104,"offset":3728},"end":{"line":110,"column":119,"offset":3743},"indent":[]}},{"type":"text","value":" because the stream pointer is set to the last character, which is ","position":{"start":{"line":110,"column":119,"offset":3743},"end":{"line":110,"column":186,"offset":3810},"indent":[]}},{"type":"inlineCode","value":"\\0","position":{"start":{"line":110,"column":186,"offset":3810},"end":{"line":110,"column":190,"offset":3814},"indent":[]}},{"type":"text","value":" - meaning end of stream.","position":{"start":{"line":110,"column":190,"offset":3814},"end":{"line":110,"column":215,"offset":3839},"indent":[]}}],"position":{"start":{"line":110,"column":3,"offset":3627},"end":{"line":110,"column":215,"offset":3839},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$body = $response->getBody();\n$body->rewind(); // or $body->seek(0);\n$bodyText = $body->getContents();","position":{"start":{"line":111,"column":1,"offset":3840},"end":{"line":115,"column":4,"offset":3954},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note: If ","position":{"start":{"line":116,"column":3,"offset":3957},"end":{"line":116,"column":12,"offset":3966},"indent":[]}},{"type":"inlineCode","value":"$body->seek(1)","position":{"start":{"line":116,"column":12,"offset":3966},"end":{"line":116,"column":28,"offset":3982},"indent":[]}},{"type":"text","value":" is called before ","position":{"start":{"line":116,"column":28,"offset":3982},"end":{"line":116,"column":46,"offset":4000},"indent":[]}},{"type":"inlineCode","value":"$body->getContents()","position":{"start":{"line":116,"column":46,"offset":4000},"end":{"line":116,"column":68,"offset":4022},"indent":[]}},{"type":"text","value":", the first character will be ommited as the starting pointer is set to ","position":{"start":{"line":116,"column":68,"offset":4022},"end":{"line":116,"column":140,"offset":4094},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":116,"column":140,"offset":4094},"end":{"line":116,"column":143,"offset":4097},"indent":[]}},{"type":"text","value":", not ","position":{"start":{"line":116,"column":143,"offset":4097},"end":{"line":116,"column":149,"offset":4103},"indent":[]}},{"type":"inlineCode","value":"0","position":{"start":{"line":116,"column":149,"offset":4103},"end":{"line":116,"column":152,"offset":4106},"indent":[]}},{"type":"text","value":". This is why using ","position":{"start":{"line":116,"column":152,"offset":4106},"end":{"line":116,"column":172,"offset":4126},"indent":[]}},{"type":"inlineCode","value":"$body->rewind()","position":{"start":{"line":116,"column":172,"offset":4126},"end":{"line":116,"column":189,"offset":4143},"indent":[]}},{"type":"text","value":" is recommended.","position":{"start":{"line":116,"column":189,"offset":4143},"end":{"line":116,"column":205,"offset":4159},"indent":[]}}],"position":{"start":{"line":116,"column":3,"offset":3957},"end":{"line":116,"column":205,"offset":4159},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":3625},"end":{"line":116,"column":205,"offset":4159},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Append to body","position":{"start":{"line":118,"column":5,"offset":4165},"end":{"line":118,"column":19,"offset":4179},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":4161},"end":{"line":118,"column":19,"offset":4179},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$response->getBody()->write('Hello'); // writing directly\n$body = $request->getBody(); // which is a `StreamInterface`\n$body->write('xxxxx');","position":{"start":{"line":120,"column":1,"offset":4181},"end":{"line":124,"column":4,"offset":4333},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Prepend to body","position":{"start":{"line":126,"column":5,"offset":4339},"end":{"line":126,"column":20,"offset":4354},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4335},"end":{"line":126,"column":20,"offset":4354},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Prepending is different when it comes to streams. The content must be copied before writing the content to be prepended.\nThe following example will explain the behaviour of streams.","position":{"start":{"line":127,"column":1,"offset":4355},"end":{"line":128,"column":61,"offset":4536},"indent":[1]}}],"position":{"start":{"line":127,"column":1,"offset":4355},"end":{"line":128,"column":61,"offset":4536},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"// assuming our response is initially empty\n$body = $repsonse->getBody();\n// writing the string \"abcd\"\n$body->write('abcd');\n\n// seeking to start of stream\n$body->seek(0);\n// writing 'ef'\n$body->write('ef'); // at this point the stream contains \"efcd\"","position":{"start":{"line":130,"column":1,"offset":4538},"end":{"line":140,"column":4,"offset":4800},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Prepending by rewriting separately","position":{"start":{"line":142,"column":6,"offset":4807},"end":{"line":142,"column":40,"offset":4841},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":4802},"end":{"line":142,"column":40,"offset":4841},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// assuming our response body stream only contains: \"abcd\"\n$body = $response->getBody();\n$body->rewind();\n$contents = $body->getContents(); // abcd\n// seeking the stream to beginning\n$body->rewind();\n$body->write('ef'); // stream contains \"efcd\"\n$body->write($contents); // stream contains \"efabcd\"","position":{"start":{"line":144,"column":1,"offset":4843},"end":{"line":153,"column":4,"offset":5152},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Note: ","position":{"start":{"line":155,"column":3,"offset":5156},"end":{"line":155,"column":9,"offset":5162},"indent":[]}},{"type":"inlineCode","value":"getContents()","position":{"start":{"line":155,"column":9,"offset":5162},"end":{"line":155,"column":24,"offset":5177},"indent":[]}},{"type":"text","value":" seeks the stream while reading it, therefore if the second ","position":{"start":{"line":155,"column":24,"offset":5177},"end":{"line":155,"column":84,"offset":5237},"indent":[]}},{"type":"inlineCode","value":"rewind()","position":{"start":{"line":155,"column":84,"offset":5237},"end":{"line":155,"column":94,"offset":5247},"indent":[]}},{"type":"text","value":" method call was not present the stream would have resulted in ","position":{"start":{"line":155,"column":94,"offset":5247},"end":{"line":155,"column":157,"offset":5310},"indent":[]}},{"type":"inlineCode","value":"abcdefabcd","position":{"start":{"line":155,"column":157,"offset":5310},"end":{"line":155,"column":169,"offset":5322},"indent":[]}},{"type":"text","value":" because the ","position":{"start":{"line":155,"column":169,"offset":5322},"end":{"line":155,"column":182,"offset":5335},"indent":[]}},{"type":"inlineCode","value":"write()","position":{"start":{"line":155,"column":182,"offset":5335},"end":{"line":155,"column":191,"offset":5344},"indent":[]}},{"type":"text","value":" method appends to stream if not preceeded by ","position":{"start":{"line":155,"column":191,"offset":5344},"end":{"line":155,"column":237,"offset":5390},"indent":[]}},{"type":"inlineCode","value":"rewind()","position":{"start":{"line":155,"column":237,"offset":5390},"end":{"line":155,"column":247,"offset":5400},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":155,"column":247,"offset":5400},"end":{"line":155,"column":251,"offset":5404},"indent":[]}},{"type":"inlineCode","value":"seek(0)","position":{"start":{"line":155,"column":251,"offset":5404},"end":{"line":155,"column":260,"offset":5413},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":155,"column":260,"offset":5413},"end":{"line":155,"column":261,"offset":5414},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":5156},"end":{"line":155,"column":261,"offset":5414},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":5154},"end":{"line":155,"column":261,"offset":5414},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Prepending by using contents as a string","position":{"start":{"line":157,"column":6,"offset":5421},"end":{"line":157,"column":46,"offset":5461},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":5416},"end":{"line":157,"column":46,"offset":5461},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$body = $response->getBody();\n$body->rewind();\n$contents = $body->getContents(); // efabcd\n$contents = 'ef'.$contents;\n$body->rewind();\n$body->write($contents);","position":{"start":{"line":158,"column":1,"offset":5462},"end":{"line":165,"column":4,"offset":5633},"indent":[1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":168,"column":1,"offset":5636},"end":{"line":168,"column":31,"offset":5666},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":168,"column":31,"offset":5666}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h3 {...{\n      \"id\": \"psr-7-usage\"\n    }}>{`PSR-7 Usage`}</h3>\n    <p>{`All PSR-7 applications comply with these interfaces\nThey were created to establish a standard between middleware implementations.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`RequestInterface`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`ServerRequestInterface`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`ResponseInterface`}</inlineCode>{` extend `}<inlineCode parentName=\"p\">{`MessageInterface`}</inlineCode>{`  because the `}<inlineCode parentName=\"p\">{`Request`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`Response`}</inlineCode>{` are `}<inlineCode parentName=\"p\">{`HTTP Messages`}</inlineCode>{`.\nWhen using `}<inlineCode parentName=\"p\">{`ServerRequestInterface`}</inlineCode>{`, both `}<inlineCode parentName=\"p\">{`RequestInterface`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Psr\\\\Http\\\\Message\\\\MessageInterface`}</inlineCode>{` methods are considered.`}</p>\n    </blockquote>\n    <p>{`The following examples will illustrate how basic operations are done in PSR-7.`}</p>\n    <h5 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h5>\n    <p>{`For this examples to work (at least) a PSR-7 implementation package is required. (eg: zendframework/zend-diactoros, guzzlehttp/psr7, slim/slim, etc)\nAll PSR-7 implementations should have the same behaviour.`}</p>\n    <p>{`The following will be assumed:\n`}<inlineCode parentName=\"p\">{`$request`}</inlineCode>{` is an object of `}<inlineCode parentName=\"p\">{`Psr\\\\Http\\\\Message\\\\RequestInterface`}</inlineCode>{` and`}</p>\n    <p><inlineCode parentName=\"p\">{`$response`}</inlineCode>{` is an object implementing `}<inlineCode parentName=\"p\">{`Psr\\\\Http\\\\Message\\\\RequestInterface`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"working-with-http-headers\"\n    }}>{`Working with HTTP Headers`}</h3>\n    <h4 {...{\n      \"id\": \"adding-headers-to-response\"\n    }}>{`Adding headers to response:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$response->withHeader('My-Custom-Header', 'My Custom Message');\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"appending-values-to-headers\"\n    }}>{`Appending values to headers`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$response->withAddedHeader('My-Custom-Header', 'The second message');\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"checking-if-header-exists\"\n    }}>{`Checking if header exists:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$request->hasHeader('My-Custom-Header'); // will return false\n$response->hasHeader('My-Custom-Header'); // will return true\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: My-Custom-Header was only added in the Response`}</p>\n    </blockquote>\n    <h4 {...{\n      \"id\": \"getting-comma-separated-values-from-a-header-also-applies-to-request\"\n    }}>{`Getting comma-separated values from a header (also applies to request)`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// getting value from request headers\n$request->getHeaderLine('Content-Type'); // will return: \"text/html; charset=UTF-8\"\n// getting value from response headers\n$response->getHeaderLine('My-Custom-Header'); // will return:  \"My Custom Message; The second message\"\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"getting-array-of-value-from-a-header-also-applies-to-request\"\n    }}>{`Getting array of value from a header (also applies to request)`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// getting value from request headers\n$request->getHeader('Content-Type'); // will return: [\"text/html\", \"charset=UTF-8\"]\n// getting value from response headers\n$response->getHeader('My-Custom-Header'); // will return:  [\"My Custom Message\",  \"The second message\"]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"removing-headers-from-http-messages\"\n    }}>{`Removing headers from HTTP Messages`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// removing a header from Request, removing deprecated \"Content-MD5\" header\n$request->withoutHeader('Content-MD5'); \n\n// removing a header from Response\n// effect: the browser won't know the size of the stream\n// the browser will download the stream till it ends\n$response->withoutHeader('Content-Length');\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"working-with-http-message-body\"\n    }}>{`Working with HTTP Message Body`}</h3>\n    <p>{`When working with the PSR-7 there are two methods of implementation:`}</p>\n    <h4 {...{\n      \"id\": \"1-getting-the-body-separately\"\n    }}>{`1. Getting the body separately`}</h4>\n    <blockquote>\n      <p parentName=\"blockquote\">{`This method makes the body handling easier to understand and is useful when repeatedly calling body methods. (You only call `}<inlineCode parentName=\"p\">{`getBody()`}</inlineCode>{` once). Using this method mistakes like `}<inlineCode parentName=\"p\">{`$response->write()`}</inlineCode>{` are also prevented.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$body = $response->getBody();\n// operations on body, eg. read, write, seek\n// ...\n// replacing the old body\n$response->withBody($body); \n// this last statement is optional as we working with objects\n// in this case the \"new\" body is same with the \"old\" one\n// the $body variable has the same value as the one in $request, only the reference is passed\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"2-working-directly-on-response\"\n    }}>{`2. Working directly on response`}</h4>\n    <blockquote>\n      <p parentName=\"blockquote\">{`This method is useful when only performing few operations as the `}<inlineCode parentName=\"p\">{`$request->getBody()`}</inlineCode>{` statement fragment is required`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$response->getBody()->write('hello');\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"getting-the-body-contents\"\n    }}>{`Getting the body contents`}</h3>\n    <p>{`The following snippet gets the contents of a stream contents.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: Streams must be rewinded, if content was written into streams, it will be ignored when calling `}<inlineCode parentName=\"p\">{`getContents()`}</inlineCode>{` because the stream pointer is set to the last character, which is `}<inlineCode parentName=\"p\">{`\\\\0`}</inlineCode>{` - meaning end of stream.`}</p>\n      <pre parentName=\"blockquote\"><code parentName=\"pre\" {...{\n          \"className\": \"language-php\"\n        }}>{`$body = $response->getBody();\n$body->rewind(); // or $body->seek(0);\n$bodyText = $body->getContents();\n`}</code></pre>\n      <p parentName=\"blockquote\">{`Note: If `}<inlineCode parentName=\"p\">{`$body->seek(1)`}</inlineCode>{` is called before `}<inlineCode parentName=\"p\">{`$body->getContents()`}</inlineCode>{`, the first character will be ommited as the starting pointer is set to `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{`, not `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`. This is why using `}<inlineCode parentName=\"p\">{`$body->rewind()`}</inlineCode>{` is recommended.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"append-to-body\"\n    }}>{`Append to body`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$response->getBody()->write('Hello'); // writing directly\n$body = $request->getBody(); // which is a \\`StreamInterface\\`\n$body->write('xxxxx');\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"prepend-to-body\"\n    }}>{`Prepend to body`}</h3>\n    <p>{`Prepending is different when it comes to streams. The content must be copied before writing the content to be prepended.\nThe following example will explain the behaviour of streams.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// assuming our response is initially empty\n$body = $repsonse->getBody();\n// writing the string \"abcd\"\n$body->write('abcd');\n\n// seeking to start of stream\n$body->seek(0);\n// writing 'ef'\n$body->write('ef'); // at this point the stream contains \"efcd\"\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"prepending-by-rewriting-separately\"\n    }}>{`Prepending by rewriting separately`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// assuming our response body stream only contains: \"abcd\"\n$body = $response->getBody();\n$body->rewind();\n$contents = $body->getContents(); // abcd\n// seeking the stream to beginning\n$body->rewind();\n$body->write('ef'); // stream contains \"efcd\"\n$body->write($contents); // stream contains \"efabcd\"\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: `}<inlineCode parentName=\"p\">{`getContents()`}</inlineCode>{` seeks the stream while reading it, therefore if the second `}<inlineCode parentName=\"p\">{`rewind()`}</inlineCode>{` method call was not present the stream would have resulted in `}<inlineCode parentName=\"p\">{`abcdefabcd`}</inlineCode>{` because the `}<inlineCode parentName=\"p\">{`write()`}</inlineCode>{` method appends to stream if not preceeded by `}<inlineCode parentName=\"p\">{`rewind()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`seek(0)`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h4 {...{\n      \"id\": \"prepending-by-using-contents-as-a-string\"\n    }}>{`Prepending by using contents as a string`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$body = $response->getBody();\n$body->rewind();\n$contents = $body->getContents(); // efabcd\n$contents = 'ef'.$contents;\n$body->rewind();\n$body->write($contents);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}