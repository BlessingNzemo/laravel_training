{"expireTime":9007200985218091000,"key":"gatsby-plugin-mdx-entire-payload-d64e4759a73ff6a32f5f85b98c6d43dc-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":109,"offset":110},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":112},"end":{"line":5,"column":29,"offset":140},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Nette Schema","position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":7,"column":13,"offset":154},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":7,"column":13,"offset":154},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":8,"column":1,"offset":155},"end":{"line":8,"column":13,"offset":167},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://packagist.org/packages/nette/schema","children":[{"type":"image","title":null,"url":"https://img.shields.io/packagist/dm/nette/schema.svg","alt":"Downloads this Month","position":{"start":{"line":10,"column":2,"offset":170},"end":{"line":10,"column":79,"offset":247},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":169},"end":{"line":10,"column":125,"offset":293},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":10,"column":125,"offset":293},"end":{"line":11,"column":1,"offset":294},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/nette/schema/actions","children":[{"type":"image","title":null,"url":"https://github.com/nette/schema/workflows/Tests/badge.svg?branch=master","alt":"Tests","position":{"start":{"line":11,"column":2,"offset":295},"end":{"line":11,"column":83,"offset":376},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":294},"end":{"line":11,"column":125,"offset":418},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":11,"column":125,"offset":418},"end":{"line":12,"column":1,"offset":419},"indent":[1]}},{"type":"link","title":null,"url":"https://coveralls.io/github/nette/schema?branch=master","children":[{"type":"image","title":null,"url":"https://coveralls.io/repos/github/nette/schema/badge.svg?branch=master","alt":"Coverage Status","position":{"start":{"line":12,"column":2,"offset":420},"end":{"line":12,"column":92,"offset":510},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":419},"end":{"line":12,"column":149,"offset":567},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":12,"column":149,"offset":567},"end":{"line":13,"column":1,"offset":568},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/nette/schema/releases","children":[{"type":"image","title":null,"url":"https://poser.pugx.org/nette/schema/v/stable","alt":"Latest Stable Version","position":{"start":{"line":13,"column":2,"offset":569},"end":{"line":13,"column":72,"offset":639},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":568},"end":{"line":13,"column":115,"offset":682},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":115,"offset":682},"end":{"line":14,"column":1,"offset":683},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/nette/schema/blob/master/license.md","children":[{"type":"image","title":null,"url":"https://img.shields.io/badge/license-New%20BSD-blue.svg","alt":"License","position":{"start":{"line":14,"column":2,"offset":684},"end":{"line":14,"column":69,"offset":751},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":683},"end":{"line":14,"column":126,"offset":808},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":169},"end":{"line":14,"column":126,"offset":808},"indent":[1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Introduction","position":{"start":{"line":17,"column":1,"offset":811},"end":{"line":17,"column":13,"offset":823},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":811},"end":{"line":18,"column":13,"offset":836},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"A practical library for validation and normalization of data structures against a given schema with a smart & easy-to-understand API.","position":{"start":{"line":20,"column":1,"offset":838},"end":{"line":20,"column":134,"offset":971},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":838},"end":{"line":20,"column":134,"offset":971},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Documentation can be found on the ","position":{"start":{"line":22,"column":1,"offset":973},"end":{"line":22,"column":35,"offset":1007},"indent":[]}},{"type":"link","title":null,"url":"https://doc.nette.org/schema","children":[{"type":"text","value":"website","position":{"start":{"line":22,"column":36,"offset":1008},"end":{"line":22,"column":43,"offset":1015},"indent":[]}}],"position":{"start":{"line":22,"column":35,"offset":1007},"end":{"line":22,"column":74,"offset":1046},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":22,"column":74,"offset":1046},"end":{"line":22,"column":75,"offset":1047},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":973},"end":{"line":22,"column":75,"offset":1047},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Installation:","position":{"start":{"line":24,"column":1,"offset":1049},"end":{"line":24,"column":14,"offset":1062},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1049},"end":{"line":24,"column":14,"offset":1062},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"composer require nette/schema","position":{"start":{"line":26,"column":1,"offset":1064},"end":{"line":28,"column":4,"offset":1106},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It requires PHP version 8.1 and supports PHP up to 8.4.","position":{"start":{"line":30,"column":1,"offset":1108},"end":{"line":30,"column":56,"offset":1163},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1108},"end":{"line":30,"column":56,"offset":1163},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":null,"url":"https://github.com/sponsors/dg","children":[{"type":"text","value":"Support Me","position":{"start":{"line":33,"column":2,"offset":1167},"end":{"line":33,"column":12,"offset":1177},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1166},"end":{"line":33,"column":45,"offset":1210},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1166},"end":{"line":34,"column":45,"offset":1255},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Do you like Nette Schema? Are you looking forward to the new features?","position":{"start":{"line":36,"column":1,"offset":1257},"end":{"line":36,"column":71,"offset":1327},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1257},"end":{"line":36,"column":71,"offset":1327},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/sponsors/dg","children":[{"type":"image","title":null,"url":"https://files.nette.org/icons/donation-3.svg","alt":"Buy me a coffee","position":{"start":{"line":38,"column":2,"offset":1330},"end":{"line":38,"column":66,"offset":1394},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1329},"end":{"line":38,"column":99,"offset":1427},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1329},"end":{"line":38,"column":99,"offset":1427},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thank you!","position":{"start":{"line":40,"column":1,"offset":1429},"end":{"line":40,"column":11,"offset":1439},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1429},"end":{"line":40,"column":11,"offset":1439},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Basic Usage","position":{"start":{"line":43,"column":1,"offset":1442},"end":{"line":43,"column":12,"offset":1453},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1442},"end":{"line":44,"column":12,"offset":1465},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"In variable ","position":{"start":{"line":46,"column":1,"offset":1467},"end":{"line":46,"column":13,"offset":1479},"indent":[]}},{"type":"inlineCode","value":"$schema","position":{"start":{"line":46,"column":13,"offset":1479},"end":{"line":46,"column":22,"offset":1488},"indent":[]}},{"type":"text","value":" we have a validation schema (what exactly this means and how to create it we will say later) and in variable ","position":{"start":{"line":46,"column":22,"offset":1488},"end":{"line":46,"column":132,"offset":1598},"indent":[]}},{"type":"inlineCode","value":"$data","position":{"start":{"line":46,"column":132,"offset":1598},"end":{"line":46,"column":139,"offset":1605},"indent":[]}},{"type":"text","value":" we have a data structure that we want to validate and normalize. This can be, for example, data sent by the user through an API, configuration file, etc.","position":{"start":{"line":46,"column":139,"offset":1605},"end":{"line":46,"column":293,"offset":1759},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1467},"end":{"line":46,"column":293,"offset":1759},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The task is handled by the ","position":{"start":{"line":48,"column":1,"offset":1761},"end":{"line":48,"column":28,"offset":1788},"indent":[]}},{"type":"link","title":null,"url":"https://api.nette.org/schema/master/Nette/Schema/Processor.html","children":[{"type":"text","value":"Nette\\Schema\\Processor","position":{"start":{"line":48,"column":29,"offset":1789},"end":{"line":48,"column":51,"offset":1811},"indent":[]}}],"position":{"start":{"line":48,"column":28,"offset":1788},"end":{"line":48,"column":117,"offset":1877},"indent":[]}},{"type":"text","value":" class, which processes the input and either returns normalized data or throws an ","position":{"start":{"line":48,"column":117,"offset":1877},"end":{"line":48,"column":199,"offset":1959},"indent":[]}},{"type":"link","title":null,"url":"https://api.nette.org/schema/master/Nette/Schema/ValidationException.html","children":[{"type":"text","value":"Nette\\Schema\\ValidationException","position":{"start":{"line":48,"column":200,"offset":1960},"end":{"line":48,"column":232,"offset":1992},"indent":[]}}],"position":{"start":{"line":48,"column":199,"offset":1959},"end":{"line":48,"column":308,"offset":2068},"indent":[]}},{"type":"text","value":" exception on error.","position":{"start":{"line":48,"column":308,"offset":2068},"end":{"line":48,"column":328,"offset":2088},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1761},"end":{"line":48,"column":328,"offset":2088},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$processor = new Nette\\Schema\\Processor;\n\ntry {\n\t$normalized = $processor->process($schema, $data);\n} catch (Nette\\Schema\\ValidationException $e) {\n\techo 'Data is invalid: ' . $e->getMessage();\n}","position":{"start":{"line":50,"column":1,"offset":2090},"end":{"line":58,"column":4,"offset":2296},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Method ","position":{"start":{"line":60,"column":1,"offset":2298},"end":{"line":60,"column":8,"offset":2305},"indent":[]}},{"type":"inlineCode","value":"$e->getMessages()","position":{"start":{"line":60,"column":8,"offset":2305},"end":{"line":60,"column":27,"offset":2324},"indent":[]}},{"type":"text","value":" returns array of all message strings and ","position":{"start":{"line":60,"column":27,"offset":2324},"end":{"line":60,"column":69,"offset":2366},"indent":[]}},{"type":"inlineCode","value":"$e->getMessageObjects()","position":{"start":{"line":60,"column":69,"offset":2366},"end":{"line":60,"column":94,"offset":2391},"indent":[]}},{"type":"text","value":" return all messages as ","position":{"start":{"line":60,"column":94,"offset":2391},"end":{"line":60,"column":118,"offset":2415},"indent":[]}},{"type":"link","title":null,"url":"https://api.nette.org/schema/master/Nette/Schema/Message.html","children":[{"type":"text","value":"Nette\\Schema\\Message","position":{"start":{"line":60,"column":119,"offset":2416},"end":{"line":60,"column":139,"offset":2436},"indent":[]}}],"position":{"start":{"line":60,"column":118,"offset":2415},"end":{"line":60,"column":203,"offset":2500},"indent":[]}},{"type":"text","value":" objects.","position":{"start":{"line":60,"column":203,"offset":2500},"end":{"line":60,"column":212,"offset":2509},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2298},"end":{"line":60,"column":212,"offset":2509},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Defining Schema","position":{"start":{"line":63,"column":1,"offset":2512},"end":{"line":63,"column":16,"offset":2527},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":2512},"end":{"line":64,"column":16,"offset":2543},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"And now let's create a schema. The class ","position":{"start":{"line":66,"column":1,"offset":2545},"end":{"line":66,"column":42,"offset":2586},"indent":[]}},{"type":"link","title":null,"url":"https://api.nette.org/schema/master/Nette/Schema/Expect.html","children":[{"type":"text","value":"Nette\\Schema\\Expect","position":{"start":{"line":66,"column":43,"offset":2587},"end":{"line":66,"column":62,"offset":2606},"indent":[]}}],"position":{"start":{"line":66,"column":42,"offset":2586},"end":{"line":66,"column":125,"offset":2669},"indent":[]}},{"type":"text","value":" is used to define it, we actually define expectations of what the data should look like. Let's say that the input data must be a structure (e.g. an array) containing elements ","position":{"start":{"line":66,"column":125,"offset":2669},"end":{"line":66,"column":301,"offset":2845},"indent":[]}},{"type":"inlineCode","value":"processRefund","position":{"start":{"line":66,"column":301,"offset":2845},"end":{"line":66,"column":316,"offset":2860},"indent":[]}},{"type":"text","value":" of type bool and ","position":{"start":{"line":66,"column":316,"offset":2860},"end":{"line":66,"column":334,"offset":2878},"indent":[]}},{"type":"inlineCode","value":"refundAmount","position":{"start":{"line":66,"column":334,"offset":2878},"end":{"line":66,"column":348,"offset":2892},"indent":[]}},{"type":"text","value":" of type int.","position":{"start":{"line":66,"column":348,"offset":2892},"end":{"line":66,"column":361,"offset":2905},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2545},"end":{"line":66,"column":361,"offset":2905},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use Nette\\Schema\\Expect;\n\n$schema = Expect::structure([\n\t'processRefund' => Expect::bool(),\n\t'refundAmount' => Expect::int(),\n]);","position":{"start":{"line":68,"column":1,"offset":2907},"end":{"line":75,"column":4,"offset":3047},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We believe that the schema definition looks clear, even if you see it for the very first time.","position":{"start":{"line":77,"column":1,"offset":3049},"end":{"line":77,"column":95,"offset":3143},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":3049},"end":{"line":77,"column":95,"offset":3143},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lets send the following data for validation:","position":{"start":{"line":79,"column":1,"offset":3145},"end":{"line":79,"column":45,"offset":3189},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":3145},"end":{"line":79,"column":45,"offset":3189},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$data = [\n\t'processRefund' => true,\n\t'refundAmount' => 17,\n];\n\n$normalized = $processor->process($schema, $data); // OK, it passes","position":{"start":{"line":81,"column":1,"offset":3191},"end":{"line":88,"column":4,"offset":3332},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The output, i.e. the value ","position":{"start":{"line":90,"column":1,"offset":3334},"end":{"line":90,"column":28,"offset":3361},"indent":[]}},{"type":"inlineCode","value":"$normalized","position":{"start":{"line":90,"column":28,"offset":3361},"end":{"line":90,"column":41,"offset":3374},"indent":[]}},{"type":"text","value":", is the object ","position":{"start":{"line":90,"column":41,"offset":3374},"end":{"line":90,"column":57,"offset":3390},"indent":[]}},{"type":"inlineCode","value":"stdClass","position":{"start":{"line":90,"column":57,"offset":3390},"end":{"line":90,"column":67,"offset":3400},"indent":[]}},{"type":"text","value":". If we want the output to be an array, we add a cast to schema ","position":{"start":{"line":90,"column":67,"offset":3400},"end":{"line":90,"column":131,"offset":3464},"indent":[]}},{"type":"inlineCode","value":"Expect::structure([...])->castTo('array')","position":{"start":{"line":90,"column":131,"offset":3464},"end":{"line":90,"column":174,"offset":3507},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":90,"column":174,"offset":3507},"end":{"line":90,"column":175,"offset":3508},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":3334},"end":{"line":90,"column":175,"offset":3508},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All elements of the structure are optional and have a default value ","position":{"start":{"line":92,"column":1,"offset":3510},"end":{"line":92,"column":69,"offset":3578},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":92,"column":69,"offset":3578},"end":{"line":92,"column":75,"offset":3584},"indent":[]}},{"type":"text","value":". Example:","position":{"start":{"line":92,"column":75,"offset":3584},"end":{"line":92,"column":85,"offset":3594},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":3510},"end":{"line":92,"column":85,"offset":3594},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$data = [\n\t'refundAmount' => 17,\n];\n\n$normalized = $processor->process($schema, $data); // OK, it passes\n// $normalized = {'processRefund' => null, 'refundAmount' => 17}","position":{"start":{"line":94,"column":1,"offset":3596},"end":{"line":101,"column":4,"offset":3776},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The fact that the default value is ","position":{"start":{"line":103,"column":1,"offset":3778},"end":{"line":103,"column":36,"offset":3813},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":103,"column":36,"offset":3813},"end":{"line":103,"column":42,"offset":3819},"indent":[]}},{"type":"text","value":" does not mean that it would be accepted in the input data ","position":{"start":{"line":103,"column":42,"offset":3819},"end":{"line":103,"column":101,"offset":3878},"indent":[]}},{"type":"inlineCode","value":"'processRefund' => null","position":{"start":{"line":103,"column":101,"offset":3878},"end":{"line":103,"column":126,"offset":3903},"indent":[]}},{"type":"text","value":". No, the input must be boolean, i.e. only ","position":{"start":{"line":103,"column":126,"offset":3903},"end":{"line":103,"column":169,"offset":3946},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":103,"column":169,"offset":3946},"end":{"line":103,"column":175,"offset":3952},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":103,"column":175,"offset":3952},"end":{"line":103,"column":179,"offset":3956},"indent":[]}},{"type":"inlineCode","value":"false","position":{"start":{"line":103,"column":179,"offset":3956},"end":{"line":103,"column":186,"offset":3963},"indent":[]}},{"type":"text","value":". We would have to explicitly allow ","position":{"start":{"line":103,"column":186,"offset":3963},"end":{"line":103,"column":222,"offset":3999},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":103,"column":222,"offset":3999},"end":{"line":103,"column":228,"offset":4005},"indent":[]}},{"type":"text","value":" via ","position":{"start":{"line":103,"column":228,"offset":4005},"end":{"line":103,"column":233,"offset":4010},"indent":[]}},{"type":"inlineCode","value":"Expect::bool()->nullable()","position":{"start":{"line":103,"column":233,"offset":4010},"end":{"line":103,"column":261,"offset":4038},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":103,"column":261,"offset":4038},"end":{"line":103,"column":262,"offset":4039},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3778},"end":{"line":103,"column":262,"offset":4039},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An item can be made mandatory using ","position":{"start":{"line":105,"column":1,"offset":4041},"end":{"line":105,"column":37,"offset":4077},"indent":[]}},{"type":"inlineCode","value":"Expect::bool()->required()","position":{"start":{"line":105,"column":37,"offset":4077},"end":{"line":105,"column":65,"offset":4105},"indent":[]}},{"type":"text","value":". We change the default value to ","position":{"start":{"line":105,"column":65,"offset":4105},"end":{"line":105,"column":98,"offset":4138},"indent":[]}},{"type":"inlineCode","value":"false","position":{"start":{"line":105,"column":98,"offset":4138},"end":{"line":105,"column":105,"offset":4145},"indent":[]}},{"type":"text","value":" using ","position":{"start":{"line":105,"column":105,"offset":4145},"end":{"line":105,"column":112,"offset":4152},"indent":[]}},{"type":"inlineCode","value":"Expect::bool()->default(false)","position":{"start":{"line":105,"column":112,"offset":4152},"end":{"line":105,"column":144,"offset":4184},"indent":[]}},{"type":"text","value":" or shortly using ","position":{"start":{"line":105,"column":144,"offset":4184},"end":{"line":105,"column":162,"offset":4202},"indent":[]}},{"type":"inlineCode","value":"Expect::bool(false)","position":{"start":{"line":105,"column":162,"offset":4202},"end":{"line":105,"column":183,"offset":4223},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":105,"column":183,"offset":4223},"end":{"line":105,"column":184,"offset":4224},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":4041},"end":{"line":105,"column":184,"offset":4224},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"And what if we wanted to accept ","position":{"start":{"line":107,"column":1,"offset":4226},"end":{"line":107,"column":33,"offset":4258},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":107,"column":33,"offset":4258},"end":{"line":107,"column":36,"offset":4261},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":107,"column":36,"offset":4261},"end":{"line":107,"column":41,"offset":4266},"indent":[]}},{"type":"inlineCode","value":"0","position":{"start":{"line":107,"column":41,"offset":4266},"end":{"line":107,"column":44,"offset":4269},"indent":[]}},{"type":"text","value":" besides booleans? Then we list the allowed values, which we will also normalize to boolean:","position":{"start":{"line":107,"column":44,"offset":4269},"end":{"line":107,"column":136,"offset":4361},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":4226},"end":{"line":107,"column":136,"offset":4361},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::structure([\n\t'processRefund' => Expect::anyOf(true, false, 1, 0)->castTo('bool'),\n\t'refundAmount' => Expect::int(),\n]);\n\n$normalized = $processor->process($schema, $data);\nis_bool($normalized->processRefund); // true","position":{"start":{"line":109,"column":1,"offset":4363},"end":{"line":117,"column":4,"offset":4608},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now you know the basics of how the schema is defined and how the individual elements of the structure behave. We will now show what all the other elements can be used in defining a schema.","position":{"start":{"line":119,"column":1,"offset":4610},"end":{"line":119,"column":189,"offset":4798},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":4610},"end":{"line":119,"column":189,"offset":4798},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Data Types: type()","position":{"start":{"line":122,"column":1,"offset":4801},"end":{"line":122,"column":19,"offset":4819},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":4801},"end":{"line":123,"column":19,"offset":4838},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"All standard PHP data types can be listed in the schema:","position":{"start":{"line":125,"column":1,"offset":4840},"end":{"line":125,"column":57,"offset":4896},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":4840},"end":{"line":125,"column":57,"offset":4896},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"Expect::string($default = null)\nExpect::int($default = null)\nExpect::float($default = null)\nExpect::bool($default = null)\nExpect::null()\nExpect::array($default = [])","position":{"start":{"line":127,"column":1,"offset":4898},"end":{"line":134,"column":4,"offset":5074},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And then all types ","position":{"start":{"line":136,"column":1,"offset":5076},"end":{"line":136,"column":20,"offset":5095},"indent":[]}},{"type":"link","title":null,"url":"https://doc.nette.org/validators#toc-validation-rules","children":[{"type":"text","value":"supported by the Validators","position":{"start":{"line":136,"column":21,"offset":5096},"end":{"line":136,"column":48,"offset":5123},"indent":[]}}],"position":{"start":{"line":136,"column":20,"offset":5095},"end":{"line":136,"column":104,"offset":5179},"indent":[]}},{"type":"text","value":" via ","position":{"start":{"line":136,"column":104,"offset":5179},"end":{"line":136,"column":109,"offset":5184},"indent":[]}},{"type":"inlineCode","value":"Expect::type('scalar')","position":{"start":{"line":136,"column":109,"offset":5184},"end":{"line":136,"column":133,"offset":5208},"indent":[]}},{"type":"text","value":" or abbreviated ","position":{"start":{"line":136,"column":133,"offset":5208},"end":{"line":136,"column":149,"offset":5224},"indent":[]}},{"type":"inlineCode","value":"Expect::scalar()","position":{"start":{"line":136,"column":149,"offset":5224},"end":{"line":136,"column":167,"offset":5242},"indent":[]}},{"type":"text","value":". Also class or interface names are accepted, e.g. ","position":{"start":{"line":136,"column":167,"offset":5242},"end":{"line":136,"column":218,"offset":5293},"indent":[]}},{"type":"inlineCode","value":"Expect::type('AddressEntity')","position":{"start":{"line":136,"column":218,"offset":5293},"end":{"line":136,"column":249,"offset":5324},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":136,"column":249,"offset":5324},"end":{"line":136,"column":250,"offset":5325},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":5076},"end":{"line":136,"column":250,"offset":5325},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can also use union notation:","position":{"start":{"line":138,"column":1,"offset":5327},"end":{"line":138,"column":33,"offset":5359},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":5327},"end":{"line":138,"column":33,"offset":5359},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"Expect::type('bool|string|array')","position":{"start":{"line":140,"column":1,"offset":5361},"end":{"line":142,"column":4,"offset":5405},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The default value is always ","position":{"start":{"line":144,"column":1,"offset":5407},"end":{"line":144,"column":29,"offset":5435},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":144,"column":29,"offset":5435},"end":{"line":144,"column":35,"offset":5441},"indent":[]}},{"type":"text","value":" except for ","position":{"start":{"line":144,"column":35,"offset":5441},"end":{"line":144,"column":47,"offset":5453},"indent":[]}},{"type":"inlineCode","value":"array","position":{"start":{"line":144,"column":47,"offset":5453},"end":{"line":144,"column":54,"offset":5460},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":144,"column":54,"offset":5460},"end":{"line":144,"column":59,"offset":5465},"indent":[]}},{"type":"inlineCode","value":"list","position":{"start":{"line":144,"column":59,"offset":5465},"end":{"line":144,"column":65,"offset":5471},"indent":[]}},{"type":"text","value":", where it is an empty array. (A list is an array indexed in ascending order of numeric keys from zero, that is, a non-associative array).","position":{"start":{"line":144,"column":65,"offset":5471},"end":{"line":144,"column":203,"offset":5609},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":5407},"end":{"line":144,"column":203,"offset":5609},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Array of Values: arrayOf() listOf()","position":{"start":{"line":147,"column":1,"offset":5612},"end":{"line":147,"column":36,"offset":5647},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":5612},"end":{"line":148,"column":36,"offset":5683},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The array is too general structure, it is more useful to specify exactly what elements it can contain. For example, an array whose elements can only be strings:","position":{"start":{"line":150,"column":1,"offset":5685},"end":{"line":150,"column":161,"offset":5845},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":5685},"end":{"line":150,"column":161,"offset":5845},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::arrayOf('string');\n\n$processor->process($schema, ['hello', 'world']); // OK\n$processor->process($schema, ['a' => 'hello', 'b' => 'world']); // OK\n$processor->process($schema, ['key' => 123]); // ERROR: 123 is not a string","position":{"start":{"line":152,"column":1,"offset":5847},"end":{"line":158,"column":4,"offset":6097},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The second parameter can be used to specify keys (since version 1.2):","position":{"start":{"line":160,"column":1,"offset":6099},"end":{"line":160,"column":70,"offset":6168},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":6099},"end":{"line":160,"column":70,"offset":6168},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::arrayOf('string', 'int');\n\n$processor->process($schema, ['hello', 'world']); // OK\n$processor->process($schema, ['a' => 'hello']); // ERROR: 'a' is not int","position":{"start":{"line":162,"column":1,"offset":6170},"end":{"line":167,"column":4,"offset":6354},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The list is an indexed array:","position":{"start":{"line":169,"column":1,"offset":6356},"end":{"line":169,"column":30,"offset":6385},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":6356},"end":{"line":169,"column":30,"offset":6385},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::listOf('string');\n\n$processor->process($schema, ['a', 'b']); // OK\n$processor->process($schema, ['a', 123]); // ERROR: 123 is not a string\n$processor->process($schema, ['key' => 'a']); // ERROR: is not a list\n$processor->process($schema, [1 => 'a', 0 => 'b']); // ERROR: is not a list","position":{"start":{"line":171,"column":1,"offset":6387},"end":{"line":178,"column":4,"offset":6700},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The parameter can also be a schema, so we can write:","position":{"start":{"line":180,"column":1,"offset":6702},"end":{"line":180,"column":53,"offset":6754},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":6702},"end":{"line":180,"column":53,"offset":6754},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"Expect::arrayOf(Expect::bool())","position":{"start":{"line":182,"column":1,"offset":6756},"end":{"line":184,"column":4,"offset":6798},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The default value is an empty array. If you specify a default value, it will be merged with the passed data. This can be disabled using ","position":{"start":{"line":186,"column":1,"offset":6800},"end":{"line":186,"column":137,"offset":6936},"indent":[]}},{"type":"inlineCode","value":"mergeDefaults(false)","position":{"start":{"line":186,"column":137,"offset":6936},"end":{"line":186,"column":159,"offset":6958},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":186,"column":159,"offset":6958},"end":{"line":186,"column":160,"offset":6959},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":6800},"end":{"line":186,"column":160,"offset":6959},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Enumeration: anyOf()","position":{"start":{"line":189,"column":1,"offset":6962},"end":{"line":189,"column":21,"offset":6982},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":6962},"end":{"line":190,"column":21,"offset":7003},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"anyOf()","position":{"start":{"line":192,"column":1,"offset":7005},"end":{"line":192,"column":10,"offset":7014},"indent":[]}},{"type":"text","value":" is a set of values ​​or schemas that a value can be. Here's how to write an array of elements that can be either ","position":{"start":{"line":192,"column":10,"offset":7014},"end":{"line":192,"column":124,"offset":7128},"indent":[]}},{"type":"inlineCode","value":"'a'","position":{"start":{"line":192,"column":124,"offset":7128},"end":{"line":192,"column":129,"offset":7133},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":192,"column":129,"offset":7133},"end":{"line":192,"column":131,"offset":7135},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":192,"column":131,"offset":7135},"end":{"line":192,"column":137,"offset":7141},"indent":[]}},{"type":"text","value":", or ","position":{"start":{"line":192,"column":137,"offset":7141},"end":{"line":192,"column":142,"offset":7146},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":192,"column":142,"offset":7146},"end":{"line":192,"column":148,"offset":7152},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":192,"column":148,"offset":7152},"end":{"line":192,"column":149,"offset":7153},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":7005},"end":{"line":192,"column":149,"offset":7153},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::listOf(\n\tExpect::anyOf('a', true, null),\n);\n\n$processor->process($schema, ['a', true, null, 'a']); // OK\n$processor->process($schema, ['a', false]); // ERROR: false does not belong there","position":{"start":{"line":194,"column":1,"offset":7155},"end":{"line":201,"column":4,"offset":7370},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The enumeration elements can also be schemas:","position":{"start":{"line":203,"column":1,"offset":7372},"end":{"line":203,"column":46,"offset":7417},"indent":[]}}],"position":{"start":{"line":203,"column":1,"offset":7372},"end":{"line":203,"column":46,"offset":7417},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::listOf(\n\tExpect::anyOf(Expect::string(), true, null),\n);\n\n$processor->process($schema, ['foo', true, null, 'bar']); // OK\n$processor->process($schema, [123]); // ERROR","position":{"start":{"line":205,"column":1,"offset":7419},"end":{"line":212,"column":4,"offset":7615},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":214,"column":1,"offset":7617},"end":{"line":214,"column":5,"offset":7621},"indent":[]}},{"type":"inlineCode","value":"anyOf()","position":{"start":{"line":214,"column":5,"offset":7621},"end":{"line":214,"column":14,"offset":7630},"indent":[]}},{"type":"text","value":" method accepts variants as individual parameters, not as array. To pass it an array of values, use the unpacking operator ","position":{"start":{"line":214,"column":14,"offset":7630},"end":{"line":214,"column":137,"offset":7753},"indent":[]}},{"type":"inlineCode","value":"anyOf(...$variants)","position":{"start":{"line":214,"column":137,"offset":7753},"end":{"line":214,"column":158,"offset":7774},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":214,"column":158,"offset":7774},"end":{"line":214,"column":159,"offset":7775},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":7617},"end":{"line":214,"column":159,"offset":7775},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The default value is ","position":{"start":{"line":216,"column":1,"offset":7777},"end":{"line":216,"column":22,"offset":7798},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":216,"column":22,"offset":7798},"end":{"line":216,"column":28,"offset":7804},"indent":[]}},{"type":"text","value":". Use the ","position":{"start":{"line":216,"column":28,"offset":7804},"end":{"line":216,"column":38,"offset":7814},"indent":[]}},{"type":"inlineCode","value":"firstIsDefault()","position":{"start":{"line":216,"column":38,"offset":7814},"end":{"line":216,"column":56,"offset":7832},"indent":[]}},{"type":"text","value":" method to make the first element the default:","position":{"start":{"line":216,"column":56,"offset":7832},"end":{"line":216,"column":102,"offset":7878},"indent":[]}}],"position":{"start":{"line":216,"column":1,"offset":7777},"end":{"line":216,"column":102,"offset":7878},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// default is 'hello'\nExpect::anyOf(Expect::string('hello'), true, null)->firstIsDefault();","position":{"start":{"line":218,"column":1,"offset":7880},"end":{"line":221,"column":4,"offset":7982},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Structures","position":{"start":{"line":224,"column":1,"offset":7985},"end":{"line":224,"column":11,"offset":7995},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":7985},"end":{"line":225,"column":11,"offset":8006},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Structures are objects with defined keys. Each of these key => value pairs is referred to as a \"property\":","position":{"start":{"line":227,"column":1,"offset":8008},"end":{"line":227,"column":107,"offset":8114},"indent":[]}}],"position":{"start":{"line":227,"column":1,"offset":8008},"end":{"line":227,"column":107,"offset":8114},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Structures accept arrays and objects and return objects ","position":{"start":{"line":229,"column":1,"offset":8116},"end":{"line":229,"column":57,"offset":8172},"indent":[]}},{"type":"inlineCode","value":"stdClass","position":{"start":{"line":229,"column":57,"offset":8172},"end":{"line":229,"column":67,"offset":8182},"indent":[]}},{"type":"text","value":" (unless you change it with ","position":{"start":{"line":229,"column":67,"offset":8182},"end":{"line":229,"column":95,"offset":8210},"indent":[]}},{"type":"inlineCode","value":"castTo('array')","position":{"start":{"line":229,"column":95,"offset":8210},"end":{"line":229,"column":112,"offset":8227},"indent":[]}},{"type":"text","value":", etc.).","position":{"start":{"line":229,"column":112,"offset":8227},"end":{"line":229,"column":120,"offset":8235},"indent":[]}}],"position":{"start":{"line":229,"column":1,"offset":8116},"end":{"line":229,"column":120,"offset":8235},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default, all properties are optional and have a default value of ","position":{"start":{"line":231,"column":1,"offset":8237},"end":{"line":231,"column":69,"offset":8305},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":231,"column":69,"offset":8305},"end":{"line":231,"column":75,"offset":8311},"indent":[]}},{"type":"text","value":". You can define mandatory properties using ","position":{"start":{"line":231,"column":75,"offset":8311},"end":{"line":231,"column":119,"offset":8355},"indent":[]}},{"type":"inlineCode","value":"required()","position":{"start":{"line":231,"column":119,"offset":8355},"end":{"line":231,"column":131,"offset":8367},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":231,"column":131,"offset":8367},"end":{"line":231,"column":132,"offset":8368},"indent":[]}}],"position":{"start":{"line":231,"column":1,"offset":8237},"end":{"line":231,"column":132,"offset":8368},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::structure([\n\t'required' => Expect::string()->required(),\n\t'optional' => Expect::string(), // the default value is null\n]);\n\n$processor->process($schema, ['optional' => '']);\n// ERROR: option 'required' is missing\n\n$processor->process($schema, ['required' => 'foo']);\n// OK, returns {'required' => 'foo', 'optional' => null}","position":{"start":{"line":233,"column":1,"offset":8370},"end":{"line":244,"column":4,"offset":8722},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you do not want to output properties with only a default value, use ","position":{"start":{"line":246,"column":1,"offset":8724},"end":{"line":246,"column":72,"offset":8795},"indent":[]}},{"type":"inlineCode","value":"skipDefaults()","position":{"start":{"line":246,"column":72,"offset":8795},"end":{"line":246,"column":88,"offset":8811},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":246,"column":88,"offset":8811},"end":{"line":246,"column":89,"offset":8812},"indent":[]}}],"position":{"start":{"line":246,"column":1,"offset":8724},"end":{"line":246,"column":89,"offset":8812},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::structure([\n\t'required' => Expect::string()->required(),\n\t'optional' => Expect::string(),\n])->skipDefaults();\n\n$processor->process($schema, ['required' => 'foo']);\n// OK, returns {'required' => 'foo'}","position":{"start":{"line":248,"column":1,"offset":8814},"end":{"line":256,"column":4,"offset":9043},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Although ","position":{"start":{"line":258,"column":1,"offset":9045},"end":{"line":258,"column":10,"offset":9054},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":258,"column":10,"offset":9054},"end":{"line":258,"column":16,"offset":9060},"indent":[]}},{"type":"text","value":" is the default value of the ","position":{"start":{"line":258,"column":16,"offset":9060},"end":{"line":258,"column":45,"offset":9089},"indent":[]}},{"type":"inlineCode","value":"optional","position":{"start":{"line":258,"column":45,"offset":9089},"end":{"line":258,"column":55,"offset":9099},"indent":[]}},{"type":"text","value":" property, it is not allowed in the input data (the value must be a string). Properties accepting ","position":{"start":{"line":258,"column":55,"offset":9099},"end":{"line":258,"column":153,"offset":9197},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":258,"column":153,"offset":9197},"end":{"line":258,"column":159,"offset":9203},"indent":[]}},{"type":"text","value":" are defined using ","position":{"start":{"line":258,"column":159,"offset":9203},"end":{"line":258,"column":178,"offset":9222},"indent":[]}},{"type":"inlineCode","value":"nullable()","position":{"start":{"line":258,"column":178,"offset":9222},"end":{"line":258,"column":190,"offset":9234},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":258,"column":190,"offset":9234},"end":{"line":258,"column":191,"offset":9235},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":9045},"end":{"line":258,"column":191,"offset":9235},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::structure([\n\t'optional' => Expect::string(),\n\t'nullable' => Expect::string()->nullable(),\n]);\n\n$processor->process($schema, ['optional' => null]);\n// ERROR: 'optional' expects to be string, null given.\n\n$processor->process($schema, ['nullable' => null]);\n// OK, returns {'optional' => null, 'nullable' => null}","position":{"start":{"line":260,"column":1,"offset":9237},"end":{"line":271,"column":4,"offset":9576},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"By default, there can be no extra items in the input data:","position":{"start":{"line":273,"column":1,"offset":9578},"end":{"line":273,"column":59,"offset":9636},"indent":[]}}],"position":{"start":{"line":273,"column":1,"offset":9578},"end":{"line":273,"column":59,"offset":9636},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::structure([\n\t'key' => Expect::string(),\n]);\n\n$processor->process($schema, ['additional' => 1]);\n// ERROR: Unexpected item 'additional'","position":{"start":{"line":275,"column":1,"offset":9638},"end":{"line":282,"column":4,"offset":9801},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Which we can change with ","position":{"start":{"line":284,"column":1,"offset":9803},"end":{"line":284,"column":26,"offset":9828},"indent":[]}},{"type":"inlineCode","value":"otherItems()","position":{"start":{"line":284,"column":26,"offset":9828},"end":{"line":284,"column":40,"offset":9842},"indent":[]}},{"type":"text","value":". As a parameter, we will specify the schema for each extra element:","position":{"start":{"line":284,"column":40,"offset":9842},"end":{"line":284,"column":108,"offset":9910},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":9803},"end":{"line":284,"column":108,"offset":9910},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::structure([\n\t'key' => Expect::string(),\n])->otherItems(Expect::int());\n\n$processor->process($schema, ['additional' => 1]); // OK\n$processor->process($schema, ['additional' => true]); // ERROR","position":{"start":{"line":286,"column":1,"offset":9912},"end":{"line":293,"column":4,"offset":10132},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Deprecations","position":{"start":{"line":296,"column":1,"offset":10135},"end":{"line":296,"column":13,"offset":10147},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":10135},"end":{"line":297,"column":13,"offset":10160},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"You can deprecate property using the ","position":{"start":{"line":299,"column":1,"offset":10162},"end":{"line":299,"column":38,"offset":10199},"indent":[]}},{"type":"inlineCode","value":"deprecated([string $message])","position":{"start":{"line":299,"column":38,"offset":10199},"end":{"line":299,"column":69,"offset":10230},"indent":[]}},{"type":"text","value":" method. Deprecation notices are returned by ","position":{"start":{"line":299,"column":69,"offset":10230},"end":{"line":299,"column":114,"offset":10275},"indent":[]}},{"type":"inlineCode","value":"$processor->getWarnings()","position":{"start":{"line":299,"column":114,"offset":10275},"end":{"line":299,"column":141,"offset":10302},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":299,"column":141,"offset":10302},"end":{"line":299,"column":142,"offset":10303},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":10162},"end":{"line":299,"column":142,"offset":10303},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::structure([\n\t'old' => Expect::int()->deprecated('The item %path% is deprecated'),\n]);\n\n$processor->process($schema, ['old' => 1]); // OK\n$processor->getWarnings(); // [\"The item 'old' is deprecated\"]","position":{"start":{"line":301,"column":1,"offset":10305},"end":{"line":308,"column":4,"offset":10533},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Ranges: min() max()","position":{"start":{"line":311,"column":1,"offset":10536},"end":{"line":311,"column":20,"offset":10555},"indent":[]}}],"position":{"start":{"line":311,"column":1,"offset":10536},"end":{"line":312,"column":20,"offset":10575},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Use ","position":{"start":{"line":314,"column":1,"offset":10577},"end":{"line":314,"column":5,"offset":10581},"indent":[]}},{"type":"inlineCode","value":"min()","position":{"start":{"line":314,"column":5,"offset":10581},"end":{"line":314,"column":12,"offset":10588},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":314,"column":12,"offset":10588},"end":{"line":314,"column":17,"offset":10593},"indent":[]}},{"type":"inlineCode","value":"max()","position":{"start":{"line":314,"column":17,"offset":10593},"end":{"line":314,"column":24,"offset":10600},"indent":[]}},{"type":"text","value":" to limit the number of elements for arrays:","position":{"start":{"line":314,"column":24,"offset":10600},"end":{"line":314,"column":68,"offset":10644},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":10577},"end":{"line":314,"column":68,"offset":10644},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// array, at least 10 items, maximum 20 items\nExpect::array()->min(10)->max(20);","position":{"start":{"line":316,"column":1,"offset":10646},"end":{"line":319,"column":4,"offset":10737},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For strings, limit their length:","position":{"start":{"line":321,"column":1,"offset":10739},"end":{"line":321,"column":33,"offset":10771},"indent":[]}}],"position":{"start":{"line":321,"column":1,"offset":10739},"end":{"line":321,"column":33,"offset":10771},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// string, at least 10 characters long, maximum 20 characters\nExpect::string()->min(10)->max(20);","position":{"start":{"line":323,"column":1,"offset":10773},"end":{"line":326,"column":4,"offset":10881},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For numbers, limit their value:","position":{"start":{"line":328,"column":1,"offset":10883},"end":{"line":328,"column":32,"offset":10914},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":10883},"end":{"line":328,"column":32,"offset":10914},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// integer, between 10 and 20 inclusive\nExpect::int()->min(10)->max(20);","position":{"start":{"line":330,"column":1,"offset":10916},"end":{"line":333,"column":4,"offset":10999},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Of course, it is possible to mention only ","position":{"start":{"line":335,"column":1,"offset":11001},"end":{"line":335,"column":43,"offset":11043},"indent":[]}},{"type":"inlineCode","value":"min()","position":{"start":{"line":335,"column":43,"offset":11043},"end":{"line":335,"column":50,"offset":11050},"indent":[]}},{"type":"text","value":", or only ","position":{"start":{"line":335,"column":50,"offset":11050},"end":{"line":335,"column":60,"offset":11060},"indent":[]}},{"type":"inlineCode","value":"max()","position":{"start":{"line":335,"column":60,"offset":11060},"end":{"line":335,"column":67,"offset":11067},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":335,"column":67,"offset":11067},"end":{"line":335,"column":68,"offset":11068},"indent":[]}}],"position":{"start":{"line":335,"column":1,"offset":11001},"end":{"line":335,"column":68,"offset":11068},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// string, maximum 20 characters\nExpect::string()->max(20);","position":{"start":{"line":337,"column":1,"offset":11070},"end":{"line":340,"column":4,"offset":11140},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Regular Expressions: pattern()","position":{"start":{"line":343,"column":1,"offset":11143},"end":{"line":343,"column":31,"offset":11173},"indent":[]}}],"position":{"start":{"line":343,"column":1,"offset":11143},"end":{"line":344,"column":31,"offset":11204},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Using ","position":{"start":{"line":346,"column":1,"offset":11206},"end":{"line":346,"column":7,"offset":11212},"indent":[]}},{"type":"inlineCode","value":"pattern()","position":{"start":{"line":346,"column":7,"offset":11212},"end":{"line":346,"column":18,"offset":11223},"indent":[]}},{"type":"text","value":", you can specify a regular expression which the ","position":{"start":{"line":346,"column":18,"offset":11223},"end":{"line":346,"column":67,"offset":11272},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"whole","position":{"start":{"line":346,"column":69,"offset":11274},"end":{"line":346,"column":74,"offset":11279},"indent":[]}}],"position":{"start":{"line":346,"column":67,"offset":11272},"end":{"line":346,"column":76,"offset":11281},"indent":[]}},{"type":"text","value":" input string must match (i.e. as if it were wrapped in characters ","position":{"start":{"line":346,"column":76,"offset":11281},"end":{"line":346,"column":143,"offset":11348},"indent":[]}},{"type":"inlineCode","value":"^","position":{"start":{"line":346,"column":143,"offset":11348},"end":{"line":346,"column":146,"offset":11351},"indent":[]}},{"type":"text","value":" a ","position":{"start":{"line":346,"column":146,"offset":11351},"end":{"line":346,"column":149,"offset":11354},"indent":[]}},{"type":"inlineCode","value":"$","position":{"start":{"line":346,"column":149,"offset":11354},"end":{"line":346,"column":152,"offset":11357},"indent":[]}},{"type":"text","value":"):","position":{"start":{"line":346,"column":152,"offset":11357},"end":{"line":346,"column":154,"offset":11359},"indent":[]}}],"position":{"start":{"line":346,"column":1,"offset":11206},"end":{"line":346,"column":154,"offset":11359},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// just 9 digits\nExpect::string()->pattern('\\d{9}');","position":{"start":{"line":348,"column":1,"offset":11361},"end":{"line":351,"column":4,"offset":11424},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Custom Assertions: assert()","position":{"start":{"line":354,"column":1,"offset":11427},"end":{"line":354,"column":28,"offset":11454},"indent":[]}}],"position":{"start":{"line":354,"column":1,"offset":11427},"end":{"line":355,"column":28,"offset":11482},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"You can add any other restrictions using ","position":{"start":{"line":357,"column":1,"offset":11484},"end":{"line":357,"column":42,"offset":11525},"indent":[]}},{"type":"inlineCode","value":"assert(callable $fn)","position":{"start":{"line":357,"column":42,"offset":11525},"end":{"line":357,"column":64,"offset":11547},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":357,"column":64,"offset":11547},"end":{"line":357,"column":65,"offset":11548},"indent":[]}}],"position":{"start":{"line":357,"column":1,"offset":11484},"end":{"line":357,"column":65,"offset":11548},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$countIsEven = fn($v) => count($v) % 2 === 0;\n\n$schema = Expect::arrayOf('string')\n\t->assert($countIsEven); // the count must be even\n\n$processor->process($schema, ['a', 'b']); // OK\n$processor->process($schema, ['a', 'b', 'c']); // ERROR: 3 is not even","position":{"start":{"line":359,"column":1,"offset":11550},"end":{"line":367,"column":4,"offset":11814},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Or","position":{"start":{"line":369,"column":1,"offset":11816},"end":{"line":369,"column":3,"offset":11818},"indent":[]}}],"position":{"start":{"line":369,"column":1,"offset":11816},"end":{"line":369,"column":3,"offset":11818},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"Expect::string()->assert('is_file'); // the file must exist","position":{"start":{"line":371,"column":1,"offset":11820},"end":{"line":373,"column":4,"offset":11890},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can add your own description for each assertion. It will be part of the error message.","position":{"start":{"line":375,"column":1,"offset":11892},"end":{"line":375,"column":91,"offset":11982},"indent":[]}}],"position":{"start":{"line":375,"column":1,"offset":11892},"end":{"line":375,"column":91,"offset":11982},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::arrayOf('string')\n\t->assert($countIsEven, 'Even items in array');\n\n$processor->process($schema, ['a', 'b', 'c']);\n// Failed assertion \"Even items in array\" for item with value array.","position":{"start":{"line":377,"column":1,"offset":11984},"end":{"line":383,"column":4,"offset":12195},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The method can be called repeatedly to add multiple constraints. It can be intermixed with calls to ","position":{"start":{"line":385,"column":1,"offset":12197},"end":{"line":385,"column":101,"offset":12297},"indent":[]}},{"type":"inlineCode","value":"transform()","position":{"start":{"line":385,"column":101,"offset":12297},"end":{"line":385,"column":114,"offset":12310},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":385,"column":114,"offset":12310},"end":{"line":385,"column":119,"offset":12315},"indent":[]}},{"type":"inlineCode","value":"castTo()","position":{"start":{"line":385,"column":119,"offset":12315},"end":{"line":385,"column":129,"offset":12325},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":385,"column":129,"offset":12325},"end":{"line":385,"column":130,"offset":12326},"indent":[]}}],"position":{"start":{"line":385,"column":1,"offset":12197},"end":{"line":385,"column":130,"offset":12326},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Transformation: transform()","position":{"start":{"line":388,"column":1,"offset":12329},"end":{"line":388,"column":28,"offset":12356},"indent":[]}}],"position":{"start":{"line":388,"column":1,"offset":12329},"end":{"line":389,"column":28,"offset":12384},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Successfully validated data can be modified using a custom function:","position":{"start":{"line":391,"column":1,"offset":12386},"end":{"line":391,"column":69,"offset":12454},"indent":[]}}],"position":{"start":{"line":391,"column":1,"offset":12386},"end":{"line":391,"column":69,"offset":12454},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// conversion to uppercase:\nExpect::string()->transform(fn(string $s) => strtoupper($s));","position":{"start":{"line":393,"column":1,"offset":12456},"end":{"line":396,"column":4,"offset":12556},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The method can be called repeatedly to add multiple transformations. It can be intermixed with calls to ","position":{"start":{"line":398,"column":1,"offset":12558},"end":{"line":398,"column":105,"offset":12662},"indent":[]}},{"type":"inlineCode","value":"assert()","position":{"start":{"line":398,"column":105,"offset":12662},"end":{"line":398,"column":115,"offset":12672},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":398,"column":115,"offset":12672},"end":{"line":398,"column":120,"offset":12677},"indent":[]}},{"type":"inlineCode","value":"castTo()","position":{"start":{"line":398,"column":120,"offset":12677},"end":{"line":398,"column":130,"offset":12687},"indent":[]}},{"type":"text","value":". The operations will be executed in the order in which they are declared:","position":{"start":{"line":398,"column":130,"offset":12687},"end":{"line":398,"column":204,"offset":12761},"indent":[]}}],"position":{"start":{"line":398,"column":1,"offset":12558},"end":{"line":398,"column":204,"offset":12761},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"Expect::type('string|int')\n\t->castTo('string')\n\t->assert('ctype_lower', 'All characters must be lowercased')\n\t->transform(fn(string $s) => strtoupper($s)); // conversion to uppercase","position":{"start":{"line":400,"column":1,"offset":12763},"end":{"line":405,"column":4,"offset":12956},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":407,"column":1,"offset":12958},"end":{"line":407,"column":5,"offset":12962},"indent":[]}},{"type":"inlineCode","value":"transform()","position":{"start":{"line":407,"column":5,"offset":12962},"end":{"line":407,"column":18,"offset":12975},"indent":[]}},{"type":"text","value":" method can both transform and validate the value simultaneously. This is often simpler and less redundant than chaining ","position":{"start":{"line":407,"column":18,"offset":12975},"end":{"line":407,"column":139,"offset":13096},"indent":[]}},{"type":"inlineCode","value":"transform()","position":{"start":{"line":407,"column":139,"offset":13096},"end":{"line":407,"column":152,"offset":13109},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":407,"column":152,"offset":13109},"end":{"line":407,"column":157,"offset":13114},"indent":[]}},{"type":"inlineCode","value":"assert()","position":{"start":{"line":407,"column":157,"offset":13114},"end":{"line":407,"column":167,"offset":13124},"indent":[]}},{"type":"text","value":". For this purpose, the function receives a ","position":{"start":{"line":407,"column":167,"offset":13124},"end":{"line":407,"column":211,"offset":13168},"indent":[]}},{"type":"link","title":null,"url":"https://api.nette.org/schema/master/Nette/Schema/Context.html","children":[{"type":"text","value":"Nette\\Schema\\Context","position":{"start":{"line":407,"column":212,"offset":13169},"end":{"line":407,"column":232,"offset":13189},"indent":[]}}],"position":{"start":{"line":407,"column":211,"offset":13168},"end":{"line":407,"column":296,"offset":13253},"indent":[]}},{"type":"text","value":" object with an ","position":{"start":{"line":407,"column":296,"offset":13253},"end":{"line":407,"column":312,"offset":13269},"indent":[]}},{"type":"inlineCode","value":"addError()","position":{"start":{"line":407,"column":312,"offset":13269},"end":{"line":407,"column":324,"offset":13281},"indent":[]}},{"type":"text","value":" method, which can be used to add information about validation issues:","position":{"start":{"line":407,"column":324,"offset":13281},"end":{"line":407,"column":394,"offset":13351},"indent":[]}}],"position":{"start":{"line":407,"column":1,"offset":12958},"end":{"line":407,"column":394,"offset":13351},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"Expect::string()\n\t->transform(function (string $s, Nette\\Schema\\Context $context) {\n\t\tif (!ctype_lower($s)) {\n\t\t\t$context->addError('All characters must be lowercased', 'my.case.error');\n\t\t\treturn null;\n\t\t}\n\n\t\treturn strtoupper($s);\n\t});","position":{"start":{"line":409,"column":1,"offset":13353},"end":{"line":419,"column":4,"offset":13601},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Casting: castTo()","position":{"start":{"line":422,"column":1,"offset":13604},"end":{"line":422,"column":18,"offset":13621},"indent":[]}}],"position":{"start":{"line":422,"column":1,"offset":13604},"end":{"line":423,"column":18,"offset":13639},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Successfully validated data can be cast:","position":{"start":{"line":425,"column":1,"offset":13641},"end":{"line":425,"column":41,"offset":13681},"indent":[]}}],"position":{"start":{"line":425,"column":1,"offset":13641},"end":{"line":425,"column":41,"offset":13681},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"Expect::scalar()->castTo('string');","position":{"start":{"line":427,"column":1,"offset":13683},"end":{"line":429,"column":4,"offset":13729},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In addition to native PHP types, you can also cast to classes. It distinguishes whether it is a simple class without a constructor or a class with a constructor. If the class has no constructor, an instance of it is created and all elements of the structure are written to its properties:","position":{"start":{"line":431,"column":1,"offset":13731},"end":{"line":431,"column":289,"offset":14019},"indent":[]}}],"position":{"start":{"line":431,"column":1,"offset":13731},"end":{"line":431,"column":289,"offset":14019},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"class Info\n{\n\tpublic bool $processRefund;\n\tpublic int $refundAmount;\n}\n\nExpect::structure([\n\t'processRefund' => Expect::bool(),\n\t'refundAmount' => Expect::int(),\n])->castTo(Info::class);\n\n// creates '$obj = new Info' and writes to $obj->processRefund and $obj->refundAmount","position":{"start":{"line":433,"column":1,"offset":14021},"end":{"line":446,"column":4,"offset":14305},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If the class has a constructor, the elements of the structure are passed as named parameters to the constructor:","position":{"start":{"line":448,"column":1,"offset":14307},"end":{"line":448,"column":113,"offset":14419},"indent":[]}}],"position":{"start":{"line":448,"column":1,"offset":14307},"end":{"line":448,"column":113,"offset":14419},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"class Info\n{\n\tpublic function __construct(\n\t\tpublic bool $processRefund,\n\t\tpublic int $refundAmount,\n\t) {\n\t}\n}\n\n// creates $obj = new Info(processRefund: ..., refundAmount: ...)","position":{"start":{"line":450,"column":1,"offset":14421},"end":{"line":461,"column":4,"offset":14609},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Casting combined with a scalar parameter creates an object and passes the value as the sole parameter to the constructor:","position":{"start":{"line":463,"column":1,"offset":14611},"end":{"line":463,"column":122,"offset":14732},"indent":[]}}],"position":{"start":{"line":463,"column":1,"offset":14611},"end":{"line":463,"column":122,"offset":14732},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"Expect::string()->castTo(DateTime::class);\n// creates new DateTime(...)","position":{"start":{"line":465,"column":1,"offset":14734},"end":{"line":468,"column":4,"offset":14816},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Normalization: before()","position":{"start":{"line":471,"column":1,"offset":14819},"end":{"line":471,"column":24,"offset":14842},"indent":[]}}],"position":{"start":{"line":471,"column":1,"offset":14819},"end":{"line":472,"column":24,"offset":14866},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Prior to the validation itself, the data can be normalized using the method ","position":{"start":{"line":474,"column":1,"offset":14868},"end":{"line":474,"column":77,"offset":14944},"indent":[]}},{"type":"inlineCode","value":"before()","position":{"start":{"line":474,"column":77,"offset":14944},"end":{"line":474,"column":87,"offset":14954},"indent":[]}},{"type":"text","value":". As an example, let's have an element that must be an array of strings (eg ","position":{"start":{"line":474,"column":87,"offset":14954},"end":{"line":474,"column":163,"offset":15030},"indent":[]}},{"type":"inlineCode","value":"['a', 'b', 'c']","position":{"start":{"line":474,"column":163,"offset":15030},"end":{"line":474,"column":180,"offset":15047},"indent":[]}},{"type":"text","value":"), but receives input in the form of a string ","position":{"start":{"line":474,"column":180,"offset":15047},"end":{"line":474,"column":226,"offset":15093},"indent":[]}},{"type":"inlineCode","value":"a b c","position":{"start":{"line":474,"column":226,"offset":15093},"end":{"line":474,"column":233,"offset":15100},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":474,"column":233,"offset":15100},"end":{"line":474,"column":234,"offset":15101},"indent":[]}}],"position":{"start":{"line":474,"column":1,"offset":14868},"end":{"line":474,"column":234,"offset":15101},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$explode = fn($v) => explode(' ', $v);\n\n$schema = Expect::arrayOf('string')\n\t->before($explode);\n\n$normalized = $processor->process($schema, 'a b c');\n// OK, returns ['a', 'b', 'c']","position":{"start":{"line":476,"column":1,"offset":15103},"end":{"line":484,"column":4,"offset":15295},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Mapping to Objects: from()","position":{"start":{"line":487,"column":1,"offset":15298},"end":{"line":487,"column":27,"offset":15324},"indent":[]}}],"position":{"start":{"line":487,"column":1,"offset":15298},"end":{"line":488,"column":27,"offset":15351},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"You can generate structure schema from the class. Example:","position":{"start":{"line":490,"column":1,"offset":15353},"end":{"line":490,"column":59,"offset":15411},"indent":[]}}],"position":{"start":{"line":490,"column":1,"offset":15353},"end":{"line":490,"column":59,"offset":15411},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"class Config\n{\n\t/** @var string */\n\tpublic $name;\n\t/** @var string|null */\n\tpublic $password;\n\t/** @var bool */\n\tpublic $admin = false;\n}\n\n$schema = Expect::from(new Config);\n\n$data = [\n\t'name' => 'jeff',\n];\n\n$normalized = $processor->process($schema, $data);\n// $normalized instanceof Config\n// $normalized = {'name' => 'jeff', 'password' => null, 'admin' => false}","position":{"start":{"line":492,"column":1,"offset":15413},"end":{"line":512,"column":4,"offset":15790},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you are using PHP 7.4 or higher, you can use native types:","position":{"start":{"line":514,"column":1,"offset":15792},"end":{"line":514,"column":62,"offset":15853},"indent":[]}}],"position":{"start":{"line":514,"column":1,"offset":15792},"end":{"line":514,"column":62,"offset":15853},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"class Config\n{\n\tpublic string $name;\n\tpublic ?string $password;\n\tpublic bool $admin = false;\n}\n\n$schema = Expect::from(new Config);","position":{"start":{"line":516,"column":1,"offset":15855},"end":{"line":525,"column":4,"offset":15997},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Anonymous classes are also supported:","position":{"start":{"line":527,"column":1,"offset":15999},"end":{"line":527,"column":38,"offset":16036},"indent":[]}}],"position":{"start":{"line":527,"column":1,"offset":15999},"end":{"line":527,"column":38,"offset":16036},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::from(new class {\n\tpublic string $name;\n\tpublic ?string $password;\n\tpublic bool $admin = false;\n});","position":{"start":{"line":529,"column":1,"offset":16038},"end":{"line":535,"column":4,"offset":16165},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Because the information obtained from the class definition may not be sufficient, you can add a custom schema for the elements with the second parameter:","position":{"start":{"line":537,"column":1,"offset":16167},"end":{"line":537,"column":154,"offset":16320},"indent":[]}}],"position":{"start":{"line":537,"column":1,"offset":16167},"end":{"line":537,"column":154,"offset":16320},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$schema = Expect::from(new Config, [\n\t'name' => Expect::string()->pattern('\\w:.*'),\n]);","position":{"start":{"line":539,"column":1,"offset":16322},"end":{"line":543,"column":4,"offset":16420},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":546,"column":1,"offset":16423},"end":{"line":546,"column":31,"offset":16453},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":546,"column":31,"offset":16453}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Nette Schema`}</p>\n    <hr></hr>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://packagist.org/packages/nette/schema\"\n      }}><img alt=\"Downloads this Month\" src=\"https://img.shields.io/packagist/dm/nette/schema.svg\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nette/schema/actions\"\n      }}><img alt=\"Tests\" src=\"https://github.com/nette/schema/workflows/Tests/badge.svg?branch=master\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://coveralls.io/github/nette/schema?branch=master\"\n      }}><img alt=\"Coverage Status\" src=\"https://coveralls.io/repos/github/nette/schema/badge.svg?branch=master\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nette/schema/releases\"\n      }}><img alt=\"Latest Stable Version\" src=\"https://poser.pugx.org/nette/schema/v/stable\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nette/schema/blob/master/license.md\"\n      }}><img alt=\"License\" src=\"https://img.shields.io/badge/license-New%20BSD-blue.svg\" /></a></p>\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <p>{`A practical library for validation and normalization of data structures against a given schema with a smart & easy-to-understand API.`}</p>\n    <p>{`Documentation can be found on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://doc.nette.org/schema\"\n      }}>{`website`}</a>{`.`}</p>\n    <p>{`Installation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`composer require nette/schema\n`}</code></pre>\n    <p>{`It requires PHP version 8.1 and supports PHP up to 8.4.`}</p>\n    <h2 {...{\n      \"id\": \"support-me\"\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"https://github.com/sponsors/dg\"\n      }}>{`Support Me`}</a></h2>\n    <p>{`Do you like Nette Schema? Are you looking forward to the new features?`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/sponsors/dg\"\n      }}><img alt=\"Buy me a coffee\" src=\"https://files.nette.org/icons/donation-3.svg\" /></a></p>\n    <p>{`Thank you!`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <p>{`In variable `}<inlineCode parentName=\"p\">{`$schema`}</inlineCode>{` we have a validation schema (what exactly this means and how to create it we will say later) and in variable `}<inlineCode parentName=\"p\">{`$data`}</inlineCode>{` we have a data structure that we want to validate and normalize. This can be, for example, data sent by the user through an API, configuration file, etc.`}</p>\n    <p>{`The task is handled by the `}<a parentName=\"p\" {...{\n        \"href\": \"https://api.nette.org/schema/master/Nette/Schema/Processor.html\"\n      }}>{`Nette\\\\Schema\\\\Processor`}</a>{` class, which processes the input and either returns normalized data or throws an `}<a parentName=\"p\" {...{\n        \"href\": \"https://api.nette.org/schema/master/Nette/Schema/ValidationException.html\"\n      }}>{`Nette\\\\Schema\\\\ValidationException`}</a>{` exception on error.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$processor = new Nette\\\\Schema\\\\Processor;\n\ntry {\n    $normalized = $processor->process($schema, $data);\n} catch (Nette\\\\Schema\\\\ValidationException $e) {\n    echo 'Data is invalid: ' . $e->getMessage();\n}\n`}</code></pre>\n    <p>{`Method `}<inlineCode parentName=\"p\">{`$e->getMessages()`}</inlineCode>{` returns array of all message strings and `}<inlineCode parentName=\"p\">{`$e->getMessageObjects()`}</inlineCode>{` return all messages as `}<a parentName=\"p\" {...{\n        \"href\": \"https://api.nette.org/schema/master/Nette/Schema/Message.html\"\n      }}>{`Nette\\\\Schema\\\\Message`}</a>{` objects.`}</p>\n    <h2 {...{\n      \"id\": \"defining-schema\"\n    }}>{`Defining Schema`}</h2>\n    <p>{`And now let's create a schema. The class `}<a parentName=\"p\" {...{\n        \"href\": \"https://api.nette.org/schema/master/Nette/Schema/Expect.html\"\n      }}>{`Nette\\\\Schema\\\\Expect`}</a>{` is used to define it, we actually define expectations of what the data should look like. Let's say that the input data must be a structure (e.g. an array) containing elements `}<inlineCode parentName=\"p\">{`processRefund`}</inlineCode>{` of type bool and `}<inlineCode parentName=\"p\">{`refundAmount`}</inlineCode>{` of type int.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use Nette\\\\Schema\\\\Expect;\n\n$schema = Expect::structure([\n    'processRefund' => Expect::bool(),\n    'refundAmount' => Expect::int(),\n]);\n`}</code></pre>\n    <p>{`We believe that the schema definition looks clear, even if you see it for the very first time.`}</p>\n    <p>{`Lets send the following data for validation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$data = [\n    'processRefund' => true,\n    'refundAmount' => 17,\n];\n\n$normalized = $processor->process($schema, $data); // OK, it passes\n`}</code></pre>\n    <p>{`The output, i.e. the value `}<inlineCode parentName=\"p\">{`$normalized`}</inlineCode>{`, is the object `}<inlineCode parentName=\"p\">{`stdClass`}</inlineCode>{`. If we want the output to be an array, we add a cast to schema `}<inlineCode parentName=\"p\">{`Expect::structure([...])->castTo('array')`}</inlineCode>{`.`}</p>\n    <p>{`All elements of the structure are optional and have a default value `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`. Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$data = [\n    'refundAmount' => 17,\n];\n\n$normalized = $processor->process($schema, $data); // OK, it passes\n// $normalized = {'processRefund' => null, 'refundAmount' => 17}\n`}</code></pre>\n    <p>{`The fact that the default value is `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` does not mean that it would be accepted in the input data `}<inlineCode parentName=\"p\">{`'processRefund' => null`}</inlineCode>{`. No, the input must be boolean, i.e. only `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`. We would have to explicitly allow `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` via `}<inlineCode parentName=\"p\">{`Expect::bool()->nullable()`}</inlineCode>{`.`}</p>\n    <p>{`An item can be made mandatory using `}<inlineCode parentName=\"p\">{`Expect::bool()->required()`}</inlineCode>{`. We change the default value to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` using `}<inlineCode parentName=\"p\">{`Expect::bool()->default(false)`}</inlineCode>{` or shortly using `}<inlineCode parentName=\"p\">{`Expect::bool(false)`}</inlineCode>{`.`}</p>\n    <p>{`And what if we wanted to accept `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` besides booleans? Then we list the allowed values, which we will also normalize to boolean:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::structure([\n    'processRefund' => Expect::anyOf(true, false, 1, 0)->castTo('bool'),\n    'refundAmount' => Expect::int(),\n]);\n\n$normalized = $processor->process($schema, $data);\nis_bool($normalized->processRefund); // true\n`}</code></pre>\n    <p>{`Now you know the basics of how the schema is defined and how the individual elements of the structure behave. We will now show what all the other elements can be used in defining a schema.`}</p>\n    <h2 {...{\n      \"id\": \"data-types-type\"\n    }}>{`Data Types: type()`}</h2>\n    <p>{`All standard PHP data types can be listed in the schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Expect::string($default = null)\nExpect::int($default = null)\nExpect::float($default = null)\nExpect::bool($default = null)\nExpect::null()\nExpect::array($default = [])\n`}</code></pre>\n    <p>{`And then all types `}<a parentName=\"p\" {...{\n        \"href\": \"https://doc.nette.org/validators#toc-validation-rules\"\n      }}>{`supported by the Validators`}</a>{` via `}<inlineCode parentName=\"p\">{`Expect::type('scalar')`}</inlineCode>{` or abbreviated `}<inlineCode parentName=\"p\">{`Expect::scalar()`}</inlineCode>{`. Also class or interface names are accepted, e.g. `}<inlineCode parentName=\"p\">{`Expect::type('AddressEntity')`}</inlineCode>{`.`}</p>\n    <p>{`You can also use union notation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Expect::type('bool|string|array')\n`}</code></pre>\n    <p>{`The default value is always `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` except for `}<inlineCode parentName=\"p\">{`array`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`list`}</inlineCode>{`, where it is an empty array. (A list is an array indexed in ascending order of numeric keys from zero, that is, a non-associative array).`}</p>\n    <h2 {...{\n      \"id\": \"array-of-values-arrayof-listof\"\n    }}>{`Array of Values: arrayOf() listOf()`}</h2>\n    <p>{`The array is too general structure, it is more useful to specify exactly what elements it can contain. For example, an array whose elements can only be strings:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::arrayOf('string');\n\n$processor->process($schema, ['hello', 'world']); // OK\n$processor->process($schema, ['a' => 'hello', 'b' => 'world']); // OK\n$processor->process($schema, ['key' => 123]); // ERROR: 123 is not a string\n`}</code></pre>\n    <p>{`The second parameter can be used to specify keys (since version 1.2):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::arrayOf('string', 'int');\n\n$processor->process($schema, ['hello', 'world']); // OK\n$processor->process($schema, ['a' => 'hello']); // ERROR: 'a' is not int\n`}</code></pre>\n    <p>{`The list is an indexed array:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::listOf('string');\n\n$processor->process($schema, ['a', 'b']); // OK\n$processor->process($schema, ['a', 123]); // ERROR: 123 is not a string\n$processor->process($schema, ['key' => 'a']); // ERROR: is not a list\n$processor->process($schema, [1 => 'a', 0 => 'b']); // ERROR: is not a list\n`}</code></pre>\n    <p>{`The parameter can also be a schema, so we can write:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Expect::arrayOf(Expect::bool())\n`}</code></pre>\n    <p>{`The default value is an empty array. If you specify a default value, it will be merged with the passed data. This can be disabled using `}<inlineCode parentName=\"p\">{`mergeDefaults(false)`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"enumeration-anyof\"\n    }}>{`Enumeration: anyOf()`}</h2>\n    <p><inlineCode parentName=\"p\">{`anyOf()`}</inlineCode>{` is a set of values ​​or schemas that a value can be. Here's how to write an array of elements that can be either `}<inlineCode parentName=\"p\">{`'a'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::listOf(\n    Expect::anyOf('a', true, null),\n);\n\n$processor->process($schema, ['a', true, null, 'a']); // OK\n$processor->process($schema, ['a', false]); // ERROR: false does not belong there\n`}</code></pre>\n    <p>{`The enumeration elements can also be schemas:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::listOf(\n    Expect::anyOf(Expect::string(), true, null),\n);\n\n$processor->process($schema, ['foo', true, null, 'bar']); // OK\n$processor->process($schema, [123]); // ERROR\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`anyOf()`}</inlineCode>{` method accepts variants as individual parameters, not as array. To pass it an array of values, use the unpacking operator `}<inlineCode parentName=\"p\">{`anyOf(...$variants)`}</inlineCode>{`.`}</p>\n    <p>{`The default value is `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`. Use the `}<inlineCode parentName=\"p\">{`firstIsDefault()`}</inlineCode>{` method to make the first element the default:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// default is 'hello'\nExpect::anyOf(Expect::string('hello'), true, null)->firstIsDefault();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"structures\"\n    }}>{`Structures`}</h2>\n    <p>{`Structures are objects with defined keys. Each of these key => value pairs is referred to as a \"property\":`}</p>\n    <p>{`Structures accept arrays and objects and return objects `}<inlineCode parentName=\"p\">{`stdClass`}</inlineCode>{` (unless you change it with `}<inlineCode parentName=\"p\">{`castTo('array')`}</inlineCode>{`, etc.).`}</p>\n    <p>{`By default, all properties are optional and have a default value of `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`. You can define mandatory properties using `}<inlineCode parentName=\"p\">{`required()`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::structure([\n    'required' => Expect::string()->required(),\n    'optional' => Expect::string(), // the default value is null\n]);\n\n$processor->process($schema, ['optional' => '']);\n// ERROR: option 'required' is missing\n\n$processor->process($schema, ['required' => 'foo']);\n// OK, returns {'required' => 'foo', 'optional' => null}\n`}</code></pre>\n    <p>{`If you do not want to output properties with only a default value, use `}<inlineCode parentName=\"p\">{`skipDefaults()`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::structure([\n    'required' => Expect::string()->required(),\n    'optional' => Expect::string(),\n])->skipDefaults();\n\n$processor->process($schema, ['required' => 'foo']);\n// OK, returns {'required' => 'foo'}\n`}</code></pre>\n    <p>{`Although `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` is the default value of the `}<inlineCode parentName=\"p\">{`optional`}</inlineCode>{` property, it is not allowed in the input data (the value must be a string). Properties accepting `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` are defined using `}<inlineCode parentName=\"p\">{`nullable()`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::structure([\n    'optional' => Expect::string(),\n    'nullable' => Expect::string()->nullable(),\n]);\n\n$processor->process($schema, ['optional' => null]);\n// ERROR: 'optional' expects to be string, null given.\n\n$processor->process($schema, ['nullable' => null]);\n// OK, returns {'optional' => null, 'nullable' => null}\n`}</code></pre>\n    <p>{`By default, there can be no extra items in the input data:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::structure([\n    'key' => Expect::string(),\n]);\n\n$processor->process($schema, ['additional' => 1]);\n// ERROR: Unexpected item 'additional'\n`}</code></pre>\n    <p>{`Which we can change with `}<inlineCode parentName=\"p\">{`otherItems()`}</inlineCode>{`. As a parameter, we will specify the schema for each extra element:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::structure([\n    'key' => Expect::string(),\n])->otherItems(Expect::int());\n\n$processor->process($schema, ['additional' => 1]); // OK\n$processor->process($schema, ['additional' => true]); // ERROR\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"deprecations\"\n    }}>{`Deprecations`}</h2>\n    <p>{`You can deprecate property using the `}<inlineCode parentName=\"p\">{`deprecated([string $message])`}</inlineCode>{` method. Deprecation notices are returned by `}<inlineCode parentName=\"p\">{`$processor->getWarnings()`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::structure([\n    'old' => Expect::int()->deprecated('The item %path% is deprecated'),\n]);\n\n$processor->process($schema, ['old' => 1]); // OK\n$processor->getWarnings(); // [\"The item 'old' is deprecated\"]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ranges-min-max\"\n    }}>{`Ranges: min() max()`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`min()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max()`}</inlineCode>{` to limit the number of elements for arrays:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// array, at least 10 items, maximum 20 items\nExpect::array()->min(10)->max(20);\n`}</code></pre>\n    <p>{`For strings, limit their length:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// string, at least 10 characters long, maximum 20 characters\nExpect::string()->min(10)->max(20);\n`}</code></pre>\n    <p>{`For numbers, limit their value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// integer, between 10 and 20 inclusive\nExpect::int()->min(10)->max(20);\n`}</code></pre>\n    <p>{`Of course, it is possible to mention only `}<inlineCode parentName=\"p\">{`min()`}</inlineCode>{`, or only `}<inlineCode parentName=\"p\">{`max()`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// string, maximum 20 characters\nExpect::string()->max(20);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"regular-expressions-pattern\"\n    }}>{`Regular Expressions: pattern()`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`pattern()`}</inlineCode>{`, you can specify a regular expression which the `}<strong parentName=\"p\">{`whole`}</strong>{` input string must match (i.e. as if it were wrapped in characters `}<inlineCode parentName=\"p\">{`^`}</inlineCode>{` a `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// just 9 digits\nExpect::string()->pattern('\\\\d{9}');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-assertions-assert\"\n    }}>{`Custom Assertions: assert()`}</h2>\n    <p>{`You can add any other restrictions using `}<inlineCode parentName=\"p\">{`assert(callable $fn)`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$countIsEven = fn($v) => count($v) % 2 === 0;\n\n$schema = Expect::arrayOf('string')\n    ->assert($countIsEven); // the count must be even\n\n$processor->process($schema, ['a', 'b']); // OK\n$processor->process($schema, ['a', 'b', 'c']); // ERROR: 3 is not even\n`}</code></pre>\n    <p>{`Or`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Expect::string()->assert('is_file'); // the file must exist\n`}</code></pre>\n    <p>{`You can add your own description for each assertion. It will be part of the error message.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::arrayOf('string')\n    ->assert($countIsEven, 'Even items in array');\n\n$processor->process($schema, ['a', 'b', 'c']);\n// Failed assertion \"Even items in array\" for item with value array.\n`}</code></pre>\n    <p>{`The method can be called repeatedly to add multiple constraints. It can be intermixed with calls to `}<inlineCode parentName=\"p\">{`transform()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`castTo()`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"transformation-transform\"\n    }}>{`Transformation: transform()`}</h2>\n    <p>{`Successfully validated data can be modified using a custom function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// conversion to uppercase:\nExpect::string()->transform(fn(string $s) => strtoupper($s));\n`}</code></pre>\n    <p>{`The method can be called repeatedly to add multiple transformations. It can be intermixed with calls to `}<inlineCode parentName=\"p\">{`assert()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`castTo()`}</inlineCode>{`. The operations will be executed in the order in which they are declared:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Expect::type('string|int')\n    ->castTo('string')\n    ->assert('ctype_lower', 'All characters must be lowercased')\n    ->transform(fn(string $s) => strtoupper($s)); // conversion to uppercase\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`transform()`}</inlineCode>{` method can both transform and validate the value simultaneously. This is often simpler and less redundant than chaining `}<inlineCode parentName=\"p\">{`transform()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`assert()`}</inlineCode>{`. For this purpose, the function receives a `}<a parentName=\"p\" {...{\n        \"href\": \"https://api.nette.org/schema/master/Nette/Schema/Context.html\"\n      }}>{`Nette\\\\Schema\\\\Context`}</a>{` object with an `}<inlineCode parentName=\"p\">{`addError()`}</inlineCode>{` method, which can be used to add information about validation issues:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Expect::string()\n    ->transform(function (string $s, Nette\\\\Schema\\\\Context $context) {\n        if (!ctype_lower($s)) {\n            $context->addError('All characters must be lowercased', 'my.case.error');\n            return null;\n        }\n\n        return strtoupper($s);\n    });\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"casting-castto\"\n    }}>{`Casting: castTo()`}</h2>\n    <p>{`Successfully validated data can be cast:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Expect::scalar()->castTo('string');\n`}</code></pre>\n    <p>{`In addition to native PHP types, you can also cast to classes. It distinguishes whether it is a simple class without a constructor or a class with a constructor. If the class has no constructor, an instance of it is created and all elements of the structure are written to its properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class Info\n{\n    public bool $processRefund;\n    public int $refundAmount;\n}\n\nExpect::structure([\n    'processRefund' => Expect::bool(),\n    'refundAmount' => Expect::int(),\n])->castTo(Info::class);\n\n// creates '$obj = new Info' and writes to $obj->processRefund and $obj->refundAmount\n`}</code></pre>\n    <p>{`If the class has a constructor, the elements of the structure are passed as named parameters to the constructor:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class Info\n{\n    public function __construct(\n        public bool $processRefund,\n        public int $refundAmount,\n    ) {\n    }\n}\n\n// creates $obj = new Info(processRefund: ..., refundAmount: ...)\n`}</code></pre>\n    <p>{`Casting combined with a scalar parameter creates an object and passes the value as the sole parameter to the constructor:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Expect::string()->castTo(DateTime::class);\n// creates new DateTime(...)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"normalization-before\"\n    }}>{`Normalization: before()`}</h2>\n    <p>{`Prior to the validation itself, the data can be normalized using the method `}<inlineCode parentName=\"p\">{`before()`}</inlineCode>{`. As an example, let's have an element that must be an array of strings (eg `}<inlineCode parentName=\"p\">{`['a', 'b', 'c']`}</inlineCode>{`), but receives input in the form of a string `}<inlineCode parentName=\"p\">{`a b c`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$explode = fn($v) => explode(' ', $v);\n\n$schema = Expect::arrayOf('string')\n    ->before($explode);\n\n$normalized = $processor->process($schema, 'a b c');\n// OK, returns ['a', 'b', 'c']\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mapping-to-objects-from\"\n    }}>{`Mapping to Objects: from()`}</h2>\n    <p>{`You can generate structure schema from the class. Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class Config\n{\n    /** @var string */\n    public $name;\n    /** @var string|null */\n    public $password;\n    /** @var bool */\n    public $admin = false;\n}\n\n$schema = Expect::from(new Config);\n\n$data = [\n    'name' => 'jeff',\n];\n\n$normalized = $processor->process($schema, $data);\n// $normalized instanceof Config\n// $normalized = {'name' => 'jeff', 'password' => null, 'admin' => false}\n`}</code></pre>\n    <p>{`If you are using PHP 7.4 or higher, you can use native types:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class Config\n{\n    public string $name;\n    public ?string $password;\n    public bool $admin = false;\n}\n\n$schema = Expect::from(new Config);\n`}</code></pre>\n    <p>{`Anonymous classes are also supported:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::from(new class {\n    public string $name;\n    public ?string $password;\n    public bool $admin = false;\n});\n`}</code></pre>\n    <p>{`Because the information obtained from the class definition may not be sufficient, you can add a custom schema for the elements with the second parameter:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$schema = Expect::from(new Config, [\n    'name' => Expect::string()->pattern('\\\\w:.*'),\n]);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}