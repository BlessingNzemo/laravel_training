{"expireTime":9007200985218080000,"key":"gatsby-plugin-mdx-entire-payload-0ee71fe69a85b625aa378d780c84415d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":109,"offset":110},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":112},"end":{"line":5,"column":29,"offset":140},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://packagist.org/packages/sebastian/diff","children":[{"type":"image","title":null,"url":"https://poser.pugx.org/sebastian/diff/v/stable.png","alt":"Latest Stable Version","position":{"start":{"line":7,"column":2,"offset":143},"end":{"line":7,"column":78,"offset":219},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":7,"column":126,"offset":267},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":7,"column":126,"offset":267},"end":{"line":8,"column":1,"offset":268},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/sebastianbergmann/diff/actions","children":[{"type":"image","title":null,"url":"https://github.com/sebastianbergmann/diff/workflows/CI/badge.svg","alt":"CI Status","position":{"start":{"line":8,"column":2,"offset":269},"end":{"line":8,"column":80,"offset":347},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":268},"end":{"line":8,"column":132,"offset":399},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":8,"column":132,"offset":399},"end":{"line":9,"column":1,"offset":400},"indent":[1]}},{"type":"link","title":null,"url":"https://codecov.io/gh/sebastianbergmann/diff","children":[{"type":"image","title":null,"url":"https://codecov.io/gh/sebastianbergmann/diff/branch/main/graph/badge.svg","alt":"codecov","position":{"start":{"line":9,"column":2,"offset":401},"end":{"line":9,"column":86,"offset":485},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":400},"end":{"line":9,"column":133,"offset":532},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":9,"column":133,"offset":532},"indent":[1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"sebastian/diff","position":{"start":{"line":11,"column":3,"offset":536},"end":{"line":11,"column":17,"offset":550},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":534},"end":{"line":11,"column":17,"offset":550},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Diff implementation for PHP, factored out of PHPUnit into a stand-alone component.","position":{"start":{"line":13,"column":1,"offset":552},"end":{"line":13,"column":83,"offset":634},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":552},"end":{"line":13,"column":83,"offset":634},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Installation","position":{"start":{"line":15,"column":4,"offset":639},"end":{"line":15,"column":16,"offset":651},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":636},"end":{"line":15,"column":16,"offset":651},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can add this library as a local, per-project dependency to your project using ","position":{"start":{"line":17,"column":1,"offset":653},"end":{"line":17,"column":83,"offset":735},"indent":[]}},{"type":"link","title":null,"url":"https://getcomposer.org/","children":[{"type":"text","value":"Composer","position":{"start":{"line":17,"column":84,"offset":736},"end":{"line":17,"column":92,"offset":744},"indent":[]}}],"position":{"start":{"line":17,"column":83,"offset":735},"end":{"line":17,"column":119,"offset":771},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":17,"column":119,"offset":771},"end":{"line":17,"column":120,"offset":772},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":653},"end":{"line":17,"column":120,"offset":772},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"composer require sebastian/diff","position":{"start":{"line":19,"column":1,"offset":774},"end":{"line":21,"column":4,"offset":813},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you only need this library during development, for instance to run your project's test suite, then you should add it as a development-time dependency:","position":{"start":{"line":23,"column":1,"offset":815},"end":{"line":23,"column":154,"offset":968},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":815},"end":{"line":23,"column":154,"offset":968},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"composer require --dev sebastian/diff","position":{"start":{"line":25,"column":1,"offset":970},"end":{"line":27,"column":4,"offset":1015},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Usage","position":{"start":{"line":29,"column":5,"offset":1021},"end":{"line":29,"column":10,"offset":1026},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1017},"end":{"line":29,"column":10,"offset":1026},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Generating diff","position":{"start":{"line":31,"column":6,"offset":1033},"end":{"line":31,"column":21,"offset":1048},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1028},"end":{"line":31,"column":21,"offset":1048},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":33,"column":1,"offset":1050},"end":{"line":33,"column":5,"offset":1054},"indent":[]}},{"type":"inlineCode","value":"Differ","position":{"start":{"line":33,"column":5,"offset":1054},"end":{"line":33,"column":13,"offset":1062},"indent":[]}},{"type":"text","value":" class can be used to generate a textual representation of the difference between two strings:","position":{"start":{"line":33,"column":13,"offset":1062},"end":{"line":33,"column":107,"offset":1156},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1050},"end":{"line":33,"column":107,"offset":1156},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?php\nuse SebastianBergmann\\Diff\\Differ;\n\n$differ = new Differ;\nprint $differ->diff('foo', 'bar');","position":{"start":{"line":35,"column":1,"offset":1158},"end":{"line":41,"column":4,"offset":1267},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The code above yields the output below:","position":{"start":{"line":43,"column":1,"offset":1269},"end":{"line":43,"column":40,"offset":1308},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1269},"end":{"line":43,"column":40,"offset":1308},"indent":[]}},{"type":"code","lang":"diff","meta":null,"value":"--- Original\n+++ New\n@@ @@\n-foo\n+bar","position":{"start":{"line":44,"column":1,"offset":1309},"end":{"line":50,"column":4,"offset":1357},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There are three output builders available in this package:","position":{"start":{"line":52,"column":1,"offset":1359},"end":{"line":52,"column":59,"offset":1417},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1359},"end":{"line":52,"column":59,"offset":1417},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"UnifiedDiffOutputBuilder","position":{"start":{"line":54,"column":6,"offset":1424},"end":{"line":54,"column":30,"offset":1448},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1419},"end":{"line":54,"column":30,"offset":1448},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is default builder, which generates the output close to udiff and is used by PHPUnit.","position":{"start":{"line":56,"column":1,"offset":1450},"end":{"line":56,"column":91,"offset":1540},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1450},"end":{"line":56,"column":91,"offset":1540},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?php\n\nuse SebastianBergmann\\Diff\\Differ;\nuse SebastianBergmann\\Diff\\Output\\UnifiedDiffOutputBuilder;\n\n$builder = new UnifiedDiffOutputBuilder(\n    \"--- Original\\n+++ New\\n\", // custom header\n    false                      // do not add line numbers to the diff \n);\n\n$differ = new Differ($builder);\nprint $differ->diff('foo', 'bar');","position":{"start":{"line":58,"column":1,"offset":1542},"end":{"line":71,"column":4,"offset":1886},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"StrictUnifiedDiffOutputBuilder","position":{"start":{"line":73,"column":6,"offset":1893},"end":{"line":73,"column":36,"offset":1923},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":1888},"end":{"line":73,"column":36,"offset":1923},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Generates (strict) Unified diff's (unidiffs) with hunks,\nsimilar to ","position":{"start":{"line":75,"column":1,"offset":1925},"end":{"line":76,"column":12,"offset":1993},"indent":[1]}},{"type":"inlineCode","value":"diff -u","position":{"start":{"line":76,"column":12,"offset":1993},"end":{"line":76,"column":21,"offset":2002},"indent":[]}},{"type":"text","value":" and compatible with ","position":{"start":{"line":76,"column":21,"offset":2002},"end":{"line":76,"column":42,"offset":2023},"indent":[]}},{"type":"inlineCode","value":"patch","position":{"start":{"line":76,"column":42,"offset":2023},"end":{"line":76,"column":49,"offset":2030},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":76,"column":49,"offset":2030},"end":{"line":76,"column":54,"offset":2035},"indent":[]}},{"type":"inlineCode","value":"git apply","position":{"start":{"line":76,"column":54,"offset":2035},"end":{"line":76,"column":65,"offset":2046},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":76,"column":65,"offset":2046},"end":{"line":76,"column":66,"offset":2047},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":1925},"end":{"line":76,"column":66,"offset":2047},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"<?php\n\nuse SebastianBergmann\\Diff\\Differ;\nuse SebastianBergmann\\Diff\\Output\\StrictUnifiedDiffOutputBuilder;\n\n$builder = new StrictUnifiedDiffOutputBuilder([\n    'collapseRanges'      => true, // ranges of length one are rendered with the trailing `,1`\n    'commonLineThreshold' => 6,    // number of same lines before ending a new hunk and creating a new one (if needed)\n    'contextLines'        => 3,    // like `diff:  -u, -U NUM, --unified[=NUM]`, for patch/git apply compatibility best to keep at least @ 3\n    'fromFile'            => '',\n    'fromFileDate'        => null,\n    'toFile'              => '',\n    'toFileDate'          => null,\n]);\n\n$differ = new Differ($builder);\nprint $differ->diff('foo', 'bar');","position":{"start":{"line":78,"column":1,"offset":2049},"end":{"line":96,"column":4,"offset":2779},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"DiffOnlyOutputBuilder","position":{"start":{"line":98,"column":6,"offset":2786},"end":{"line":98,"column":27,"offset":2807},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2781},"end":{"line":98,"column":27,"offset":2807},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Output only the lines that differ.","position":{"start":{"line":100,"column":1,"offset":2809},"end":{"line":100,"column":35,"offset":2843},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":2809},"end":{"line":100,"column":35,"offset":2843},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?php\n\nuse SebastianBergmann\\Diff\\Differ;\nuse SebastianBergmann\\Diff\\Output\\DiffOnlyOutputBuilder;\n\n$builder = new DiffOnlyOutputBuilder(\n    \"--- Original\\n+++ New\\n\"\n);\n\n$differ = new Differ($builder);\nprint $differ->diff('foo', 'bar');","position":{"start":{"line":102,"column":1,"offset":2845},"end":{"line":114,"column":4,"offset":3094},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"DiffOutputBuilderInterface","position":{"start":{"line":116,"column":6,"offset":3101},"end":{"line":116,"column":32,"offset":3127},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":3096},"end":{"line":116,"column":32,"offset":3127},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can pass any output builder to the ","position":{"start":{"line":118,"column":1,"offset":3129},"end":{"line":118,"column":40,"offset":3168},"indent":[]}},{"type":"inlineCode","value":"Differ","position":{"start":{"line":118,"column":40,"offset":3168},"end":{"line":118,"column":48,"offset":3176},"indent":[]}},{"type":"text","value":" class as longs as it implements the ","position":{"start":{"line":118,"column":48,"offset":3176},"end":{"line":118,"column":85,"offset":3213},"indent":[]}},{"type":"inlineCode","value":"DiffOutputBuilderInterface","position":{"start":{"line":118,"column":85,"offset":3213},"end":{"line":118,"column":113,"offset":3241},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":118,"column":113,"offset":3241},"end":{"line":118,"column":114,"offset":3242},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":3129},"end":{"line":118,"column":114,"offset":3242},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Parsing diff","position":{"start":{"line":120,"column":6,"offset":3249},"end":{"line":120,"column":18,"offset":3261},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":3244},"end":{"line":120,"column":18,"offset":3261},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":122,"column":1,"offset":3263},"end":{"line":122,"column":5,"offset":3267},"indent":[]}},{"type":"inlineCode","value":"Parser","position":{"start":{"line":122,"column":5,"offset":3267},"end":{"line":122,"column":13,"offset":3275},"indent":[]}},{"type":"text","value":" class can be used to parse a unified diff into an object graph:","position":{"start":{"line":122,"column":13,"offset":3275},"end":{"line":122,"column":77,"offset":3339},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":3263},"end":{"line":122,"column":77,"offset":3339},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use SebastianBergmann\\Diff\\Parser;\nuse SebastianBergmann\\Git;\n\n$git = new Git('/usr/local/src/money');\n\n$diff = $git->getDiff(\n  '948a1a07768d8edd10dcefa8315c1cbeffb31833',\n  'c07a373d2399f3e686234c4f7f088d635eb9641b'\n);\n\n$parser = new Parser;\n\nprint_r($parser->parse($diff));","position":{"start":{"line":124,"column":1,"offset":3341},"end":{"line":138,"column":4,"offset":3628},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The code above yields the output below:","position":{"start":{"line":140,"column":1,"offset":3630},"end":{"line":140,"column":40,"offset":3669},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":3630},"end":{"line":140,"column":40,"offset":3669},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Array\n(\n    [0] => SebastianBergmann\\Diff\\Diff Object\n        (\n            [from:SebastianBergmann\\Diff\\Diff:private] => a/tests/MoneyTest.php\n            [to:SebastianBergmann\\Diff\\Diff:private] => b/tests/MoneyTest.php\n            [chunks:SebastianBergmann\\Diff\\Diff:private] => Array\n                (\n                    [0] => SebastianBergmann\\Diff\\Chunk Object\n                        (\n                            [start:SebastianBergmann\\Diff\\Chunk:private] => 87\n                            [startRange:SebastianBergmann\\Diff\\Chunk:private] => 7\n                            [end:SebastianBergmann\\Diff\\Chunk:private] => 87\n                            [endRange:SebastianBergmann\\Diff\\Chunk:private] => 7\n                            [lines:SebastianBergmann\\Diff\\Chunk:private] => Array\n                                (\n                                    [0] => SebastianBergmann\\Diff\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\Diff\\Line:private] => 3\n                                            [content:SebastianBergmann\\Diff\\Line:private] =>      * @covers SebastianBergmann\\Money\\Money::add\n                                        )\n\n                                    [1] => SebastianBergmann\\Diff\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\Diff\\Line:private] => 3\n                                            [content:SebastianBergmann\\Diff\\Line:private] =>      * @covers SebastianBergmann\\Money\\Money::newMoney\n                                        )\n\n                                    [2] => SebastianBergmann\\Diff\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\Diff\\Line:private] => 3\n                                            [content:SebastianBergmann\\Diff\\Line:private] =>      */\n                                        )\n\n                                    [3] => SebastianBergmann\\Diff\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\Diff\\Line:private] => 2\n                                            [content:SebastianBergmann\\Diff\\Line:private] =>     public function testAnotherMoneyWithSameCurrencyObjectCanBeAdded()\n                                        )\n\n                                    [4] => SebastianBergmann\\Diff\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\Diff\\Line:private] => 1\n                                            [content:SebastianBergmann\\Diff\\Line:private] =>     public function testAnotherMoneyObjectWithSameCurrencyCanBeAdded()\n                                        )\n\n                                    [5] => SebastianBergmann\\Diff\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\Diff\\Line:private] => 3\n                                            [content:SebastianBergmann\\Diff\\Line:private] =>     {\n                                        )\n\n                                    [6] => SebastianBergmann\\Diff\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\Diff\\Line:private] => 3\n                                            [content:SebastianBergmann\\Diff\\Line:private] =>         $a = new Money(1, new Currency('EUR'));\n                                        )\n\n                                    [7] => SebastianBergmann\\Diff\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\Diff\\Line:private] => 3\n                                            [content:SebastianBergmann\\Diff\\Line:private] =>         $b = new Money(2, new Currency('EUR'));\n                                        )\n                                )\n                        )\n                )\n        )\n)","position":{"start":{"line":142,"column":1,"offset":3671},"end":{"line":209,"column":6,"offset":7975},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note: If the chunk size is 0 lines, i.e., ","position":{"start":{"line":211,"column":1,"offset":7977},"end":{"line":211,"column":43,"offset":8019},"indent":[]}},{"type":"inlineCode","value":"getStartRange()","position":{"start":{"line":211,"column":43,"offset":8019},"end":{"line":211,"column":60,"offset":8036},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":211,"column":60,"offset":8036},"end":{"line":211,"column":64,"offset":8040},"indent":[]}},{"type":"inlineCode","value":"getEndRange()","position":{"start":{"line":211,"column":64,"offset":8040},"end":{"line":211,"column":79,"offset":8055},"indent":[]}},{"type":"text","value":" return 0, the number of line returned by ","position":{"start":{"line":211,"column":79,"offset":8055},"end":{"line":211,"column":121,"offset":8097},"indent":[]}},{"type":"inlineCode","value":"getStart()","position":{"start":{"line":211,"column":121,"offset":8097},"end":{"line":211,"column":133,"offset":8109},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":211,"column":133,"offset":8109},"end":{"line":211,"column":137,"offset":8113},"indent":[]}},{"type":"inlineCode","value":"getEnd()","position":{"start":{"line":211,"column":137,"offset":8113},"end":{"line":211,"column":147,"offset":8123},"indent":[]}},{"type":"text","value":" is one lower than one would expect. It is the line number after which the chunk should be inserted or deleted; in all other cases, it gives the first line number of the replaced range of lines.","position":{"start":{"line":211,"column":147,"offset":8123},"end":{"line":211,"column":341,"offset":8317},"indent":[]}}],"position":{"start":{"line":211,"column":1,"offset":7977},"end":{"line":211,"column":341,"offset":8317},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":214,"column":1,"offset":8320},"end":{"line":214,"column":31,"offset":8350},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":214,"column":31,"offset":8350}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://packagist.org/packages/sebastian/diff\"\n      }}><img alt=\"Latest Stable Version\" src=\"https://poser.pugx.org/sebastian/diff/v/stable.png\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/sebastianbergmann/diff/actions\"\n      }}><img alt=\"CI Status\" src=\"https://github.com/sebastianbergmann/diff/workflows/CI/badge.svg\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://codecov.io/gh/sebastianbergmann/diff\"\n      }}><img alt=\"codecov\" src=\"https://codecov.io/gh/sebastianbergmann/diff/branch/main/graph/badge.svg\" /></a></p>\n    <h1 {...{\n      \"id\": \"sebastiandiff\"\n    }}>{`sebastian/diff`}</h1>\n    <p>{`Diff implementation for PHP, factored out of PHPUnit into a stand-alone component.`}</p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`You can add this library as a local, per-project dependency to your project using `}<a parentName=\"p\" {...{\n        \"href\": \"https://getcomposer.org/\"\n      }}>{`Composer`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`composer require sebastian/diff\n`}</code></pre>\n    <p>{`If you only need this library during development, for instance to run your project's test suite, then you should add it as a development-time dependency:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`composer require --dev sebastian/diff\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <h4 {...{\n      \"id\": \"generating-diff\"\n    }}>{`Generating diff`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Differ`}</inlineCode>{` class can be used to generate a textual representation of the difference between two strings:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\nuse SebastianBergmann\\\\Diff\\\\Differ;\n\n$differ = new Differ;\nprint $differ->diff('foo', 'bar');\n`}</code></pre>\n    <p>{`The code above yields the output below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`--- Original\n+++ New\n@@ @@\n-foo\n+bar\n`}</code></pre>\n    <p>{`There are three output builders available in this package:`}</p>\n    <h4 {...{\n      \"id\": \"unifieddiffoutputbuilder\"\n    }}>{`UnifiedDiffOutputBuilder`}</h4>\n    <p>{`This is default builder, which generates the output close to udiff and is used by PHPUnit.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nuse SebastianBergmann\\\\Diff\\\\Differ;\nuse SebastianBergmann\\\\Diff\\\\Output\\\\UnifiedDiffOutputBuilder;\n\n$builder = new UnifiedDiffOutputBuilder(\n    \"--- Original\\\\n+++ New\\\\n\", // custom header\n    false                      // do not add line numbers to the diff \n);\n\n$differ = new Differ($builder);\nprint $differ->diff('foo', 'bar');\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"strictunifieddiffoutputbuilder\"\n    }}>{`StrictUnifiedDiffOutputBuilder`}</h4>\n    <p>{`Generates (strict) Unified diff's (unidiffs) with hunks,\nsimilar to `}<inlineCode parentName=\"p\">{`diff -u`}</inlineCode>{` and compatible with `}<inlineCode parentName=\"p\">{`patch`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`git apply`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nuse SebastianBergmann\\\\Diff\\\\Differ;\nuse SebastianBergmann\\\\Diff\\\\Output\\\\StrictUnifiedDiffOutputBuilder;\n\n$builder = new StrictUnifiedDiffOutputBuilder([\n    'collapseRanges'      => true, // ranges of length one are rendered with the trailing \\`,1\\`\n    'commonLineThreshold' => 6,    // number of same lines before ending a new hunk and creating a new one (if needed)\n    'contextLines'        => 3,    // like \\`diff:  -u, -U NUM, --unified[=NUM]\\`, for patch/git apply compatibility best to keep at least @ 3\n    'fromFile'            => '',\n    'fromFileDate'        => null,\n    'toFile'              => '',\n    'toFileDate'          => null,\n]);\n\n$differ = new Differ($builder);\nprint $differ->diff('foo', 'bar');\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"diffonlyoutputbuilder\"\n    }}>{`DiffOnlyOutputBuilder`}</h4>\n    <p>{`Output only the lines that differ.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nuse SebastianBergmann\\\\Diff\\\\Differ;\nuse SebastianBergmann\\\\Diff\\\\Output\\\\DiffOnlyOutputBuilder;\n\n$builder = new DiffOnlyOutputBuilder(\n    \"--- Original\\\\n+++ New\\\\n\"\n);\n\n$differ = new Differ($builder);\nprint $differ->diff('foo', 'bar');\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"diffoutputbuilderinterface\"\n    }}>{`DiffOutputBuilderInterface`}</h4>\n    <p>{`You can pass any output builder to the `}<inlineCode parentName=\"p\">{`Differ`}</inlineCode>{` class as longs as it implements the `}<inlineCode parentName=\"p\">{`DiffOutputBuilderInterface`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"parsing-diff\"\n    }}>{`Parsing diff`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Parser`}</inlineCode>{` class can be used to parse a unified diff into an object graph:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use SebastianBergmann\\\\Diff\\\\Parser;\nuse SebastianBergmann\\\\Git;\n\n$git = new Git('/usr/local/src/money');\n\n$diff = $git->getDiff(\n  '948a1a07768d8edd10dcefa8315c1cbeffb31833',\n  'c07a373d2399f3e686234c4f7f088d635eb9641b'\n);\n\n$parser = new Parser;\n\nprint_r($parser->parse($diff));\n`}</code></pre>\n    <p>{`The code above yields the output below:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Array\n(\n    [0] => SebastianBergmann\\\\Diff\\\\Diff Object\n        (\n            [from:SebastianBergmann\\\\Diff\\\\Diff:private] => a/tests/MoneyTest.php\n            [to:SebastianBergmann\\\\Diff\\\\Diff:private] => b/tests/MoneyTest.php\n            [chunks:SebastianBergmann\\\\Diff\\\\Diff:private] => Array\n                (\n                    [0] => SebastianBergmann\\\\Diff\\\\Chunk Object\n                        (\n                            [start:SebastianBergmann\\\\Diff\\\\Chunk:private] => 87\n                            [startRange:SebastianBergmann\\\\Diff\\\\Chunk:private] => 7\n                            [end:SebastianBergmann\\\\Diff\\\\Chunk:private] => 87\n                            [endRange:SebastianBergmann\\\\Diff\\\\Chunk:private] => 7\n                            [lines:SebastianBergmann\\\\Diff\\\\Chunk:private] => Array\n                                (\n                                    [0] => SebastianBergmann\\\\Diff\\\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\\\Diff\\\\Line:private] => 3\n                                            [content:SebastianBergmann\\\\Diff\\\\Line:private] =>      * @covers SebastianBergmann\\\\Money\\\\Money::add\n                                        )\n\n                                    [1] => SebastianBergmann\\\\Diff\\\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\\\Diff\\\\Line:private] => 3\n                                            [content:SebastianBergmann\\\\Diff\\\\Line:private] =>      * @covers SebastianBergmann\\\\Money\\\\Money::newMoney\n                                        )\n\n                                    [2] => SebastianBergmann\\\\Diff\\\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\\\Diff\\\\Line:private] => 3\n                                            [content:SebastianBergmann\\\\Diff\\\\Line:private] =>      */\n                                        )\n\n                                    [3] => SebastianBergmann\\\\Diff\\\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\\\Diff\\\\Line:private] => 2\n                                            [content:SebastianBergmann\\\\Diff\\\\Line:private] =>     public function testAnotherMoneyWithSameCurrencyObjectCanBeAdded()\n                                        )\n\n                                    [4] => SebastianBergmann\\\\Diff\\\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\\\Diff\\\\Line:private] => 1\n                                            [content:SebastianBergmann\\\\Diff\\\\Line:private] =>     public function testAnotherMoneyObjectWithSameCurrencyCanBeAdded()\n                                        )\n\n                                    [5] => SebastianBergmann\\\\Diff\\\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\\\Diff\\\\Line:private] => 3\n                                            [content:SebastianBergmann\\\\Diff\\\\Line:private] =>     {\n                                        )\n\n                                    [6] => SebastianBergmann\\\\Diff\\\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\\\Diff\\\\Line:private] => 3\n                                            [content:SebastianBergmann\\\\Diff\\\\Line:private] =>         $a = new Money(1, new Currency('EUR'));\n                                        )\n\n                                    [7] => SebastianBergmann\\\\Diff\\\\Line Object\n                                        (\n                                            [type:SebastianBergmann\\\\Diff\\\\Line:private] => 3\n                                            [content:SebastianBergmann\\\\Diff\\\\Line:private] =>         $b = new Money(2, new Currency('EUR'));\n                                        )\n                                )\n                        )\n                )\n        )\n)\n`}</code></pre>\n    <p>{`Note: If the chunk size is 0 lines, i.e., `}<inlineCode parentName=\"p\">{`getStartRange()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`getEndRange()`}</inlineCode>{` return 0, the number of line returned by `}<inlineCode parentName=\"p\">{`getStart()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`getEnd()`}</inlineCode>{` is one lower than one would expect. It is the line number after which the chunk should be inserted or deleted; in all other cases, it gives the first line number of the replaced range of lines.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}