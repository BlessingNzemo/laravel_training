{"expireTime":9007200985218064000,"key":"gatsby-plugin-mdx-entire-payload-ff8e6f85ddb7afc382837b10ae1c7376-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":109,"offset":110},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":112},"end":{"line":5,"column":29,"offset":140},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Tokenizer","position":{"start":{"line":7,"column":3,"offset":144},"end":{"line":7,"column":12,"offset":153},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":7,"column":12,"offset":153},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A small library for converting tokenized PHP source code into XML.","position":{"start":{"line":9,"column":1,"offset":155},"end":{"line":9,"column":67,"offset":221},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":155},"end":{"line":9,"column":67,"offset":221},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/theseer/tokenizer/actions/workflows/ci.yml","children":[{"type":"image","title":null,"url":"https://github.com/theseer/tokenizer/actions/workflows/ci.yml/badge.svg","alt":"Test","position":{"start":{"line":11,"column":2,"offset":224},"end":{"line":11,"column":82,"offset":304},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":223},"end":{"line":11,"column":146,"offset":368},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":223},"end":{"line":11,"column":146,"offset":368},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Installation","position":{"start":{"line":13,"column":4,"offset":373},"end":{"line":13,"column":16,"offset":385},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":370},"end":{"line":13,"column":16,"offset":385},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can add this library as a local, per-project dependency to your project using ","position":{"start":{"line":15,"column":1,"offset":387},"end":{"line":15,"column":83,"offset":469},"indent":[]}},{"type":"link","title":null,"url":"https://getcomposer.org/","children":[{"type":"text","value":"Composer","position":{"start":{"line":15,"column":84,"offset":470},"end":{"line":15,"column":92,"offset":478},"indent":[]}}],"position":{"start":{"line":15,"column":83,"offset":469},"end":{"line":15,"column":119,"offset":505},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":15,"column":119,"offset":505},"end":{"line":15,"column":120,"offset":506},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":387},"end":{"line":15,"column":120,"offset":506},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"composer require theseer/tokenizer","position":{"start":{"line":17,"column":1,"offset":508},"end":{"line":17,"column":39,"offset":546},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you only need this library during development, for instance to run your project's test suite, then you should add it as a development-time dependency:","position":{"start":{"line":19,"column":1,"offset":548},"end":{"line":19,"column":154,"offset":701},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":548},"end":{"line":19,"column":154,"offset":701},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"composer require --dev theseer/tokenizer","position":{"start":{"line":21,"column":1,"offset":703},"end":{"line":21,"column":45,"offset":747},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Usage examples","position":{"start":{"line":23,"column":4,"offset":752},"end":{"line":23,"column":18,"offset":766},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":749},"end":{"line":23,"column":18,"offset":766},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$tokenizer = new TheSeer\\Tokenizer\\Tokenizer();\n$tokens = $tokenizer->parse(file_get_contents(__DIR__ . '/src/XMLSerializer.php'));\n\n$serializer = new TheSeer\\Tokenizer\\XMLSerializer();\n$xml = $serializer->toXML($tokens);\n\necho $xml;","position":{"start":{"line":25,"column":1,"offset":768},"end":{"line":33,"column":4,"offset":1012},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The generated XML structure looks something like this:","position":{"start":{"line":35,"column":1,"offset":1014},"end":{"line":35,"column":55,"offset":1068},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1014},"end":{"line":35,"column":55,"offset":1068},"indent":[]}},{"type":"code","lang":"xml","meta":null,"value":"<?xml version=\"1.0\"?>\n<source xmlns=\"https://github.com/theseer/tokenizer\">\n <line no=\"1\">\n  <token name=\"T_OPEN_TAG\">&lt;?php </token>\n  <token name=\"T_DECLARE\">declare</token>\n  <token name=\"T_OPEN_BRACKET\">(</token>\n  <token name=\"T_STRING\">strict_types</token>\n  <token name=\"T_WHITESPACE\"> </token>\n  <token name=\"T_EQUAL\">=</token>\n  <token name=\"T_WHITESPACE\"> </token>\n  <token name=\"T_LNUMBER\">1</token>\n  <token name=\"T_CLOSE_BRACKET\">)</token>\n  <token name=\"T_SEMICOLON\">;</token>\n </line>\n</source>","position":{"start":{"line":37,"column":1,"offset":1070},"end":{"line":53,"column":4,"offset":1592},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":56,"column":1,"offset":1595},"end":{"line":56,"column":31,"offset":1625},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":56,"column":31,"offset":1625}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tokenizer\"\n    }}>{`Tokenizer`}</h1>\n    <p>{`A small library for converting tokenized PHP source code into XML.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/theseer/tokenizer/actions/workflows/ci.yml\"\n      }}><img alt=\"Test\" src=\"https://github.com/theseer/tokenizer/actions/workflows/ci.yml/badge.svg\" /></a></p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`You can add this library as a local, per-project dependency to your project using `}<a parentName=\"p\" {...{\n        \"href\": \"https://getcomposer.org/\"\n      }}>{`Composer`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`composer require theseer/tokenizer\n`}</code></pre>\n    <p>{`If you only need this library during development, for instance to run your project's test suite, then you should add it as a development-time dependency:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`composer require --dev theseer/tokenizer\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage-examples\"\n    }}>{`Usage examples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$tokenizer = new TheSeer\\\\Tokenizer\\\\Tokenizer();\n$tokens = $tokenizer->parse(file_get_contents(__DIR__ . '/src/XMLSerializer.php'));\n\n$serializer = new TheSeer\\\\Tokenizer\\\\XMLSerializer();\n$xml = $serializer->toXML($tokens);\n\necho $xml;\n`}</code></pre>\n    <p>{`The generated XML structure looks something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<?xml version=\"1.0\"?>\n<source xmlns=\"https://github.com/theseer/tokenizer\">\n <line no=\"1\">\n  <token name=\"T_OPEN_TAG\">&lt;?php </token>\n  <token name=\"T_DECLARE\">declare</token>\n  <token name=\"T_OPEN_BRACKET\">(</token>\n  <token name=\"T_STRING\">strict_types</token>\n  <token name=\"T_WHITESPACE\"> </token>\n  <token name=\"T_EQUAL\">=</token>\n  <token name=\"T_WHITESPACE\"> </token>\n  <token name=\"T_LNUMBER\">1</token>\n  <token name=\"T_CLOSE_BRACKET\">)</token>\n  <token name=\"T_SEMICOLON\">;</token>\n </line>\n</source>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}