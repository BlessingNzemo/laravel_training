{"expireTime":9007200985218091000,"key":"gatsby-plugin-mdx-entire-payload-67510e097221353d7f43c3a92c03229b-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":109,"offset":110},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":112},"end":{"line":5,"column":29,"offset":140},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Version","position":{"start":{"line":7,"column":3,"offset":144},"end":{"line":7,"column":10,"offset":151},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":7,"column":10,"offset":151},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Library for handling version information and constraints","position":{"start":{"line":9,"column":1,"offset":153},"end":{"line":9,"column":57,"offset":209},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":153},"end":{"line":9,"column":57,"offset":209},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://travis-ci.org/phar-io/version","children":[{"type":"image","title":null,"url":"https://travis-ci.org/phar-io/version.svg?branch=master","alt":"Build Status","position":{"start":{"line":11,"column":2,"offset":212},"end":{"line":11,"column":74,"offset":284},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":211},"end":{"line":11,"column":114,"offset":324},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":211},"end":{"line":11,"column":114,"offset":324},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Installation","position":{"start":{"line":13,"column":4,"offset":329},"end":{"line":13,"column":16,"offset":341},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":326},"end":{"line":13,"column":16,"offset":341},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can add this library as a local, per-project dependency to your project using ","position":{"start":{"line":15,"column":1,"offset":343},"end":{"line":15,"column":83,"offset":425},"indent":[]}},{"type":"link","title":null,"url":"https://getcomposer.org/","children":[{"type":"text","value":"Composer","position":{"start":{"line":15,"column":84,"offset":426},"end":{"line":15,"column":92,"offset":434},"indent":[]}}],"position":{"start":{"line":15,"column":83,"offset":425},"end":{"line":15,"column":119,"offset":461},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":15,"column":119,"offset":461},"end":{"line":15,"column":120,"offset":462},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":343},"end":{"line":15,"column":120,"offset":462},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"composer require phar-io/version","position":{"start":{"line":17,"column":1,"offset":464},"end":{"line":17,"column":37,"offset":500},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you only need this library during development, for instance to run your project's test suite, then you should add it as a development-time dependency:","position":{"start":{"line":19,"column":1,"offset":502},"end":{"line":19,"column":154,"offset":655},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":502},"end":{"line":19,"column":154,"offset":655},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"composer require --dev phar-io/version","position":{"start":{"line":21,"column":1,"offset":657},"end":{"line":21,"column":43,"offset":699},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Version constraints","position":{"start":{"line":23,"column":4,"offset":704},"end":{"line":23,"column":23,"offset":723},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":701},"end":{"line":23,"column":23,"offset":723},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A Version constraint describes a range of versions or a discrete version number. The format of version numbers follows the schema of ","position":{"start":{"line":25,"column":1,"offset":725},"end":{"line":25,"column":134,"offset":858},"indent":[]}},{"type":"link","title":null,"url":"http://semver.org","children":[{"type":"text","value":"semantic versioning","position":{"start":{"line":25,"column":135,"offset":859},"end":{"line":25,"column":154,"offset":878},"indent":[]}}],"position":{"start":{"line":25,"column":134,"offset":858},"end":{"line":25,"column":174,"offset":898},"indent":[]}},{"type":"text","value":": ","position":{"start":{"line":25,"column":174,"offset":898},"end":{"line":25,"column":176,"offset":900},"indent":[]}},{"type":"inlineCode","value":"<major>.<minor>.<patch>","position":{"start":{"line":25,"column":176,"offset":900},"end":{"line":25,"column":201,"offset":925},"indent":[]}},{"type":"text","value":". A constraint might contain an operator that describes the range.","position":{"start":{"line":25,"column":201,"offset":925},"end":{"line":25,"column":267,"offset":991},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":725},"end":{"line":25,"column":267,"offset":991},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Beside the typical mathematical operators like ","position":{"start":{"line":27,"column":1,"offset":993},"end":{"line":27,"column":48,"offset":1040},"indent":[]}},{"type":"inlineCode","value":"<=","position":{"start":{"line":27,"column":48,"offset":1040},"end":{"line":27,"column":52,"offset":1044},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":27,"column":52,"offset":1044},"end":{"line":27,"column":54,"offset":1046},"indent":[]}},{"type":"inlineCode","value":">=","position":{"start":{"line":27,"column":54,"offset":1046},"end":{"line":27,"column":58,"offset":1050},"indent":[]}},{"type":"text","value":", there are two special operators:","position":{"start":{"line":27,"column":58,"offset":1050},"end":{"line":27,"column":92,"offset":1084},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":993},"end":{"line":27,"column":92,"offset":1084},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Caret operator","position":{"start":{"line":29,"column":2,"offset":1087},"end":{"line":29,"column":16,"offset":1101},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1086},"end":{"line":29,"column":17,"offset":1102},"indent":[]}},{"type":"text","value":": ","position":{"start":{"line":29,"column":17,"offset":1102},"end":{"line":29,"column":19,"offset":1104},"indent":[]}},{"type":"inlineCode","value":"^1.0","position":{"start":{"line":29,"column":19,"offset":1104},"end":{"line":29,"column":25,"offset":1110},"indent":[]}},{"type":"text","value":"\ncan be written as ","position":{"start":{"line":29,"column":25,"offset":1110},"end":{"line":30,"column":19,"offset":1129},"indent":[1]}},{"type":"inlineCode","value":">=1.0.0 <2.0.0","position":{"start":{"line":30,"column":19,"offset":1129},"end":{"line":30,"column":35,"offset":1145},"indent":[]}},{"type":"text","value":" and read as »every Version within major version ","position":{"start":{"line":30,"column":35,"offset":1145},"end":{"line":30,"column":84,"offset":1194},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":30,"column":84,"offset":1194},"end":{"line":30,"column":87,"offset":1197},"indent":[]}},{"type":"text","value":"«.","position":{"start":{"line":30,"column":87,"offset":1197},"end":{"line":30,"column":89,"offset":1199},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1086},"end":{"line":30,"column":89,"offset":1199},"indent":[1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Tilde operator","position":{"start":{"line":32,"column":2,"offset":1202},"end":{"line":32,"column":16,"offset":1216},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1201},"end":{"line":32,"column":17,"offset":1217},"indent":[]}},{"type":"text","value":": ","position":{"start":{"line":32,"column":17,"offset":1217},"end":{"line":32,"column":19,"offset":1219},"indent":[]}},{"type":"inlineCode","value":"~1.0.0","position":{"start":{"line":32,"column":19,"offset":1219},"end":{"line":32,"column":27,"offset":1227},"indent":[]}},{"type":"text","value":"\ncan be written as ","position":{"start":{"line":32,"column":27,"offset":1227},"end":{"line":33,"column":19,"offset":1246},"indent":[1]}},{"type":"inlineCode","value":">=1.0.0 <1.1.0","position":{"start":{"line":33,"column":19,"offset":1246},"end":{"line":33,"column":35,"offset":1262},"indent":[]}},{"type":"text","value":" and read as »every version within minor version ","position":{"start":{"line":33,"column":35,"offset":1262},"end":{"line":33,"column":84,"offset":1311},"indent":[]}},{"type":"inlineCode","value":"1.1","position":{"start":{"line":33,"column":84,"offset":1311},"end":{"line":33,"column":89,"offset":1316},"indent":[]}},{"type":"text","value":". The behavior of tilde operator depends on whether a patch level version is provided or not. If no patch level is provided, tilde operator behaves like the caret operator: ","position":{"start":{"line":33,"column":89,"offset":1316},"end":{"line":33,"column":262,"offset":1489},"indent":[]}},{"type":"inlineCode","value":"~1.0","position":{"start":{"line":33,"column":262,"offset":1489},"end":{"line":33,"column":268,"offset":1495},"indent":[]}},{"type":"text","value":" is identical to ","position":{"start":{"line":33,"column":268,"offset":1495},"end":{"line":33,"column":285,"offset":1512},"indent":[]}},{"type":"inlineCode","value":"^1.0","position":{"start":{"line":33,"column":285,"offset":1512},"end":{"line":33,"column":291,"offset":1518},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":33,"column":291,"offset":1518},"end":{"line":33,"column":292,"offset":1519},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1201},"end":{"line":33,"column":292,"offset":1519},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Usage examples","position":{"start":{"line":35,"column":4,"offset":1524},"end":{"line":35,"column":18,"offset":1538},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1521},"end":{"line":35,"column":18,"offset":1538},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Parsing version constraints and check discrete versions for compliance:","position":{"start":{"line":37,"column":1,"offset":1540},"end":{"line":37,"column":72,"offset":1611},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1540},"end":{"line":37,"column":72,"offset":1611},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"\nuse PharIo\\Version\\Version;\nuse PharIo\\Version\\VersionConstraintParser;\n\n$parser = new VersionConstraintParser();\n$caret_constraint = $parser->parse( '^7.0' );\n\n$caret_constraint->complies( new Version( '7.0.17' ) ); // true\n$caret_constraint->complies( new Version( '7.1.0' ) ); // true\n$caret_constraint->complies( new Version( '6.4.34' ) ); // false\n\n$tilde_constraint = $parser->parse( '~1.1.0' );\n\n$tilde_constraint->complies( new Version( '1.1.4' ) ); // true\n$tilde_constraint->complies( new Version( '1.2.0' ) ); // false","position":{"start":{"line":39,"column":1,"offset":1613},"end":{"line":55,"column":4,"offset":2154},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As of version 2.0.0, pre-release labels are supported and taken into account when comparing versions:","position":{"start":{"line":57,"column":1,"offset":2156},"end":{"line":57,"column":102,"offset":2257},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":2156},"end":{"line":57,"column":102,"offset":2257},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"\n$leftVersion = new PharIo\\Version\\Version('3.0.0-alpha.1');\n$rightVersion = new PharIo\\Version\\Version('3.0.0-alpha.2');\n\n$leftVersion->isGreaterThan($rightVersion); // false\n$rightVersion->isGreaterThan($leftVersion); // true\n","position":{"start":{"line":59,"column":1,"offset":2259},"end":{"line":67,"column":5,"offset":2499},"indent":[1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":70,"column":1,"offset":2502},"end":{"line":70,"column":31,"offset":2532},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":70,"column":31,"offset":2532}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"version\"\n    }}>{`Version`}</h1>\n    <p>{`Library for handling version information and constraints`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://travis-ci.org/phar-io/version\"\n      }}><img alt=\"Build Status\" src=\"https://travis-ci.org/phar-io/version.svg?branch=master\" /></a></p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`You can add this library as a local, per-project dependency to your project using `}<a parentName=\"p\" {...{\n        \"href\": \"https://getcomposer.org/\"\n      }}>{`Composer`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`composer require phar-io/version\n`}</code></pre>\n    <p>{`If you only need this library during development, for instance to run your project's test suite, then you should add it as a development-time dependency:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`composer require --dev phar-io/version\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"version-constraints\"\n    }}>{`Version constraints`}</h2>\n    <p>{`A Version constraint describes a range of versions or a discrete version number. The format of version numbers follows the schema of `}<a parentName=\"p\" {...{\n        \"href\": \"http://semver.org\"\n      }}>{`semantic versioning`}</a>{`: `}<inlineCode parentName=\"p\">{`<major>.<minor>.<patch>`}</inlineCode>{`. A constraint might contain an operator that describes the range.`}</p>\n    <p>{`Beside the typical mathematical operators like `}<inlineCode parentName=\"p\">{`<=`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`>=`}</inlineCode>{`, there are two special operators:`}</p>\n    <p><em parentName=\"p\">{`Caret operator`}</em>{`: `}<inlineCode parentName=\"p\">{`^1.0`}</inlineCode>{`\ncan be written as `}<inlineCode parentName=\"p\">{`>=1.0.0 <2.0.0`}</inlineCode>{` and read as »every Version within major version `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{`«.`}</p>\n    <p><em parentName=\"p\">{`Tilde operator`}</em>{`: `}<inlineCode parentName=\"p\">{`~1.0.0`}</inlineCode>{`\ncan be written as `}<inlineCode parentName=\"p\">{`>=1.0.0 <1.1.0`}</inlineCode>{` and read as »every version within minor version `}<inlineCode parentName=\"p\">{`1.1`}</inlineCode>{`. The behavior of tilde operator depends on whether a patch level version is provided or not. If no patch level is provided, tilde operator behaves like the caret operator: `}<inlineCode parentName=\"p\">{`~1.0`}</inlineCode>{` is identical to `}<inlineCode parentName=\"p\">{`^1.0`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"usage-examples\"\n    }}>{`Usage examples`}</h2>\n    <p>{`Parsing version constraints and check discrete versions for compliance:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nuse PharIo\\\\Version\\\\Version;\nuse PharIo\\\\Version\\\\VersionConstraintParser;\n\n$parser = new VersionConstraintParser();\n$caret_constraint = $parser->parse( '^7.0' );\n\n$caret_constraint->complies( new Version( '7.0.17' ) ); // true\n$caret_constraint->complies( new Version( '7.1.0' ) ); // true\n$caret_constraint->complies( new Version( '6.4.34' ) ); // false\n\n$tilde_constraint = $parser->parse( '~1.1.0' );\n\n$tilde_constraint->complies( new Version( '1.1.4' ) ); // true\n$tilde_constraint->complies( new Version( '1.2.0' ) ); // false\n`}</code></pre>\n    <p>{`As of version 2.0.0, pre-release labels are supported and taken into account when comparing versions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\n$leftVersion = new PharIo\\\\Version\\\\Version('3.0.0-alpha.1');\n$rightVersion = new PharIo\\\\Version\\\\Version('3.0.0-alpha.2');\n\n$leftVersion->isGreaterThan($rightVersion); // false\n$rightVersion->isGreaterThan($leftVersion); // true\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}