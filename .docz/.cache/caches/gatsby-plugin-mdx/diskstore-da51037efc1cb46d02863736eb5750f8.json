{"expireTime":9007200985218091000,"key":"gatsby-plugin-mdx-entire-payload-36bfc14223ac39c52f72d23a2a2bf492-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":109,"offset":110},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":112},"end":{"line":5,"column":29,"offset":140},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"DeepCopy","position":{"start":{"line":7,"column":3,"offset":144},"end":{"line":7,"column":11,"offset":152},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":7,"column":11,"offset":152},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"DeepCopy helps you create deep copies (clones) of your objects. It is designed to handle cycles in the association graph.","position":{"start":{"line":9,"column":1,"offset":154},"end":{"line":9,"column":122,"offset":275},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":154},"end":{"line":9,"column":122,"offset":275},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://packagist.org/packages/myclabs/deep-copy","children":[{"type":"image","title":null,"url":"https://poser.pugx.org/myclabs/deep-copy/downloads.svg","alt":"Total Downloads","position":{"start":{"line":11,"column":2,"offset":278},"end":{"line":11,"column":76,"offset":352},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":277},"end":{"line":11,"column":127,"offset":403},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":11,"column":127,"offset":403},"end":{"line":12,"column":1,"offset":404},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/myclabs/DeepCopy/actions/workflows/ci.yaml","children":[{"type":"image","title":null,"url":"https://github.com/myclabs/DeepCopy/actions/workflows/ci.yaml/badge.svg?branch=1.x","alt":"Integrate","position":{"start":{"line":12,"column":2,"offset":405},"end":{"line":12,"column":98,"offset":501},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":404},"end":{"line":12,"column":162,"offset":565},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":277},"end":{"line":12,"column":162,"offset":565},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Table of Contents","position":{"start":{"line":14,"column":4,"offset":570},"end":{"line":14,"column":21,"offset":587},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":567},"end":{"line":14,"column":21,"offset":587},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#how","children":[{"type":"text","value":"How","position":{"start":{"line":16,"column":5,"offset":593},"end":{"line":16,"column":8,"offset":596},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":592},"end":{"line":16,"column":15,"offset":603},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":592},"end":{"line":16,"column":15,"offset":603},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":589},"end":{"line":16,"column":15,"offset":603},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#why","children":[{"type":"text","value":"Why","position":{"start":{"line":17,"column":5,"offset":608},"end":{"line":17,"column":8,"offset":611},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":607},"end":{"line":17,"column":15,"offset":618},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":607},"end":{"line":17,"column":15,"offset":618},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#using-simply-clone","children":[{"type":"text","value":"Using simply ","position":{"start":{"line":18,"column":9,"offset":627},"end":{"line":18,"column":22,"offset":640},"indent":[]}},{"type":"inlineCode","value":"clone","position":{"start":{"line":18,"column":22,"offset":640},"end":{"line":18,"column":29,"offset":647},"indent":[]}}],"position":{"start":{"line":18,"column":8,"offset":626},"end":{"line":18,"column":51,"offset":669},"indent":[]}}],"position":{"start":{"line":18,"column":8,"offset":626},"end":{"line":18,"column":51,"offset":669},"indent":[]}}],"position":{"start":{"line":18,"column":5,"offset":623},"end":{"line":18,"column":51,"offset":669},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#overriding-__clone","children":[{"type":"text","value":"Overriding ","position":{"start":{"line":19,"column":9,"offset":678},"end":{"line":19,"column":20,"offset":689},"indent":[]}},{"type":"inlineCode","value":"__clone()","position":{"start":{"line":19,"column":20,"offset":689},"end":{"line":19,"column":31,"offset":700},"indent":[]}}],"position":{"start":{"line":19,"column":8,"offset":677},"end":{"line":19,"column":53,"offset":722},"indent":[]}}],"position":{"start":{"line":19,"column":8,"offset":677},"end":{"line":19,"column":53,"offset":722},"indent":[]}}],"position":{"start":{"line":19,"column":5,"offset":674},"end":{"line":19,"column":53,"offset":722},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#with-deepcopy","children":[{"type":"text","value":"With ","position":{"start":{"line":20,"column":9,"offset":731},"end":{"line":20,"column":14,"offset":736},"indent":[]}},{"type":"inlineCode","value":"DeepCopy","position":{"start":{"line":20,"column":14,"offset":736},"end":{"line":20,"column":24,"offset":746},"indent":[]}}],"position":{"start":{"line":20,"column":8,"offset":730},"end":{"line":20,"column":41,"offset":763},"indent":[]}}],"position":{"start":{"line":20,"column":8,"offset":730},"end":{"line":20,"column":41,"offset":763},"indent":[]}}],"position":{"start":{"line":20,"column":5,"offset":727},"end":{"line":20,"column":41,"offset":763},"indent":[]}}],"position":{"start":{"line":18,"column":5,"offset":623},"end":{"line":20,"column":41,"offset":763},"indent":[5,5]}}],"position":{"start":{"line":17,"column":1,"offset":604},"end":{"line":20,"column":41,"offset":763},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#how-it-works","children":[{"type":"text","value":"How it works","position":{"start":{"line":21,"column":5,"offset":768},"end":{"line":21,"column":17,"offset":780},"indent":[]}}],"position":{"start":{"line":21,"column":4,"offset":767},"end":{"line":21,"column":33,"offset":796},"indent":[]}}],"position":{"start":{"line":21,"column":4,"offset":767},"end":{"line":21,"column":33,"offset":796},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":764},"end":{"line":21,"column":33,"offset":796},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#going-further","children":[{"type":"text","value":"Going further","position":{"start":{"line":22,"column":5,"offset":801},"end":{"line":22,"column":18,"offset":814},"indent":[]}}],"position":{"start":{"line":22,"column":4,"offset":800},"end":{"line":22,"column":35,"offset":831},"indent":[]}}],"position":{"start":{"line":22,"column":4,"offset":800},"end":{"line":22,"column":35,"offset":831},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#matchers","children":[{"type":"text","value":"Matchers","position":{"start":{"line":23,"column":9,"offset":840},"end":{"line":23,"column":17,"offset":848},"indent":[]}}],"position":{"start":{"line":23,"column":8,"offset":839},"end":{"line":23,"column":29,"offset":860},"indent":[]}}],"position":{"start":{"line":23,"column":8,"offset":839},"end":{"line":23,"column":29,"offset":860},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#property-name","children":[{"type":"text","value":"Property name","position":{"start":{"line":24,"column":13,"offset":873},"end":{"line":24,"column":26,"offset":886},"indent":[]}}],"position":{"start":{"line":24,"column":12,"offset":872},"end":{"line":24,"column":43,"offset":903},"indent":[]}}],"position":{"start":{"line":24,"column":12,"offset":872},"end":{"line":24,"column":43,"offset":903},"indent":[]}}],"position":{"start":{"line":24,"column":9,"offset":869},"end":{"line":24,"column":43,"offset":903},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#specific-property","children":[{"type":"text","value":"Specific property","position":{"start":{"line":25,"column":13,"offset":916},"end":{"line":25,"column":30,"offset":933},"indent":[]}}],"position":{"start":{"line":25,"column":12,"offset":915},"end":{"line":25,"column":51,"offset":954},"indent":[]}}],"position":{"start":{"line":25,"column":12,"offset":915},"end":{"line":25,"column":51,"offset":954},"indent":[]}}],"position":{"start":{"line":25,"column":9,"offset":912},"end":{"line":25,"column":51,"offset":954},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#type","children":[{"type":"text","value":"Type","position":{"start":{"line":26,"column":13,"offset":967},"end":{"line":26,"column":17,"offset":971},"indent":[]}}],"position":{"start":{"line":26,"column":12,"offset":966},"end":{"line":26,"column":25,"offset":979},"indent":[]}}],"position":{"start":{"line":26,"column":12,"offset":966},"end":{"line":26,"column":25,"offset":979},"indent":[]}}],"position":{"start":{"line":26,"column":9,"offset":963},"end":{"line":26,"column":25,"offset":979},"indent":[]}}],"position":{"start":{"line":24,"column":9,"offset":869},"end":{"line":26,"column":25,"offset":979},"indent":[9,9]}}],"position":{"start":{"line":23,"column":5,"offset":836},"end":{"line":26,"column":25,"offset":979},"indent":[5,5,5]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#filters","children":[{"type":"text","value":"Filters","position":{"start":{"line":27,"column":9,"offset":988},"end":{"line":27,"column":16,"offset":995},"indent":[]}}],"position":{"start":{"line":27,"column":8,"offset":987},"end":{"line":27,"column":27,"offset":1006},"indent":[]}}],"position":{"start":{"line":27,"column":8,"offset":987},"end":{"line":27,"column":27,"offset":1006},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#setnullfilter-filter","children":[{"type":"inlineCode","value":"SetNullFilter","position":{"start":{"line":28,"column":13,"offset":1019},"end":{"line":28,"column":28,"offset":1034},"indent":[]}}],"position":{"start":{"line":28,"column":12,"offset":1018},"end":{"line":28,"column":52,"offset":1058},"indent":[]}}],"position":{"start":{"line":28,"column":12,"offset":1018},"end":{"line":28,"column":52,"offset":1058},"indent":[]}}],"position":{"start":{"line":28,"column":9,"offset":1015},"end":{"line":28,"column":52,"offset":1058},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#keepfilter-filter","children":[{"type":"inlineCode","value":"KeepFilter","position":{"start":{"line":29,"column":13,"offset":1071},"end":{"line":29,"column":25,"offset":1083},"indent":[]}}],"position":{"start":{"line":29,"column":12,"offset":1070},"end":{"line":29,"column":46,"offset":1104},"indent":[]}}],"position":{"start":{"line":29,"column":12,"offset":1070},"end":{"line":29,"column":46,"offset":1104},"indent":[]}}],"position":{"start":{"line":29,"column":9,"offset":1067},"end":{"line":29,"column":46,"offset":1104},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#doctrinecollectionfilter-filter","children":[{"type":"inlineCode","value":"DoctrineCollectionFilter","position":{"start":{"line":30,"column":13,"offset":1117},"end":{"line":30,"column":39,"offset":1143},"indent":[]}}],"position":{"start":{"line":30,"column":12,"offset":1116},"end":{"line":30,"column":74,"offset":1178},"indent":[]}}],"position":{"start":{"line":30,"column":12,"offset":1116},"end":{"line":30,"column":74,"offset":1178},"indent":[]}}],"position":{"start":{"line":30,"column":9,"offset":1113},"end":{"line":30,"column":74,"offset":1178},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#doctrineemptycollectionfilter-filter","children":[{"type":"inlineCode","value":"DoctrineEmptyCollectionFilter","position":{"start":{"line":31,"column":13,"offset":1191},"end":{"line":31,"column":44,"offset":1222},"indent":[]}}],"position":{"start":{"line":31,"column":12,"offset":1190},"end":{"line":31,"column":84,"offset":1262},"indent":[]}}],"position":{"start":{"line":31,"column":12,"offset":1190},"end":{"line":31,"column":84,"offset":1262},"indent":[]}}],"position":{"start":{"line":31,"column":9,"offset":1187},"end":{"line":31,"column":84,"offset":1262},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#doctrineproxyfilter-filter","children":[{"type":"inlineCode","value":"DoctrineProxyFilter","position":{"start":{"line":32,"column":13,"offset":1275},"end":{"line":32,"column":34,"offset":1296},"indent":[]}}],"position":{"start":{"line":32,"column":12,"offset":1274},"end":{"line":32,"column":64,"offset":1326},"indent":[]}}],"position":{"start":{"line":32,"column":12,"offset":1274},"end":{"line":32,"column":64,"offset":1326},"indent":[]}}],"position":{"start":{"line":32,"column":9,"offset":1271},"end":{"line":32,"column":64,"offset":1326},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#replacefilter-type-filter","children":[{"type":"inlineCode","value":"ReplaceFilter","position":{"start":{"line":33,"column":13,"offset":1339},"end":{"line":33,"column":28,"offset":1354},"indent":[]}}],"position":{"start":{"line":33,"column":12,"offset":1338},"end":{"line":33,"column":57,"offset":1383},"indent":[]}}],"position":{"start":{"line":33,"column":12,"offset":1338},"end":{"line":33,"column":57,"offset":1383},"indent":[]}}],"position":{"start":{"line":33,"column":9,"offset":1335},"end":{"line":33,"column":57,"offset":1383},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#shallowcopyfilter-type-filter","children":[{"type":"inlineCode","value":"ShallowCopyFilter","position":{"start":{"line":34,"column":13,"offset":1396},"end":{"line":34,"column":32,"offset":1415},"indent":[]}}],"position":{"start":{"line":34,"column":12,"offset":1395},"end":{"line":34,"column":65,"offset":1448},"indent":[]}}],"position":{"start":{"line":34,"column":12,"offset":1395},"end":{"line":34,"column":65,"offset":1448},"indent":[]}}],"position":{"start":{"line":34,"column":9,"offset":1392},"end":{"line":34,"column":65,"offset":1448},"indent":[]}}],"position":{"start":{"line":28,"column":9,"offset":1015},"end":{"line":34,"column":65,"offset":1448},"indent":[9,9,9,9,9,9]}}],"position":{"start":{"line":27,"column":5,"offset":984},"end":{"line":34,"column":65,"offset":1448},"indent":[5,5,5,5,5,5,5]}}],"position":{"start":{"line":23,"column":5,"offset":836},"end":{"line":34,"column":65,"offset":1448},"indent":[5,5,5,5,5,5,5,5,5,5,5]}}],"position":{"start":{"line":22,"column":1,"offset":797},"end":{"line":34,"column":65,"offset":1448},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#edge-cases","children":[{"type":"text","value":"Edge cases","position":{"start":{"line":35,"column":5,"offset":1453},"end":{"line":35,"column":15,"offset":1463},"indent":[]}}],"position":{"start":{"line":35,"column":4,"offset":1452},"end":{"line":35,"column":29,"offset":1477},"indent":[]}}],"position":{"start":{"line":35,"column":4,"offset":1452},"end":{"line":35,"column":29,"offset":1477},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1449},"end":{"line":35,"column":29,"offset":1477},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#contributing","children":[{"type":"text","value":"Contributing","position":{"start":{"line":36,"column":5,"offset":1482},"end":{"line":36,"column":17,"offset":1494},"indent":[]}}],"position":{"start":{"line":36,"column":4,"offset":1481},"end":{"line":36,"column":33,"offset":1510},"indent":[]}}],"position":{"start":{"line":36,"column":4,"offset":1481},"end":{"line":36,"column":33,"offset":1510},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#tests","children":[{"type":"text","value":"Tests","position":{"start":{"line":37,"column":9,"offset":1519},"end":{"line":37,"column":14,"offset":1524},"indent":[]}}],"position":{"start":{"line":37,"column":8,"offset":1518},"end":{"line":37,"column":23,"offset":1533},"indent":[]}}],"position":{"start":{"line":37,"column":8,"offset":1518},"end":{"line":37,"column":23,"offset":1533},"indent":[]}}],"position":{"start":{"line":37,"column":5,"offset":1515},"end":{"line":37,"column":23,"offset":1533},"indent":[]}}],"position":{"start":{"line":37,"column":5,"offset":1515},"end":{"line":37,"column":23,"offset":1533},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1478},"end":{"line":37,"column":23,"offset":1533},"indent":[1]}}],"position":{"start":{"line":16,"column":1,"offset":589},"end":{"line":37,"column":23,"offset":1533},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"How?","position":{"start":{"line":40,"column":4,"offset":1539},"end":{"line":40,"column":8,"offset":1543},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1536},"end":{"line":40,"column":8,"offset":1543},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Install with Composer:","position":{"start":{"line":42,"column":1,"offset":1545},"end":{"line":42,"column":23,"offset":1567},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1545},"end":{"line":42,"column":23,"offset":1567},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"composer require myclabs/deep-copy","position":{"start":{"line":44,"column":1,"offset":1569},"end":{"line":46,"column":4,"offset":1611},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Use it:","position":{"start":{"line":48,"column":1,"offset":1613},"end":{"line":48,"column":8,"offset":1620},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1613},"end":{"line":48,"column":8,"offset":1620},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\DeepCopy;\n\n$copier = new DeepCopy();\n$myCopy = $copier->copy($myObject);","position":{"start":{"line":50,"column":1,"offset":1622},"end":{"line":55,"column":4,"offset":1718},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Why?","position":{"start":{"line":58,"column":4,"offset":1724},"end":{"line":58,"column":8,"offset":1728},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1721},"end":{"line":58,"column":8,"offset":1728},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"How do you create copies of your objects?","position":{"start":{"line":60,"column":3,"offset":1732},"end":{"line":60,"column":44,"offset":1773},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":1732},"end":{"line":60,"column":44,"offset":1773},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1730},"end":{"line":60,"column":44,"offset":1773},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1730},"end":{"line":60,"column":44,"offset":1773},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$myCopy = clone $myObject;","position":{"start":{"line":62,"column":1,"offset":1775},"end":{"line":64,"column":4,"offset":1812},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"How do you create ","position":{"start":{"line":66,"column":3,"offset":1816},"end":{"line":66,"column":21,"offset":1834},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"deep","position":{"start":{"line":66,"column":23,"offset":1836},"end":{"line":66,"column":27,"offset":1840},"indent":[]}}],"position":{"start":{"line":66,"column":21,"offset":1834},"end":{"line":66,"column":29,"offset":1842},"indent":[]}},{"type":"text","value":" copies of your objects (i.e. copying also all the objects referenced in the properties)?","position":{"start":{"line":66,"column":29,"offset":1842},"end":{"line":66,"column":118,"offset":1931},"indent":[]}}],"position":{"start":{"line":66,"column":3,"offset":1816},"end":{"line":66,"column":118,"offset":1931},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1814},"end":{"line":66,"column":118,"offset":1931},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1814},"end":{"line":66,"column":118,"offset":1931},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You use ","position":{"start":{"line":68,"column":1,"offset":1933},"end":{"line":68,"column":9,"offset":1941},"indent":[]}},{"type":"link","title":null,"url":"http://www.php.net/manual/en/language.oop5.cloning.php#object.clone","children":[{"type":"inlineCode","value":"__clone()","position":{"start":{"line":68,"column":10,"offset":1942},"end":{"line":68,"column":21,"offset":1953},"indent":[]}}],"position":{"start":{"line":68,"column":9,"offset":1941},"end":{"line":68,"column":91,"offset":2023},"indent":[]}},{"type":"text","value":" and implement the behavior\nyourself.","position":{"start":{"line":68,"column":91,"offset":2023},"end":{"line":69,"column":10,"offset":2060},"indent":[1]}}],"position":{"start":{"line":68,"column":1,"offset":1933},"end":{"line":69,"column":10,"offset":2060},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"But how do you handle ","position":{"start":{"line":71,"column":3,"offset":2064},"end":{"line":71,"column":25,"offset":2086},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"cycles","position":{"start":{"line":71,"column":27,"offset":2088},"end":{"line":71,"column":33,"offset":2094},"indent":[]}}],"position":{"start":{"line":71,"column":25,"offset":2086},"end":{"line":71,"column":35,"offset":2096},"indent":[]}},{"type":"text","value":" in the association graph?","position":{"start":{"line":71,"column":35,"offset":2096},"end":{"line":71,"column":61,"offset":2122},"indent":[]}}],"position":{"start":{"line":71,"column":3,"offset":2064},"end":{"line":71,"column":61,"offset":2122},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2062},"end":{"line":71,"column":61,"offset":2122},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2062},"end":{"line":71,"column":61,"offset":2122},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now you're in for a big mess :(","position":{"start":{"line":73,"column":1,"offset":2124},"end":{"line":73,"column":32,"offset":2155},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":2124},"end":{"line":73,"column":32,"offset":2155},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"doc/graph.png","alt":"association graph","position":{"start":{"line":75,"column":1,"offset":2157},"end":{"line":75,"column":36,"offset":2192},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":2157},"end":{"line":75,"column":36,"offset":2192},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Using simply ","position":{"start":{"line":78,"column":5,"offset":2199},"end":{"line":78,"column":18,"offset":2212},"indent":[]}},{"type":"inlineCode","value":"clone","position":{"start":{"line":78,"column":18,"offset":2212},"end":{"line":78,"column":25,"offset":2219},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2195},"end":{"line":78,"column":25,"offset":2219},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"doc/clone.png","alt":"Using clone","position":{"start":{"line":80,"column":1,"offset":2221},"end":{"line":80,"column":30,"offset":2250},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2221},"end":{"line":80,"column":30,"offset":2250},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Overriding ","position":{"start":{"line":83,"column":5,"offset":2257},"end":{"line":83,"column":16,"offset":2268},"indent":[]}},{"type":"inlineCode","value":"__clone()","position":{"start":{"line":83,"column":16,"offset":2268},"end":{"line":83,"column":27,"offset":2279},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2253},"end":{"line":83,"column":27,"offset":2279},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"doc/deep-clone.png","alt":"Overriding __clone","position":{"start":{"line":85,"column":1,"offset":2281},"end":{"line":85,"column":42,"offset":2322},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2281},"end":{"line":85,"column":42,"offset":2322},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"With ","position":{"start":{"line":88,"column":5,"offset":2329},"end":{"line":88,"column":10,"offset":2334},"indent":[]}},{"type":"inlineCode","value":"DeepCopy","position":{"start":{"line":88,"column":10,"offset":2334},"end":{"line":88,"column":20,"offset":2344},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2325},"end":{"line":88,"column":20,"offset":2344},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"doc/deep-copy.png","alt":"With DeepCopy","position":{"start":{"line":90,"column":1,"offset":2346},"end":{"line":90,"column":36,"offset":2381},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":2346},"end":{"line":90,"column":36,"offset":2381},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"How it works","position":{"start":{"line":93,"column":4,"offset":2387},"end":{"line":93,"column":16,"offset":2399},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2384},"end":{"line":93,"column":16,"offset":2399},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"DeepCopy recursively traverses all the object's properties and clones them. To avoid cloning the same object twice it\nkeeps a hash map of all instances and thus preserves the object graph.","position":{"start":{"line":95,"column":1,"offset":2401},"end":{"line":96,"column":71,"offset":2589},"indent":[1]}}],"position":{"start":{"line":95,"column":1,"offset":2401},"end":{"line":96,"column":71,"offset":2589},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"To use it:","position":{"start":{"line":98,"column":1,"offset":2591},"end":{"line":98,"column":11,"offset":2601},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2591},"end":{"line":98,"column":11,"offset":2601},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use function DeepCopy\\deep_copy;\n\n$copy = deep_copy($var);","position":{"start":{"line":100,"column":1,"offset":2603},"end":{"line":104,"column":4,"offset":2672},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively, you can create your own ","position":{"start":{"line":106,"column":1,"offset":2674},"end":{"line":106,"column":40,"offset":2713},"indent":[]}},{"type":"inlineCode","value":"DeepCopy","position":{"start":{"line":106,"column":40,"offset":2713},"end":{"line":106,"column":50,"offset":2723},"indent":[]}},{"type":"text","value":" instance to configure it differently for example:","position":{"start":{"line":106,"column":50,"offset":2723},"end":{"line":106,"column":100,"offset":2773},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":2674},"end":{"line":106,"column":100,"offset":2773},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\DeepCopy;\n\n$copier = new DeepCopy(true);\n\n$copy = $copier->copy($var);","position":{"start":{"line":108,"column":1,"offset":2775},"end":{"line":114,"column":4,"offset":2869},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You may want to roll your own deep copy function:","position":{"start":{"line":116,"column":1,"offset":2871},"end":{"line":116,"column":50,"offset":2920},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":2871},"end":{"line":116,"column":50,"offset":2920},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"namespace Acme;\n\nuse DeepCopy\\DeepCopy;\n\nfunction deep_copy($var)\n{\n    static $copier = null;\n    \n    if (null === $copier) {\n        $copier = new DeepCopy(true);\n    }\n    \n    return $copier->copy($var);\n}","position":{"start":{"line":118,"column":1,"offset":2922},"end":{"line":133,"column":4,"offset":3143},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Going further","position":{"start":{"line":136,"column":4,"offset":3149},"end":{"line":136,"column":17,"offset":3162},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":3146},"end":{"line":136,"column":17,"offset":3162},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can add filters to customize the copy process.","position":{"start":{"line":138,"column":1,"offset":3164},"end":{"line":138,"column":51,"offset":3214},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3164},"end":{"line":138,"column":51,"offset":3214},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The method to add a filter is ","position":{"start":{"line":140,"column":1,"offset":3216},"end":{"line":140,"column":31,"offset":3246},"indent":[]}},{"type":"inlineCode","value":"DeepCopy\\DeepCopy::addFilter($filter, $matcher)","position":{"start":{"line":140,"column":31,"offset":3246},"end":{"line":140,"column":80,"offset":3295},"indent":[]}},{"type":"text","value":",\nwith ","position":{"start":{"line":140,"column":80,"offset":3295},"end":{"line":141,"column":6,"offset":3302},"indent":[1]}},{"type":"inlineCode","value":"$filter","position":{"start":{"line":141,"column":6,"offset":3302},"end":{"line":141,"column":15,"offset":3311},"indent":[]}},{"type":"text","value":" implementing ","position":{"start":{"line":141,"column":15,"offset":3311},"end":{"line":141,"column":29,"offset":3325},"indent":[]}},{"type":"inlineCode","value":"DeepCopy\\Filter\\Filter","position":{"start":{"line":141,"column":29,"offset":3325},"end":{"line":141,"column":53,"offset":3349},"indent":[]}},{"type":"text","value":"\nand ","position":{"start":{"line":141,"column":53,"offset":3349},"end":{"line":142,"column":5,"offset":3354},"indent":[1]}},{"type":"inlineCode","value":"$matcher","position":{"start":{"line":142,"column":5,"offset":3354},"end":{"line":142,"column":15,"offset":3364},"indent":[]}},{"type":"text","value":" implementing ","position":{"start":{"line":142,"column":15,"offset":3364},"end":{"line":142,"column":29,"offset":3378},"indent":[]}},{"type":"inlineCode","value":"DeepCopy\\Matcher\\Matcher","position":{"start":{"line":142,"column":29,"offset":3378},"end":{"line":142,"column":55,"offset":3404},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":142,"column":55,"offset":3404},"end":{"line":142,"column":56,"offset":3405},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":3216},"end":{"line":142,"column":56,"offset":3405},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We provide some generic filters and matchers.","position":{"start":{"line":144,"column":1,"offset":3407},"end":{"line":144,"column":46,"offset":3452},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":3407},"end":{"line":144,"column":46,"offset":3452},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Matchers","position":{"start":{"line":147,"column":5,"offset":3459},"end":{"line":147,"column":13,"offset":3467},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":3455},"end":{"line":147,"column":13,"offset":3467},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"DeepCopy\\Matcher","position":{"start":{"line":149,"column":5,"offset":3473},"end":{"line":149,"column":23,"offset":3491},"indent":[]}},{"type":"text","value":" applies on a object attribute.","position":{"start":{"line":149,"column":23,"offset":3491},"end":{"line":149,"column":54,"offset":3522},"indent":[]}}],"position":{"start":{"line":149,"column":5,"offset":3473},"end":{"line":149,"column":54,"offset":3522},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":3469},"end":{"line":149,"column":54,"offset":3522},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"DeepCopy\\TypeMatcher","position":{"start":{"line":150,"column":5,"offset":3527},"end":{"line":150,"column":27,"offset":3549},"indent":[]}},{"type":"text","value":" applies on any element found in graph, including array elements.","position":{"start":{"line":150,"column":27,"offset":3549},"end":{"line":150,"column":92,"offset":3614},"indent":[]}}],"position":{"start":{"line":150,"column":5,"offset":3527},"end":{"line":150,"column":92,"offset":3614},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":3523},"end":{"line":150,"column":92,"offset":3614},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":3469},"end":{"line":150,"column":92,"offset":3614},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Property name","position":{"start":{"line":153,"column":6,"offset":3622},"end":{"line":153,"column":19,"offset":3635},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":3617},"end":{"line":153,"column":19,"offset":3635},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":155,"column":1,"offset":3637},"end":{"line":155,"column":5,"offset":3641},"indent":[]}},{"type":"inlineCode","value":"PropertyNameMatcher","position":{"start":{"line":155,"column":5,"offset":3641},"end":{"line":155,"column":26,"offset":3662},"indent":[]}},{"type":"text","value":" will match a property by its name:","position":{"start":{"line":155,"column":26,"offset":3662},"end":{"line":155,"column":61,"offset":3697},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":3637},"end":{"line":155,"column":61,"offset":3697},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\Matcher\\PropertyNameMatcher;\n\n// Will apply a filter to any property of any objects named \"id\"\n$matcher = new PropertyNameMatcher('id');","position":{"start":{"line":157,"column":1,"offset":3699},"end":{"line":162,"column":4,"offset":3859},"indent":[1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Specific property","position":{"start":{"line":165,"column":6,"offset":3867},"end":{"line":165,"column":23,"offset":3884},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":3862},"end":{"line":165,"column":23,"offset":3884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":167,"column":1,"offset":3886},"end":{"line":167,"column":5,"offset":3890},"indent":[]}},{"type":"inlineCode","value":"PropertyMatcher","position":{"start":{"line":167,"column":5,"offset":3890},"end":{"line":167,"column":22,"offset":3907},"indent":[]}},{"type":"text","value":" will match a specific property of a specific class:","position":{"start":{"line":167,"column":22,"offset":3907},"end":{"line":167,"column":74,"offset":3959},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":3886},"end":{"line":167,"column":74,"offset":3959},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\Matcher\\PropertyMatcher;\n\n// Will apply a filter to the property \"id\" of any objects of the class \"MyClass\"\n$matcher = new PropertyMatcher('MyClass', 'id');","position":{"start":{"line":169,"column":1,"offset":3961},"end":{"line":174,"column":4,"offset":4141},"indent":[1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Type","position":{"start":{"line":177,"column":6,"offset":4149},"end":{"line":177,"column":10,"offset":4153},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":4144},"end":{"line":177,"column":10,"offset":4153},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":179,"column":1,"offset":4155},"end":{"line":179,"column":5,"offset":4159},"indent":[]}},{"type":"inlineCode","value":"TypeMatcher","position":{"start":{"line":179,"column":5,"offset":4159},"end":{"line":179,"column":18,"offset":4172},"indent":[]}},{"type":"text","value":" will match any element by its type (instance of a class or any value that could be parameter of\n","position":{"start":{"line":179,"column":18,"offset":4172},"end":{"line":180,"column":1,"offset":4269},"indent":[1]}},{"type":"link","title":null,"url":"http://php.net/manual/en/function.gettype.php","children":[{"type":"text","value":"gettype()","position":{"start":{"line":180,"column":2,"offset":4270},"end":{"line":180,"column":11,"offset":4279},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":4269},"end":{"line":180,"column":59,"offset":4327},"indent":[]}},{"type":"text","value":" function):","position":{"start":{"line":180,"column":59,"offset":4327},"end":{"line":180,"column":70,"offset":4338},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":4155},"end":{"line":180,"column":70,"offset":4338},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\TypeMatcher\\TypeMatcher;\n\n// Will apply a filter to any object that is an instance of Doctrine\\Common\\Collections\\Collection\n$matcher = new TypeMatcher('Doctrine\\Common\\Collections\\Collection');","position":{"start":{"line":182,"column":1,"offset":4340},"end":{"line":187,"column":4,"offset":4558},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Filters","position":{"start":{"line":190,"column":5,"offset":4565},"end":{"line":190,"column":12,"offset":4572},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":4561},"end":{"line":190,"column":12,"offset":4572},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"DeepCopy\\Filter","position":{"start":{"line":192,"column":3,"offset":4576},"end":{"line":192,"column":20,"offset":4593},"indent":[]}},{"type":"text","value":" applies a transformation to the object attribute matched by ","position":{"start":{"line":192,"column":20,"offset":4593},"end":{"line":192,"column":81,"offset":4654},"indent":[]}},{"type":"inlineCode","value":"DeepCopy\\Matcher","position":{"start":{"line":192,"column":81,"offset":4654},"end":{"line":192,"column":99,"offset":4672},"indent":[]}}],"position":{"start":{"line":192,"column":3,"offset":4576},"end":{"line":192,"column":99,"offset":4672},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":4574},"end":{"line":192,"column":99,"offset":4672},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"DeepCopy\\TypeFilter","position":{"start":{"line":193,"column":3,"offset":4675},"end":{"line":193,"column":24,"offset":4696},"indent":[]}},{"type":"text","value":" applies a transformation to any element matched by ","position":{"start":{"line":193,"column":24,"offset":4696},"end":{"line":193,"column":76,"offset":4748},"indent":[]}},{"type":"inlineCode","value":"DeepCopy\\TypeMatcher","position":{"start":{"line":193,"column":76,"offset":4748},"end":{"line":193,"column":98,"offset":4770},"indent":[]}}],"position":{"start":{"line":193,"column":3,"offset":4675},"end":{"line":193,"column":98,"offset":4770},"indent":[]}}],"position":{"start":{"line":193,"column":1,"offset":4673},"end":{"line":193,"column":98,"offset":4770},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":4574},"end":{"line":193,"column":98,"offset":4770},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"By design, matching a filter will stop the chain of filters (i.e. the next ones will not be applied).\nUsing the (","position":{"start":{"line":195,"column":1,"offset":4772},"end":{"line":196,"column":12,"offset":4885},"indent":[1]}},{"type":"link","title":null,"url":"#chainablefilter-filter","children":[{"type":"inlineCode","value":"ChainableFilter","position":{"start":{"line":196,"column":13,"offset":4886},"end":{"line":196,"column":30,"offset":4903},"indent":[]}}],"position":{"start":{"line":196,"column":12,"offset":4885},"end":{"line":196,"column":56,"offset":4929},"indent":[]}},{"type":"text","value":") won't stop the chain of filters.","position":{"start":{"line":196,"column":56,"offset":4929},"end":{"line":196,"column":90,"offset":4963},"indent":[]}}],"position":{"start":{"line":195,"column":1,"offset":4772},"end":{"line":196,"column":90,"offset":4963},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"inlineCode","value":"SetNullFilter","position":{"start":{"line":199,"column":6,"offset":4971},"end":{"line":199,"column":21,"offset":4986},"indent":[]}},{"type":"text","value":" (filter)","position":{"start":{"line":199,"column":21,"offset":4986},"end":{"line":199,"column":30,"offset":4995},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":4966},"end":{"line":199,"column":30,"offset":4995},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's say for example that you are copying a database record (or a Doctrine entity), so you want the copy not to have\nany ID:","position":{"start":{"line":201,"column":1,"offset":4997},"end":{"line":202,"column":8,"offset":5122},"indent":[1]}}],"position":{"start":{"line":201,"column":1,"offset":4997},"end":{"line":202,"column":8,"offset":5122},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\SetNullFilter;\nuse DeepCopy\\Matcher\\PropertyNameMatcher;\n\n$object = MyClass::load(123);\necho $object->id; // 123\n\n$copier = new DeepCopy();\n$copier->addFilter(new SetNullFilter(), new PropertyNameMatcher('id'));\n\n$copy = $copier->copy($object);\n\necho $copy->id; // null","position":{"start":{"line":204,"column":1,"offset":5124},"end":{"line":218,"column":4,"offset":5447},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"inlineCode","value":"KeepFilter","position":{"start":{"line":221,"column":6,"offset":5455},"end":{"line":221,"column":18,"offset":5467},"indent":[]}},{"type":"text","value":" (filter)","position":{"start":{"line":221,"column":18,"offset":5467},"end":{"line":221,"column":27,"offset":5476},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":5450},"end":{"line":221,"column":27,"offset":5476},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you want a property to remain untouched (for example, an association to an object):","position":{"start":{"line":223,"column":1,"offset":5478},"end":{"line":223,"column":87,"offset":5564},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":5478},"end":{"line":223,"column":87,"offset":5564},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\KeepFilter;\nuse DeepCopy\\Matcher\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new KeepFilter(), new PropertyMatcher('MyClass', 'category'));\n\n$copy = $copier->copy($object);\n// $copy->category has not been touched","position":{"start":{"line":225,"column":1,"offset":5566},"end":{"line":235,"column":4,"offset":5851},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"inlineCode","value":"ChainableFilter","position":{"start":{"line":238,"column":6,"offset":5859},"end":{"line":238,"column":23,"offset":5876},"indent":[]}},{"type":"text","value":" (filter)","position":{"start":{"line":238,"column":23,"offset":5876},"end":{"line":238,"column":32,"offset":5885},"indent":[]}}],"position":{"start":{"line":238,"column":1,"offset":5854},"end":{"line":238,"column":32,"offset":5885},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you use cloning on proxy classes, you might want to apply two filters for:","position":{"start":{"line":240,"column":1,"offset":5887},"end":{"line":240,"column":78,"offset":5964},"indent":[]}}],"position":{"start":{"line":240,"column":1,"offset":5887},"end":{"line":240,"column":78,"offset":5964},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"loading the data","position":{"start":{"line":241,"column":4,"offset":5968},"end":{"line":241,"column":20,"offset":5984},"indent":[]}}],"position":{"start":{"line":241,"column":4,"offset":5968},"end":{"line":241,"column":20,"offset":5984},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":5965},"end":{"line":241,"column":20,"offset":5984},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"applying a transformation","position":{"start":{"line":242,"column":4,"offset":5988},"end":{"line":242,"column":29,"offset":6013},"indent":[]}}],"position":{"start":{"line":242,"column":4,"offset":5988},"end":{"line":242,"column":29,"offset":6013},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":5985},"end":{"line":242,"column":29,"offset":6013},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":5965},"end":{"line":242,"column":29,"offset":6013},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"You can use the ","position":{"start":{"line":244,"column":1,"offset":6015},"end":{"line":244,"column":17,"offset":6031},"indent":[]}},{"type":"inlineCode","value":"ChainableFilter","position":{"start":{"line":244,"column":17,"offset":6031},"end":{"line":244,"column":34,"offset":6048},"indent":[]}},{"type":"text","value":" as a decorator of the proxy loader filter, which won't stop the chain of filters (i.e. \nthe next ones may be applied).","position":{"start":{"line":244,"column":34,"offset":6048},"end":{"line":245,"column":31,"offset":6167},"indent":[1]}}],"position":{"start":{"line":244,"column":1,"offset":6015},"end":{"line":245,"column":31,"offset":6167},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\ChainableFilter;\nuse DeepCopy\\Filter\\Doctrine\\DoctrineProxyFilter;\nuse DeepCopy\\Filter\\SetNullFilter;\nuse DeepCopy\\Matcher\\Doctrine\\DoctrineProxyMatcher;\nuse DeepCopy\\Matcher\\PropertyNameMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new ChainableFilter(new DoctrineProxyFilter()), new DoctrineProxyMatcher());\n$copier->addFilter(new SetNullFilter(), new PropertyNameMatcher('id'));\n\n$copy = $copier->copy($object);\n\necho $copy->id; // null","position":{"start":{"line":248,"column":1,"offset":6170},"end":{"line":263,"column":4,"offset":6672},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"inlineCode","value":"DoctrineCollectionFilter","position":{"start":{"line":266,"column":6,"offset":6680},"end":{"line":266,"column":32,"offset":6706},"indent":[]}},{"type":"text","value":" (filter)","position":{"start":{"line":266,"column":32,"offset":6706},"end":{"line":266,"column":41,"offset":6715},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":6675},"end":{"line":266,"column":41,"offset":6715},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you use Doctrine and want to copy an entity, you will need to use the ","position":{"start":{"line":268,"column":1,"offset":6717},"end":{"line":268,"column":74,"offset":6790},"indent":[]}},{"type":"inlineCode","value":"DoctrineCollectionFilter","position":{"start":{"line":268,"column":74,"offset":6790},"end":{"line":268,"column":100,"offset":6816},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":268,"column":100,"offset":6816},"end":{"line":268,"column":101,"offset":6817},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":6717},"end":{"line":268,"column":101,"offset":6817},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\Doctrine\\DoctrineCollectionFilter;\nuse DeepCopy\\Matcher\\PropertyTypeMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new DoctrineCollectionFilter(), new PropertyTypeMatcher('Doctrine\\Common\\Collections\\Collection'));\n\n$copy = $copier->copy($object);","position":{"start":{"line":270,"column":1,"offset":6819},"end":{"line":279,"column":4,"offset":7128},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"inlineCode","value":"DoctrineEmptyCollectionFilter","position":{"start":{"line":282,"column":6,"offset":7136},"end":{"line":282,"column":37,"offset":7167},"indent":[]}},{"type":"text","value":" (filter)","position":{"start":{"line":282,"column":37,"offset":7167},"end":{"line":282,"column":46,"offset":7176},"indent":[]}}],"position":{"start":{"line":282,"column":1,"offset":7131},"end":{"line":282,"column":46,"offset":7176},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you use Doctrine and want to copy an entity who contains a ","position":{"start":{"line":284,"column":1,"offset":7178},"end":{"line":284,"column":63,"offset":7240},"indent":[]}},{"type":"inlineCode","value":"Collection","position":{"start":{"line":284,"column":63,"offset":7240},"end":{"line":284,"column":75,"offset":7252},"indent":[]}},{"type":"text","value":" that you want to be reset, you can use the\n","position":{"start":{"line":284,"column":75,"offset":7252},"end":{"line":285,"column":1,"offset":7296},"indent":[1]}},{"type":"inlineCode","value":"DoctrineEmptyCollectionFilter","position":{"start":{"line":285,"column":1,"offset":7296},"end":{"line":285,"column":32,"offset":7327},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":7178},"end":{"line":285,"column":32,"offset":7327},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\Doctrine\\DoctrineEmptyCollectionFilter;\nuse DeepCopy\\Matcher\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new DoctrineEmptyCollectionFilter(), new PropertyMatcher('MyClass', 'myProperty'));\n\n$copy = $copier->copy($object);\n\n// $copy->myProperty will return an empty collection","position":{"start":{"line":287,"column":1,"offset":7329},"end":{"line":298,"column":4,"offset":7677},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"inlineCode","value":"DoctrineProxyFilter","position":{"start":{"line":301,"column":6,"offset":7685},"end":{"line":301,"column":27,"offset":7706},"indent":[]}},{"type":"text","value":" (filter)","position":{"start":{"line":301,"column":27,"offset":7706},"end":{"line":301,"column":36,"offset":7715},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":7680},"end":{"line":301,"column":36,"offset":7715},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you use Doctrine and use cloning on lazy loaded entities, you might encounter errors mentioning missing fields on a\nDoctrine proxy class (...","position":{"start":{"line":303,"column":1,"offset":7717},"end":{"line":304,"column":26,"offset":7861},"indent":[1]}},{"type":"text","value":"\\","position":{"start":{"line":304,"column":26,"offset":7861},"end":{"line":304,"column":28,"offset":7863},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":304,"column":28,"offset":7863},"end":{"line":304,"column":30,"offset":7865},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":304,"column":30,"offset":7865},"end":{"line":304,"column":32,"offset":7867},"indent":[]}},{"type":"text","value":"CG","position":{"start":{"line":304,"column":32,"offset":7867},"end":{"line":304,"column":34,"offset":7869},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":304,"column":34,"offset":7869},"end":{"line":304,"column":36,"offset":7871},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":304,"column":36,"offset":7871},"end":{"line":304,"column":38,"offset":7873},"indent":[]}},{"type":"text","value":"\\Proxy).\nYou can use the ","position":{"start":{"line":304,"column":38,"offset":7873},"end":{"line":305,"column":17,"offset":7898},"indent":[1]}},{"type":"inlineCode","value":"DoctrineProxyFilter","position":{"start":{"line":305,"column":17,"offset":7898},"end":{"line":305,"column":38,"offset":7919},"indent":[]}},{"type":"text","value":" to load the actual entity behind the Doctrine proxy class.\n","position":{"start":{"line":305,"column":38,"offset":7919},"end":{"line":306,"column":1,"offset":7979},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"Make sure, though, to put this as one of your very first filters in the filter chain so that the entity is loaded\nbefore other filters are applied!","position":{"start":{"line":306,"column":3,"offset":7981},"end":{"line":307,"column":34,"offset":8128},"indent":[1]}}],"position":{"start":{"line":306,"column":1,"offset":7979},"end":{"line":307,"column":36,"offset":8130},"indent":[1]}},{"type":"text","value":"\nWe recommend to decorate the ","position":{"start":{"line":307,"column":36,"offset":8130},"end":{"line":308,"column":30,"offset":8160},"indent":[1]}},{"type":"inlineCode","value":"DoctrineProxyFilter","position":{"start":{"line":308,"column":30,"offset":8160},"end":{"line":308,"column":51,"offset":8181},"indent":[]}},{"type":"text","value":" with the ","position":{"start":{"line":308,"column":51,"offset":8181},"end":{"line":308,"column":61,"offset":8191},"indent":[]}},{"type":"inlineCode","value":"ChainableFilter","position":{"start":{"line":308,"column":61,"offset":8191},"end":{"line":308,"column":78,"offset":8208},"indent":[]}},{"type":"text","value":" to allow applying other filters to the\ncloned lazy loaded entities.","position":{"start":{"line":308,"column":78,"offset":8208},"end":{"line":309,"column":29,"offset":8276},"indent":[1]}}],"position":{"start":{"line":303,"column":1,"offset":7717},"end":{"line":309,"column":29,"offset":8276},"indent":[1,1,1,1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\Doctrine\\DoctrineProxyFilter;\nuse DeepCopy\\Matcher\\Doctrine\\DoctrineProxyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new ChainableFilter(new DoctrineProxyFilter()), new DoctrineProxyMatcher());\n\n$copy = $copier->copy($object);\n\n// $copy should now contain a clone of all entities, including those that were not yet fully loaded.","position":{"start":{"line":311,"column":1,"offset":8278},"end":{"line":322,"column":4,"offset":8671},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"inlineCode","value":"ReplaceFilter","position":{"start":{"line":325,"column":6,"offset":8679},"end":{"line":325,"column":21,"offset":8694},"indent":[]}},{"type":"text","value":" (type filter)","position":{"start":{"line":325,"column":21,"offset":8694},"end":{"line":325,"column":35,"offset":8708},"indent":[]}}],"position":{"start":{"line":325,"column":1,"offset":8674},"end":{"line":325,"column":35,"offset":8708},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If you want to replace the value of a property:","position":{"start":{"line":327,"column":4,"offset":8713},"end":{"line":327,"column":51,"offset":8760},"indent":[]}}],"position":{"start":{"line":327,"column":4,"offset":8713},"end":{"line":327,"column":51,"offset":8760},"indent":[]}}],"position":{"start":{"line":327,"column":1,"offset":8710},"end":{"line":327,"column":51,"offset":8760},"indent":[]}}],"position":{"start":{"line":327,"column":1,"offset":8710},"end":{"line":327,"column":51,"offset":8760},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\ReplaceFilter;\nuse DeepCopy\\Matcher\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$callback = function ($currentValue) {\n  return $currentValue . ' (copy)'\n};\n$copier->addFilter(new ReplaceFilter($callback), new PropertyMatcher('MyClass', 'title'));\n\n$copy = $copier->copy($object);\n\n// $copy->title will contain the data returned by the callback, e.g. 'The title (copy)'","position":{"start":{"line":329,"column":1,"offset":8762},"end":{"line":343,"column":4,"offset":9185},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":true,"start":2,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If you want to replace whole element:","position":{"start":{"line":345,"column":4,"offset":9190},"end":{"line":345,"column":41,"offset":9227},"indent":[]}}],"position":{"start":{"line":345,"column":4,"offset":9190},"end":{"line":345,"column":41,"offset":9227},"indent":[]}}],"position":{"start":{"line":345,"column":1,"offset":9187},"end":{"line":345,"column":41,"offset":9227},"indent":[]}}],"position":{"start":{"line":345,"column":1,"offset":9187},"end":{"line":345,"column":41,"offset":9227},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\DeepCopy;\nuse DeepCopy\\TypeFilter\\ReplaceFilter;\nuse DeepCopy\\TypeMatcher\\TypeMatcher;\n\n$copier = new DeepCopy();\n$callback = function (MyClass $myClass) {\n  return get_class($myClass);\n};\n$copier->addTypeFilter(new ReplaceFilter($callback), new TypeMatcher('MyClass'));\n\n$copy = $copier->copy([new MyClass, 'some string', new MyClass]);\n\n// $copy will contain ['MyClass', 'some string', 'MyClass']","position":{"start":{"line":347,"column":1,"offset":9229},"end":{"line":361,"column":4,"offset":9651},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":364,"column":1,"offset":9654},"end":{"line":364,"column":5,"offset":9658},"indent":[]}},{"type":"inlineCode","value":"$callback","position":{"start":{"line":364,"column":5,"offset":9658},"end":{"line":364,"column":16,"offset":9669},"indent":[]}},{"type":"text","value":" parameter of the ","position":{"start":{"line":364,"column":16,"offset":9669},"end":{"line":364,"column":34,"offset":9687},"indent":[]}},{"type":"inlineCode","value":"ReplaceFilter","position":{"start":{"line":364,"column":34,"offset":9687},"end":{"line":364,"column":49,"offset":9702},"indent":[]}},{"type":"text","value":" constructor accepts any PHP callable.","position":{"start":{"line":364,"column":49,"offset":9702},"end":{"line":364,"column":87,"offset":9740},"indent":[]}}],"position":{"start":{"line":364,"column":1,"offset":9654},"end":{"line":364,"column":87,"offset":9740},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"inlineCode","value":"ShallowCopyFilter","position":{"start":{"line":367,"column":6,"offset":9748},"end":{"line":367,"column":25,"offset":9767},"indent":[]}},{"type":"text","value":" (type filter)","position":{"start":{"line":367,"column":25,"offset":9767},"end":{"line":367,"column":39,"offset":9781},"indent":[]}}],"position":{"start":{"line":367,"column":1,"offset":9743},"end":{"line":367,"column":39,"offset":9781},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Stop ","position":{"start":{"line":369,"column":1,"offset":9783},"end":{"line":369,"column":6,"offset":9788},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"DeepCopy","position":{"start":{"line":369,"column":7,"offset":9789},"end":{"line":369,"column":15,"offset":9797},"indent":[]}}],"position":{"start":{"line":369,"column":6,"offset":9788},"end":{"line":369,"column":16,"offset":9798},"indent":[]}},{"type":"text","value":" from recursively copying element, using standard ","position":{"start":{"line":369,"column":16,"offset":9798},"end":{"line":369,"column":66,"offset":9848},"indent":[]}},{"type":"inlineCode","value":"clone","position":{"start":{"line":369,"column":66,"offset":9848},"end":{"line":369,"column":73,"offset":9855},"indent":[]}},{"type":"text","value":" instead:","position":{"start":{"line":369,"column":73,"offset":9855},"end":{"line":369,"column":82,"offset":9864},"indent":[]}}],"position":{"start":{"line":369,"column":1,"offset":9783},"end":{"line":369,"column":82,"offset":9864},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"use DeepCopy\\DeepCopy;\nuse DeepCopy\\TypeFilter\\ShallowCopyFilter;\nuse DeepCopy\\TypeMatcher\\TypeMatcher;\nuse Mockery as m;\n\n$this->deepCopy = new DeepCopy();\n$this->deepCopy->addTypeFilter(\n\tnew ShallowCopyFilter,\n\tnew TypeMatcher(m\\MockInterface::class)\n);\n\n$myServiceWithMocks = new MyService(m::mock(MyDependency1::class), m::mock(MyDependency2::class));\n// All mocks will be just cloned, not deep copied","position":{"start":{"line":371,"column":1,"offset":9866},"end":{"line":385,"column":4,"offset":10283},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Edge cases","position":{"start":{"line":388,"column":4,"offset":10289},"end":{"line":388,"column":14,"offset":10299},"indent":[]}}],"position":{"start":{"line":388,"column":1,"offset":10286},"end":{"line":388,"column":14,"offset":10299},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following structures cannot be deep-copied with PHP Reflection. As a result they are shallow cloned and filters are\nnot applied. There is two ways for you to handle them:","position":{"start":{"line":390,"column":1,"offset":10301},"end":{"line":391,"column":55,"offset":10475},"indent":[1]}}],"position":{"start":{"line":390,"column":1,"offset":10301},"end":{"line":391,"column":55,"offset":10475},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Implement your own ","position":{"start":{"line":393,"column":3,"offset":10479},"end":{"line":393,"column":22,"offset":10498},"indent":[]}},{"type":"inlineCode","value":"__clone()","position":{"start":{"line":393,"column":22,"offset":10498},"end":{"line":393,"column":33,"offset":10509},"indent":[]}},{"type":"text","value":" method","position":{"start":{"line":393,"column":33,"offset":10509},"end":{"line":393,"column":40,"offset":10516},"indent":[]}}],"position":{"start":{"line":393,"column":3,"offset":10479},"end":{"line":393,"column":40,"offset":10516},"indent":[]}}],"position":{"start":{"line":393,"column":1,"offset":10477},"end":{"line":393,"column":40,"offset":10516},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use a filter with a type matcher","position":{"start":{"line":394,"column":3,"offset":10519},"end":{"line":394,"column":35,"offset":10551},"indent":[]}}],"position":{"start":{"line":394,"column":3,"offset":10519},"end":{"line":394,"column":35,"offset":10551},"indent":[]}}],"position":{"start":{"line":394,"column":1,"offset":10517},"end":{"line":394,"column":35,"offset":10551},"indent":[]}}],"position":{"start":{"line":393,"column":1,"offset":10477},"end":{"line":394,"column":35,"offset":10551},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Contributing","position":{"start":{"line":397,"column":4,"offset":10557},"end":{"line":397,"column":16,"offset":10569},"indent":[]}}],"position":{"start":{"line":397,"column":1,"offset":10554},"end":{"line":397,"column":16,"offset":10569},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"DeepCopy is distributed under the MIT license.","position":{"start":{"line":399,"column":1,"offset":10571},"end":{"line":399,"column":47,"offset":10617},"indent":[]}}],"position":{"start":{"line":399,"column":1,"offset":10571},"end":{"line":399,"column":47,"offset":10617},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Tests","position":{"start":{"line":402,"column":5,"offset":10624},"end":{"line":402,"column":10,"offset":10629},"indent":[]}}],"position":{"start":{"line":402,"column":1,"offset":10620},"end":{"line":402,"column":10,"offset":10629},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Running the tests is simple:","position":{"start":{"line":404,"column":1,"offset":10631},"end":{"line":404,"column":29,"offset":10659},"indent":[]}}],"position":{"start":{"line":404,"column":1,"offset":10631},"end":{"line":404,"column":29,"offset":10659},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"vendor/bin/phpunit","position":{"start":{"line":406,"column":1,"offset":10661},"end":{"line":408,"column":4,"offset":10690},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Support","position":{"start":{"line":410,"column":5,"offset":10696},"end":{"line":410,"column":12,"offset":10703},"indent":[]}}],"position":{"start":{"line":410,"column":1,"offset":10692},"end":{"line":410,"column":12,"offset":10703},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Get professional support via ","position":{"start":{"line":412,"column":1,"offset":10705},"end":{"line":412,"column":30,"offset":10734},"indent":[]}},{"type":"link","title":null,"url":"https://tidelift.com/subscription/pkg/packagist-myclabs-deep-copy?utm_source=packagist-myclabs-deep-copy&utm_medium=referral&utm_campaign=readme","children":[{"type":"text","value":"the Tidelift Subscription","position":{"start":{"line":412,"column":31,"offset":10735},"end":{"line":412,"column":56,"offset":10760},"indent":[]}}],"position":{"start":{"line":412,"column":30,"offset":10734},"end":{"line":412,"column":203,"offset":10907},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":412,"column":203,"offset":10907},"end":{"line":412,"column":204,"offset":10908},"indent":[]}}],"position":{"start":{"line":412,"column":1,"offset":10705},"end":{"line":412,"column":204,"offset":10908},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":415,"column":1,"offset":10911},"end":{"line":415,"column":31,"offset":10941},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":415,"column":31,"offset":10941}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"deepcopy\"\n    }}>{`DeepCopy`}</h1>\n    <p>{`DeepCopy helps you create deep copies (clones) of your objects. It is designed to handle cycles in the association graph.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://packagist.org/packages/myclabs/deep-copy\"\n      }}><img alt=\"Total Downloads\" src=\"https://poser.pugx.org/myclabs/deep-copy/downloads.svg\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/myclabs/DeepCopy/actions/workflows/ci.yaml\"\n      }}><img alt=\"Integrate\" src=\"https://github.com/myclabs/DeepCopy/actions/workflows/ci.yaml/badge.svg?branch=1.x\" /></a></p>\n    <h2 {...{\n      \"id\": \"table-of-contents\"\n    }}>{`Table of Contents`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#how\"\n        }}>{`How`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#why\"\n        }}>{`Why`}</a>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\"><a parentName=\"li\" {...{\n              \"href\": \"#using-simply-clone\"\n            }}>{`Using simply `}<inlineCode parentName=\"a\">{`clone`}</inlineCode></a></li>\n          <li parentName=\"ol\"><a parentName=\"li\" {...{\n              \"href\": \"#overriding-__clone\"\n            }}>{`Overriding `}<inlineCode parentName=\"a\">{`__clone()`}</inlineCode></a></li>\n          <li parentName=\"ol\"><a parentName=\"li\" {...{\n              \"href\": \"#with-deepcopy\"\n            }}>{`With `}<inlineCode parentName=\"a\">{`DeepCopy`}</inlineCode></a></li>\n        </ol>\n      </li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#how-it-works\"\n        }}>{`How it works`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#going-further\"\n        }}>{`Going further`}</a>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\"><a parentName=\"li\" {...{\n              \"href\": \"#matchers\"\n            }}>{`Matchers`}</a>\n            <ol parentName=\"li\">\n              <li parentName=\"ol\"><a parentName=\"li\" {...{\n                  \"href\": \"#property-name\"\n                }}>{`Property name`}</a></li>\n              <li parentName=\"ol\"><a parentName=\"li\" {...{\n                  \"href\": \"#specific-property\"\n                }}>{`Specific property`}</a></li>\n              <li parentName=\"ol\"><a parentName=\"li\" {...{\n                  \"href\": \"#type\"\n                }}>{`Type`}</a></li>\n            </ol>\n          </li>\n          <li parentName=\"ol\"><a parentName=\"li\" {...{\n              \"href\": \"#filters\"\n            }}>{`Filters`}</a>\n            <ol parentName=\"li\">\n              <li parentName=\"ol\"><a parentName=\"li\" {...{\n                  \"href\": \"#setnullfilter-filter\"\n                }}><inlineCode parentName=\"a\">{`SetNullFilter`}</inlineCode></a></li>\n              <li parentName=\"ol\"><a parentName=\"li\" {...{\n                  \"href\": \"#keepfilter-filter\"\n                }}><inlineCode parentName=\"a\">{`KeepFilter`}</inlineCode></a></li>\n              <li parentName=\"ol\"><a parentName=\"li\" {...{\n                  \"href\": \"#doctrinecollectionfilter-filter\"\n                }}><inlineCode parentName=\"a\">{`DoctrineCollectionFilter`}</inlineCode></a></li>\n              <li parentName=\"ol\"><a parentName=\"li\" {...{\n                  \"href\": \"#doctrineemptycollectionfilter-filter\"\n                }}><inlineCode parentName=\"a\">{`DoctrineEmptyCollectionFilter`}</inlineCode></a></li>\n              <li parentName=\"ol\"><a parentName=\"li\" {...{\n                  \"href\": \"#doctrineproxyfilter-filter\"\n                }}><inlineCode parentName=\"a\">{`DoctrineProxyFilter`}</inlineCode></a></li>\n              <li parentName=\"ol\"><a parentName=\"li\" {...{\n                  \"href\": \"#replacefilter-type-filter\"\n                }}><inlineCode parentName=\"a\">{`ReplaceFilter`}</inlineCode></a></li>\n              <li parentName=\"ol\"><a parentName=\"li\" {...{\n                  \"href\": \"#shallowcopyfilter-type-filter\"\n                }}><inlineCode parentName=\"a\">{`ShallowCopyFilter`}</inlineCode></a></li>\n            </ol>\n          </li>\n        </ol>\n      </li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#edge-cases\"\n        }}>{`Edge cases`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#contributing\"\n        }}>{`Contributing`}</a>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\"><a parentName=\"li\" {...{\n              \"href\": \"#tests\"\n            }}>{`Tests`}</a></li>\n        </ol>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"how\"\n    }}>{`How?`}</h2>\n    <p>{`Install with Composer:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`composer require myclabs/deep-copy\n`}</code></pre>\n    <p>{`Use it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\DeepCopy;\n\n$copier = new DeepCopy();\n$myCopy = $copier->copy($myObject);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"why\"\n    }}>{`Why?`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`How do you create copies of your objects?`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$myCopy = clone $myObject;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`How do you create `}<strong parentName=\"li\">{`deep`}</strong>{` copies of your objects (i.e. copying also all the objects referenced in the properties)?`}</li>\n    </ul>\n    <p>{`You use `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.php.net/manual/en/language.oop5.cloning.php#object.clone\"\n      }}><inlineCode parentName=\"a\">{`__clone()`}</inlineCode></a>{` and implement the behavior\nyourself.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`But how do you handle `}<strong parentName=\"li\">{`cycles`}</strong>{` in the association graph?`}</li>\n    </ul>\n    <p>{`Now you're in for a big mess :(`}</p>\n    <p><img alt=\"association graph\" src={require(\"./doc/graph.png\")} /></p>\n    <h3 {...{\n      \"id\": \"using-simply-clone\"\n    }}>{`Using simply `}<inlineCode parentName=\"h3\">{`clone`}</inlineCode></h3>\n    <p><img alt=\"Using clone\" src={require(\"./doc/clone.png\")} /></p>\n    <h3 {...{\n      \"id\": \"overriding-__clone\"\n    }}>{`Overriding `}<inlineCode parentName=\"h3\">{`__clone()`}</inlineCode></h3>\n    <p><img alt=\"Overriding __clone\" src={require(\"./doc/deep-clone.png\")} /></p>\n    <h3 {...{\n      \"id\": \"with-deepcopy\"\n    }}>{`With `}<inlineCode parentName=\"h3\">{`DeepCopy`}</inlineCode></h3>\n    <p><img alt=\"With DeepCopy\" src={require(\"./doc/deep-copy.png\")} /></p>\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How it works`}</h2>\n    <p>{`DeepCopy recursively traverses all the object's properties and clones them. To avoid cloning the same object twice it\nkeeps a hash map of all instances and thus preserves the object graph.`}</p>\n    <p>{`To use it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use function DeepCopy\\\\deep_copy;\n\n$copy = deep_copy($var);\n`}</code></pre>\n    <p>{`Alternatively, you can create your own `}<inlineCode parentName=\"p\">{`DeepCopy`}</inlineCode>{` instance to configure it differently for example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\DeepCopy;\n\n$copier = new DeepCopy(true);\n\n$copy = $copier->copy($var);\n`}</code></pre>\n    <p>{`You may want to roll your own deep copy function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace Acme;\n\nuse DeepCopy\\\\DeepCopy;\n\nfunction deep_copy($var)\n{\n    static $copier = null;\n    \n    if (null === $copier) {\n        $copier = new DeepCopy(true);\n    }\n    \n    return $copier->copy($var);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"going-further\"\n    }}>{`Going further`}</h2>\n    <p>{`You can add filters to customize the copy process.`}</p>\n    <p>{`The method to add a filter is `}<inlineCode parentName=\"p\">{`DeepCopy\\\\DeepCopy::addFilter($filter, $matcher)`}</inlineCode>{`,\nwith `}<inlineCode parentName=\"p\">{`$filter`}</inlineCode>{` implementing `}<inlineCode parentName=\"p\">{`DeepCopy\\\\Filter\\\\Filter`}</inlineCode>{`\nand `}<inlineCode parentName=\"p\">{`$matcher`}</inlineCode>{` implementing `}<inlineCode parentName=\"p\">{`DeepCopy\\\\Matcher\\\\Matcher`}</inlineCode>{`.`}</p>\n    <p>{`We provide some generic filters and matchers.`}</p>\n    <h3 {...{\n      \"id\": \"matchers\"\n    }}>{`Matchers`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`DeepCopy\\\\Matcher`}</inlineCode>{` applies on a object attribute.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`DeepCopy\\\\TypeMatcher`}</inlineCode>{` applies on any element found in graph, including array elements.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"property-name\"\n    }}>{`Property name`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`PropertyNameMatcher`}</inlineCode>{` will match a property by its name:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\Matcher\\\\PropertyNameMatcher;\n\n// Will apply a filter to any property of any objects named \"id\"\n$matcher = new PropertyNameMatcher('id');\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"specific-property\"\n    }}>{`Specific property`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`PropertyMatcher`}</inlineCode>{` will match a specific property of a specific class:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\Matcher\\\\PropertyMatcher;\n\n// Will apply a filter to the property \"id\" of any objects of the class \"MyClass\"\n$matcher = new PropertyMatcher('MyClass', 'id');\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"type\"\n    }}>{`Type`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TypeMatcher`}</inlineCode>{` will match any element by its type (instance of a class or any value that could be parameter of\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://php.net/manual/en/function.gettype.php\"\n      }}>{`gettype()`}</a>{` function):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\TypeMatcher\\\\TypeMatcher;\n\n// Will apply a filter to any object that is an instance of Doctrine\\\\Common\\\\Collections\\\\Collection\n$matcher = new TypeMatcher('Doctrine\\\\Common\\\\Collections\\\\Collection');\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"filters\"\n    }}>{`Filters`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`DeepCopy\\\\Filter`}</inlineCode>{` applies a transformation to the object attribute matched by `}<inlineCode parentName=\"li\">{`DeepCopy\\\\Matcher`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`DeepCopy\\\\TypeFilter`}</inlineCode>{` applies a transformation to any element matched by `}<inlineCode parentName=\"li\">{`DeepCopy\\\\TypeMatcher`}</inlineCode></li>\n    </ul>\n    <p>{`By design, matching a filter will stop the chain of filters (i.e. the next ones will not be applied).\nUsing the (`}<a parentName=\"p\" {...{\n        \"href\": \"#chainablefilter-filter\"\n      }}><inlineCode parentName=\"a\">{`ChainableFilter`}</inlineCode></a>{`) won't stop the chain of filters.`}</p>\n    <h4 {...{\n      \"id\": \"setnullfilter-filter\"\n    }}><inlineCode parentName=\"h4\">{`SetNullFilter`}</inlineCode>{` (filter)`}</h4>\n    <p>{`Let's say for example that you are copying a database record (or a Doctrine entity), so you want the copy not to have\nany ID:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\DeepCopy;\nuse DeepCopy\\\\Filter\\\\SetNullFilter;\nuse DeepCopy\\\\Matcher\\\\PropertyNameMatcher;\n\n$object = MyClass::load(123);\necho $object->id; // 123\n\n$copier = new DeepCopy();\n$copier->addFilter(new SetNullFilter(), new PropertyNameMatcher('id'));\n\n$copy = $copier->copy($object);\n\necho $copy->id; // null\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"keepfilter-filter\"\n    }}><inlineCode parentName=\"h4\">{`KeepFilter`}</inlineCode>{` (filter)`}</h4>\n    <p>{`If you want a property to remain untouched (for example, an association to an object):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\DeepCopy;\nuse DeepCopy\\\\Filter\\\\KeepFilter;\nuse DeepCopy\\\\Matcher\\\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new KeepFilter(), new PropertyMatcher('MyClass', 'category'));\n\n$copy = $copier->copy($object);\n// $copy->category has not been touched\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"chainablefilter-filter\"\n    }}><inlineCode parentName=\"h4\">{`ChainableFilter`}</inlineCode>{` (filter)`}</h4>\n    <p>{`If you use cloning on proxy classes, you might want to apply two filters for:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`loading the data`}</li>\n      <li parentName=\"ol\">{`applying a transformation`}</li>\n    </ol>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`ChainableFilter`}</inlineCode>{` as a decorator of the proxy loader filter, which won't stop the chain of filters (i.e.\nthe next ones may be applied).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\DeepCopy;\nuse DeepCopy\\\\Filter\\\\ChainableFilter;\nuse DeepCopy\\\\Filter\\\\Doctrine\\\\DoctrineProxyFilter;\nuse DeepCopy\\\\Filter\\\\SetNullFilter;\nuse DeepCopy\\\\Matcher\\\\Doctrine\\\\DoctrineProxyMatcher;\nuse DeepCopy\\\\Matcher\\\\PropertyNameMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new ChainableFilter(new DoctrineProxyFilter()), new DoctrineProxyMatcher());\n$copier->addFilter(new SetNullFilter(), new PropertyNameMatcher('id'));\n\n$copy = $copier->copy($object);\n\necho $copy->id; // null\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"doctrinecollectionfilter-filter\"\n    }}><inlineCode parentName=\"h4\">{`DoctrineCollectionFilter`}</inlineCode>{` (filter)`}</h4>\n    <p>{`If you use Doctrine and want to copy an entity, you will need to use the `}<inlineCode parentName=\"p\">{`DoctrineCollectionFilter`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\DeepCopy;\nuse DeepCopy\\\\Filter\\\\Doctrine\\\\DoctrineCollectionFilter;\nuse DeepCopy\\\\Matcher\\\\PropertyTypeMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new DoctrineCollectionFilter(), new PropertyTypeMatcher('Doctrine\\\\Common\\\\Collections\\\\Collection'));\n\n$copy = $copier->copy($object);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"doctrineemptycollectionfilter-filter\"\n    }}><inlineCode parentName=\"h4\">{`DoctrineEmptyCollectionFilter`}</inlineCode>{` (filter)`}</h4>\n    <p>{`If you use Doctrine and want to copy an entity who contains a `}<inlineCode parentName=\"p\">{`Collection`}</inlineCode>{` that you want to be reset, you can use the\n`}<inlineCode parentName=\"p\">{`DoctrineEmptyCollectionFilter`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\DeepCopy;\nuse DeepCopy\\\\Filter\\\\Doctrine\\\\DoctrineEmptyCollectionFilter;\nuse DeepCopy\\\\Matcher\\\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new DoctrineEmptyCollectionFilter(), new PropertyMatcher('MyClass', 'myProperty'));\n\n$copy = $copier->copy($object);\n\n// $copy->myProperty will return an empty collection\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"doctrineproxyfilter-filter\"\n    }}><inlineCode parentName=\"h4\">{`DoctrineProxyFilter`}</inlineCode>{` (filter)`}</h4>\n    <p>{`If you use Doctrine and use cloning on lazy loaded entities, you might encounter errors mentioning missing fields on a\nDoctrine proxy class (...`}{`\\\\`}{`_`}{`_`}{`CG`}{`_`}{`_`}{`\\\\Proxy).\nYou can use the `}<inlineCode parentName=\"p\">{`DoctrineProxyFilter`}</inlineCode>{` to load the actual entity behind the Doctrine proxy class.\n`}<strong parentName=\"p\">{`Make sure, though, to put this as one of your very first filters in the filter chain so that the entity is loaded\nbefore other filters are applied!`}</strong>{`\nWe recommend to decorate the `}<inlineCode parentName=\"p\">{`DoctrineProxyFilter`}</inlineCode>{` with the `}<inlineCode parentName=\"p\">{`ChainableFilter`}</inlineCode>{` to allow applying other filters to the\ncloned lazy loaded entities.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\DeepCopy;\nuse DeepCopy\\\\Filter\\\\Doctrine\\\\DoctrineProxyFilter;\nuse DeepCopy\\\\Matcher\\\\Doctrine\\\\DoctrineProxyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new ChainableFilter(new DoctrineProxyFilter()), new DoctrineProxyMatcher());\n\n$copy = $copier->copy($object);\n\n// $copy should now contain a clone of all entities, including those that were not yet fully loaded.\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"replacefilter-type-filter\"\n    }}><inlineCode parentName=\"h4\">{`ReplaceFilter`}</inlineCode>{` (type filter)`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`If you want to replace the value of a property:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\DeepCopy;\nuse DeepCopy\\\\Filter\\\\ReplaceFilter;\nuse DeepCopy\\\\Matcher\\\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$callback = function ($currentValue) {\n  return $currentValue . ' (copy)'\n};\n$copier->addFilter(new ReplaceFilter($callback), new PropertyMatcher('MyClass', 'title'));\n\n$copy = $copier->copy($object);\n\n// $copy->title will contain the data returned by the callback, e.g. 'The title (copy)'\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`If you want to replace whole element:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\DeepCopy;\nuse DeepCopy\\\\TypeFilter\\\\ReplaceFilter;\nuse DeepCopy\\\\TypeMatcher\\\\TypeMatcher;\n\n$copier = new DeepCopy();\n$callback = function (MyClass $myClass) {\n  return get_class($myClass);\n};\n$copier->addTypeFilter(new ReplaceFilter($callback), new TypeMatcher('MyClass'));\n\n$copy = $copier->copy([new MyClass, 'some string', new MyClass]);\n\n// $copy will contain ['MyClass', 'some string', 'MyClass']\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`$callback`}</inlineCode>{` parameter of the `}<inlineCode parentName=\"p\">{`ReplaceFilter`}</inlineCode>{` constructor accepts any PHP callable.`}</p>\n    <h4 {...{\n      \"id\": \"shallowcopyfilter-type-filter\"\n    }}><inlineCode parentName=\"h4\">{`ShallowCopyFilter`}</inlineCode>{` (type filter)`}</h4>\n    <p>{`Stop `}<em parentName=\"p\">{`DeepCopy`}</em>{` from recursively copying element, using standard `}<inlineCode parentName=\"p\">{`clone`}</inlineCode>{` instead:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use DeepCopy\\\\DeepCopy;\nuse DeepCopy\\\\TypeFilter\\\\ShallowCopyFilter;\nuse DeepCopy\\\\TypeMatcher\\\\TypeMatcher;\nuse Mockery as m;\n\n$this->deepCopy = new DeepCopy();\n$this->deepCopy->addTypeFilter(\n    new ShallowCopyFilter,\n    new TypeMatcher(m\\\\MockInterface::class)\n);\n\n$myServiceWithMocks = new MyService(m::mock(MyDependency1::class), m::mock(MyDependency2::class));\n// All mocks will be just cloned, not deep copied\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"edge-cases\"\n    }}>{`Edge cases`}</h2>\n    <p>{`The following structures cannot be deep-copied with PHP Reflection. As a result they are shallow cloned and filters are\nnot applied. There is two ways for you to handle them:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Implement your own `}<inlineCode parentName=\"li\">{`__clone()`}</inlineCode>{` method`}</li>\n      <li parentName=\"ul\">{`Use a filter with a type matcher`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"contributing\"\n    }}>{`Contributing`}</h2>\n    <p>{`DeepCopy is distributed under the MIT license.`}</p>\n    <h3 {...{\n      \"id\": \"tests\"\n    }}>{`Tests`}</h3>\n    <p>{`Running the tests is simple:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`vendor/bin/phpunit\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"support\"\n    }}>{`Support`}</h3>\n    <p>{`Get professional support via `}<a parentName=\"p\" {...{\n        \"href\": \"https://tidelift.com/subscription/pkg/packagist-myclabs-deep-copy?utm_source=packagist-myclabs-deep-copy&utm_medium=referral&utm_campaign=readme\"\n      }}>{`the Tidelift Subscription`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}