{"expireTime":9007200985218093000,"key":"gatsby-plugin-mdx-entire-payload-3c706c4a9e45a1bc47e5be7b910d7dd8-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":109,"offset":110},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":112},"end":{"line":5,"column":29,"offset":140},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Mockery","position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":7,"column":8,"offset":149},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":142},"end":{"line":8,"column":8,"offset":157},"indent":[1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/mockery/mockery/actions","children":[{"type":"image","title":null,"url":"https://github.com/mockery/mockery/actions/workflows/tests.yml/badge.svg","alt":"Build Status","position":{"start":{"line":10,"column":2,"offset":160},"end":{"line":10,"column":91,"offset":249},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":159},"end":{"line":10,"column":136,"offset":294},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":10,"column":136,"offset":294},"end":{"line":11,"column":1,"offset":295},"indent":[1]}},{"type":"link","title":null,"url":"https://www.php.net/supported-versions","children":[{"type":"image","title":null,"url":"https://badgen.net/packagist/php/mockery/mockery?color=8892bf","alt":"Supported PHP Version","position":{"start":{"line":11,"column":2,"offset":296},"end":{"line":11,"column":89,"offset":383},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":295},"end":{"line":11,"column":130,"offset":424},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":11,"column":130,"offset":424},"end":{"line":12,"column":1,"offset":425},"indent":[1]}},{"type":"link","title":null,"url":"https://codecov.io/gh/mockery/mockery","children":[{"type":"image","title":null,"url":"https://codecov.io/gh/mockery/mockery/branch/1.6.x/graph/badge.svg?token=oxHwVM56bT","alt":"Code Coverage","position":{"start":{"line":12,"column":2,"offset":426},"end":{"line":12,"column":103,"offset":527},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":425},"end":{"line":12,"column":143,"offset":567},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":12,"column":143,"offset":567},"end":{"line":13,"column":1,"offset":568},"indent":[1]}},{"type":"link","title":null,"url":"https://shepherd.dev/github/mockery/mockery","children":[{"type":"image","title":null,"url":"https://shepherd.dev/github/mockery/mockery/coverage.svg","alt":"Type Coverage","position":{"start":{"line":13,"column":2,"offset":569},"end":{"line":13,"column":76,"offset":643},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":568},"end":{"line":13,"column":122,"offset":689},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":122,"offset":689},"end":{"line":14,"column":1,"offset":690},"indent":[1]}},{"type":"link","title":null,"url":"https://packagist.org/packages/mockery/mockery","children":[{"type":"image","title":null,"url":"https://poser.pugx.org/mockery/mockery/v/stable.svg","alt":"Latest Stable Version","position":{"start":{"line":14,"column":2,"offset":691},"end":{"line":14,"column":79,"offset":768},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":690},"end":{"line":14,"column":128,"offset":817},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":14,"column":128,"offset":817},"end":{"line":15,"column":1,"offset":818},"indent":[1]}},{"type":"link","title":null,"url":"https://packagist.org/packages/mockery/mockery","children":[{"type":"image","title":null,"url":"https://poser.pugx.org/mockery/mockery/downloads.svg","alt":"Total Downloads","position":{"start":{"line":15,"column":2,"offset":819},"end":{"line":15,"column":74,"offset":891},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":818},"end":{"line":15,"column":123,"offset":940},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":159},"end":{"line":15,"column":123,"offset":940},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Mockery is a simple yet flexible PHP mock object framework for use in unit testing\nwith PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a\ntest double framework with a succinct API capable of clearly defining all possible\nobject operations and interactions using a human readable Domain Specific Language\n(DSL). Designed as a drop in alternative to PHPUnit's phpunit-mock-objects library,\nMockery is easy to integrate with PHPUnit and can operate alongside\nphpunit-mock-objects without the World ending.","position":{"start":{"line":17,"column":1,"offset":942},"end":{"line":23,"column":47,"offset":1471},"indent":[1,1,1,1,1,1]}}],"position":{"start":{"line":17,"column":1,"offset":942},"end":{"line":23,"column":47,"offset":1471},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Mockery is released under a New BSD License.","position":{"start":{"line":25,"column":1,"offset":1473},"end":{"line":25,"column":45,"offset":1517},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1473},"end":{"line":25,"column":45,"offset":1517},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Installation","position":{"start":{"line":27,"column":4,"offset":1522},"end":{"line":27,"column":16,"offset":1534},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1519},"end":{"line":27,"column":16,"offset":1534},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To install Mockery, run the command below and you will get the latest\nversion","position":{"start":{"line":29,"column":1,"offset":1536},"end":{"line":30,"column":8,"offset":1613},"indent":[1]}}],"position":{"start":{"line":29,"column":1,"offset":1536},"end":{"line":30,"column":8,"offset":1613},"indent":[1]}},{"type":"code","lang":"sh","meta":null,"value":"composer require --dev mockery/mockery","position":{"start":{"line":32,"column":1,"offset":1615},"end":{"line":34,"column":4,"offset":1663},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Documentation","position":{"start":{"line":36,"column":4,"offset":1668},"end":{"line":36,"column":17,"offset":1681},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1665},"end":{"line":36,"column":17,"offset":1681},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In older versions, this README file was the documentation for Mockery. Over time\nwe have improved this, and have created an extensive documentation for you. Please\nuse this README file as a starting point for Mockery, but do read the documentation\nto learn how to use Mockery.","position":{"start":{"line":38,"column":1,"offset":1683},"end":{"line":41,"column":29,"offset":1959},"indent":[1,1,1]}}],"position":{"start":{"line":38,"column":1,"offset":1683},"end":{"line":41,"column":29,"offset":1959},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The current version can be seen at ","position":{"start":{"line":43,"column":1,"offset":1961},"end":{"line":43,"column":36,"offset":1996},"indent":[]}},{"type":"link","title":null,"url":"http://docs.mockery.io","children":[{"type":"text","value":"docs.mockery.io","position":{"start":{"line":43,"column":37,"offset":1997},"end":{"line":43,"column":52,"offset":2012},"indent":[]}}],"position":{"start":{"line":43,"column":36,"offset":1996},"end":{"line":43,"column":77,"offset":2037},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":43,"column":77,"offset":2037},"end":{"line":43,"column":78,"offset":2038},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1961},"end":{"line":43,"column":78,"offset":2038},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHPUnit Integration","position":{"start":{"line":45,"column":4,"offset":2043},"end":{"line":45,"column":23,"offset":2062},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2040},"end":{"line":45,"column":23,"offset":2062},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Mockery ships with some helpers if you are using PHPUnit. You can extend the\n","position":{"start":{"line":47,"column":1,"offset":2064},"end":{"line":48,"column":1,"offset":2141},"indent":[1]}},{"type":"link","title":null,"url":"library/Mockery/Adapter/Phpunit/MockeryTestCase.php","children":[{"type":"inlineCode","value":"Mockery\\Adapter\\Phpunit\\MockeryTestCase","position":{"start":{"line":48,"column":2,"offset":2142},"end":{"line":48,"column":43,"offset":2183},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2141},"end":{"line":48,"column":97,"offset":2237},"indent":[]}},{"type":"text","value":"\nclass instead of ","position":{"start":{"line":48,"column":97,"offset":2237},"end":{"line":49,"column":18,"offset":2255},"indent":[1]}},{"type":"inlineCode","value":"PHPUnit\\Framework\\TestCase","position":{"start":{"line":49,"column":18,"offset":2255},"end":{"line":49,"column":46,"offset":2283},"indent":[]}},{"type":"text","value":", or if you are already using a\ncustom base class for your tests, take a look at the traits available in the\n","position":{"start":{"line":49,"column":46,"offset":2283},"end":{"line":51,"column":1,"offset":2392},"indent":[1,1]}},{"type":"link","title":null,"url":"library/Mockery/Adapter/Phpunit","children":[{"type":"inlineCode","value":"Mockery\\Adapter\\Phpunit","position":{"start":{"line":51,"column":2,"offset":2393},"end":{"line":51,"column":27,"offset":2418},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2392},"end":{"line":51,"column":61,"offset":2452},"indent":[]}},{"type":"text","value":" namespace.","position":{"start":{"line":51,"column":61,"offset":2452},"end":{"line":51,"column":72,"offset":2463},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2064},"end":{"line":51,"column":72,"offset":2463},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Test Doubles","position":{"start":{"line":53,"column":4,"offset":2468},"end":{"line":53,"column":16,"offset":2480},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2465},"end":{"line":53,"column":16,"offset":2480},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Test doubles (often called mocks) simulate the behaviour of real objects. They are\ncommonly utilised to offer test isolation, to stand in for objects which do not\nyet exist, or to allow for the exploratory design of class APIs without\nrequiring actual implementation up front.","position":{"start":{"line":55,"column":1,"offset":2482},"end":{"line":58,"column":42,"offset":2758},"indent":[1,1,1]}}],"position":{"start":{"line":55,"column":1,"offset":2482},"end":{"line":58,"column":42,"offset":2758},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The benefits of a test double framework are to allow for the flexible generation\nand configuration of test doubles. They allow the setting of expected method calls\nand/or return values using a flexible API which is capable of capturing every\npossible real object behaviour in way that is stated as close as possible to a\nnatural language description. Use the ","position":{"start":{"line":60,"column":1,"offset":2760},"end":{"line":64,"column":39,"offset":3119},"indent":[1,1,1,1]}},{"type":"inlineCode","value":"Mockery::mock","position":{"start":{"line":64,"column":39,"offset":3119},"end":{"line":64,"column":54,"offset":3134},"indent":[]}},{"type":"text","value":" method to create a test\ndouble.","position":{"start":{"line":64,"column":54,"offset":3134},"end":{"line":65,"column":8,"offset":3166},"indent":[1]}}],"position":{"start":{"line":60,"column":1,"offset":2760},"end":{"line":65,"column":8,"offset":3166},"indent":[1,1,1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"$double = Mockery::mock();","position":{"start":{"line":67,"column":1,"offset":3168},"end":{"line":69,"column":4,"offset":3206},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you need Mockery to create a test double to satisfy a particular type hint,\nyou can pass the type to the ","position":{"start":{"line":71,"column":1,"offset":3208},"end":{"line":72,"column":30,"offset":3316},"indent":[1]}},{"type":"inlineCode","value":"mock","position":{"start":{"line":72,"column":30,"offset":3316},"end":{"line":72,"column":36,"offset":3322},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":72,"column":36,"offset":3322},"end":{"line":72,"column":44,"offset":3330},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":3208},"end":{"line":72,"column":44,"offset":3330},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"class Book {}\n\ninterface BookRepository {\n    function find($id): Book;\n    function findAll(): array;\n    function add(Book $book): void;\n}\n\n$double = Mockery::mock(BookRepository::class);","position":{"start":{"line":74,"column":1,"offset":3332},"end":{"line":84,"column":4,"offset":3533},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A detailed explanation of creating and working with test doubles is given in the\ndocumentation, ","position":{"start":{"line":86,"column":1,"offset":3535},"end":{"line":87,"column":16,"offset":3631},"indent":[1]}},{"type":"link","title":null,"url":"http://docs.mockery.io/en/latest/reference/creating_test_doubles.html","children":[{"type":"text","value":"Creating test doubles","position":{"start":{"line":87,"column":17,"offset":3632},"end":{"line":87,"column":38,"offset":3653},"indent":[]}}],"position":{"start":{"line":87,"column":16,"offset":3631},"end":{"line":87,"column":110,"offset":3725},"indent":[]}},{"type":"text","value":"\nsection.","position":{"start":{"line":87,"column":110,"offset":3725},"end":{"line":88,"column":9,"offset":3734},"indent":[1]}}],"position":{"start":{"line":86,"column":1,"offset":3535},"end":{"line":88,"column":9,"offset":3734},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Method Stubs 🎫","position":{"start":{"line":90,"column":4,"offset":3739},"end":{"line":90,"column":19,"offset":3754},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":3736},"end":{"line":90,"column":19,"offset":3754},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A method stub is a mechanism for having your test double return canned responses\nto certain method calls. With stubs, you don't care how many times, if at all,\nthe method is called. Stubs are used to provide indirect input to the system\nunder test.","position":{"start":{"line":92,"column":1,"offset":3756},"end":{"line":95,"column":12,"offset":4004},"indent":[1,1,1]}}],"position":{"start":{"line":92,"column":1,"offset":3756},"end":{"line":95,"column":12,"offset":4004},"indent":[1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"$double->allows()->find(123)->andReturns(new Book());\n\n$book = $double->find(123);","position":{"start":{"line":97,"column":1,"offset":4006},"end":{"line":101,"column":4,"offset":4100},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you have used Mockery before, you might see something new in the example\nabove ","position":{"start":{"line":103,"column":1,"offset":4102},"end":{"line":104,"column":7,"offset":4184},"indent":[1]}},{"type":"text","value":"—","position":{"start":{"line":104,"column":7,"offset":4184},"end":{"line":104,"column":14,"offset":4191},"indent":[]}},{"type":"text","value":" we created a method stub using ","position":{"start":{"line":104,"column":14,"offset":4191},"end":{"line":104,"column":46,"offset":4223},"indent":[]}},{"type":"inlineCode","value":"allows","position":{"start":{"line":104,"column":46,"offset":4223},"end":{"line":104,"column":54,"offset":4231},"indent":[]}},{"type":"text","value":", instead of the \"old\"\n","position":{"start":{"line":104,"column":54,"offset":4231},"end":{"line":105,"column":1,"offset":4254},"indent":[1]}},{"type":"inlineCode","value":"shouldReceive","position":{"start":{"line":105,"column":1,"offset":4254},"end":{"line":105,"column":16,"offset":4269},"indent":[]}},{"type":"text","value":" syntax. This is a new feature of Mockery v1, but fear not,\nthe trusty ol' ","position":{"start":{"line":105,"column":16,"offset":4269},"end":{"line":106,"column":16,"offset":4344},"indent":[1]}},{"type":"inlineCode","value":"shouldReceive","position":{"start":{"line":106,"column":16,"offset":4344},"end":{"line":106,"column":31,"offset":4359},"indent":[]}},{"type":"text","value":" is still here.","position":{"start":{"line":106,"column":31,"offset":4359},"end":{"line":106,"column":46,"offset":4374},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":4102},"end":{"line":106,"column":46,"offset":4374},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For new users of Mockery, the above example can also be written as:","position":{"start":{"line":108,"column":1,"offset":4376},"end":{"line":108,"column":68,"offset":4443},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":4376},"end":{"line":108,"column":68,"offset":4443},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$double->shouldReceive('find')->with(123)->andReturn(new Book());\n$book = $double->find(123);","position":{"start":{"line":110,"column":1,"offset":4445},"end":{"line":113,"column":4,"offset":4550},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If your stub doesn't require specific arguments, you can also use this shortcut\nfor setting up multiple calls at once:","position":{"start":{"line":115,"column":1,"offset":4552},"end":{"line":116,"column":39,"offset":4670},"indent":[1]}}],"position":{"start":{"line":115,"column":1,"offset":4552},"end":{"line":116,"column":39,"offset":4670},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"$double->allows([\n    \"findAll\" => [new Book(), new Book()],\n]);","position":{"start":{"line":118,"column":1,"offset":4672},"end":{"line":122,"column":4,"offset":4748},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"or","position":{"start":{"line":124,"column":1,"offset":4750},"end":{"line":124,"column":3,"offset":4752},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":4750},"end":{"line":124,"column":3,"offset":4752},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$double->shouldReceive('findAll')\n    ->andReturn([new Book(), new Book()]);","position":{"start":{"line":126,"column":1,"offset":4754},"end":{"line":129,"column":4,"offset":4842},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can also use this shortcut, which creates a double and sets up some stubs in\none call:","position":{"start":{"line":131,"column":1,"offset":4844},"end":{"line":132,"column":10,"offset":4934},"indent":[1]}}],"position":{"start":{"line":131,"column":1,"offset":4844},"end":{"line":132,"column":10,"offset":4934},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"$double = Mockery::mock(BookRepository::class, [\n    \"findAll\" => [new Book(), new Book()],\n]);","position":{"start":{"line":134,"column":1,"offset":4936},"end":{"line":138,"column":4,"offset":5043},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Method Call Expectations 📲","position":{"start":{"line":140,"column":4,"offset":5048},"end":{"line":140,"column":31,"offset":5075},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":5045},"end":{"line":140,"column":31,"offset":5075},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A Method call expectation is a mechanism to allow you to verify that a\nparticular method has been called. You can specify the parameters and you can\nalso specify how many times you expect it to be called. Method call expectations\nare used to verify indirect output of the system under test.","position":{"start":{"line":142,"column":1,"offset":5077},"end":{"line":145,"column":61,"offset":5367},"indent":[1,1,1]}}],"position":{"start":{"line":142,"column":1,"offset":5077},"end":{"line":145,"column":61,"offset":5367},"indent":[1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"$book = new Book();\n\n$double = Mockery::mock(BookRepository::class);\n$double->expects()->add($book);","position":{"start":{"line":147,"column":1,"offset":5369},"end":{"line":152,"column":4,"offset":5481},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"During the test, Mockery accept calls to the ","position":{"start":{"line":154,"column":1,"offset":5483},"end":{"line":154,"column":46,"offset":5528},"indent":[]}},{"type":"inlineCode","value":"add","position":{"start":{"line":154,"column":46,"offset":5528},"end":{"line":154,"column":51,"offset":5533},"indent":[]}},{"type":"text","value":" method as prescribed.\nAfter you have finished exercising the system under test, you need to\ntell Mockery to check that the method was called as expected, using the\n","position":{"start":{"line":154,"column":51,"offset":5533},"end":{"line":157,"column":1,"offset":5698},"indent":[1,1,1]}},{"type":"inlineCode","value":"Mockery::close","position":{"start":{"line":157,"column":1,"offset":5698},"end":{"line":157,"column":17,"offset":5714},"indent":[]}},{"type":"text","value":" method. One way to do that is to add it to your ","position":{"start":{"line":157,"column":17,"offset":5714},"end":{"line":157,"column":66,"offset":5763},"indent":[]}},{"type":"inlineCode","value":"tearDown","position":{"start":{"line":157,"column":66,"offset":5763},"end":{"line":157,"column":76,"offset":5773},"indent":[]}},{"type":"text","value":"\nmethod in PHPUnit.","position":{"start":{"line":157,"column":76,"offset":5773},"end":{"line":158,"column":19,"offset":5792},"indent":[1]}}],"position":{"start":{"line":154,"column":1,"offset":5483},"end":{"line":158,"column":19,"offset":5792},"indent":[1,1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"\npublic function tearDown()\n{\n    Mockery::close();\n}","position":{"start":{"line":160,"column":1,"offset":5794},"end":{"line":166,"column":4,"offset":5859},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":168,"column":1,"offset":5861},"end":{"line":168,"column":5,"offset":5865},"indent":[]}},{"type":"inlineCode","value":"expects()","position":{"start":{"line":168,"column":5,"offset":5865},"end":{"line":168,"column":16,"offset":5876},"indent":[]}},{"type":"text","value":" method automatically sets up an expectation that the method call\n(and matching parameters) is called ","position":{"start":{"line":168,"column":16,"offset":5876},"end":{"line":169,"column":37,"offset":5978},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"once and once only","position":{"start":{"line":169,"column":39,"offset":5980},"end":{"line":169,"column":57,"offset":5998},"indent":[]}}],"position":{"start":{"line":169,"column":37,"offset":5978},"end":{"line":169,"column":59,"offset":6000},"indent":[]}},{"type":"text","value":". You can choose to change\nthis if you are expecting more calls.","position":{"start":{"line":169,"column":59,"offset":6000},"end":{"line":170,"column":38,"offset":6064},"indent":[1]}}],"position":{"start":{"line":168,"column":1,"offset":5861},"end":{"line":170,"column":38,"offset":6064},"indent":[1,1]}},{"type":"code","lang":"php","meta":null,"value":"$double->expects()->add($book)->twice();","position":{"start":{"line":172,"column":1,"offset":6066},"end":{"line":174,"column":4,"offset":6118},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you have used Mockery before, you might see something new in the example\nabove ","position":{"start":{"line":176,"column":1,"offset":6120},"end":{"line":177,"column":7,"offset":6202},"indent":[1]}},{"type":"text","value":"—","position":{"start":{"line":177,"column":7,"offset":6202},"end":{"line":177,"column":14,"offset":6209},"indent":[]}},{"type":"text","value":" we created a method expectation using ","position":{"start":{"line":177,"column":14,"offset":6209},"end":{"line":177,"column":53,"offset":6248},"indent":[]}},{"type":"inlineCode","value":"expects","position":{"start":{"line":177,"column":53,"offset":6248},"end":{"line":177,"column":62,"offset":6257},"indent":[]}},{"type":"text","value":", instead of the \"old\"\n","position":{"start":{"line":177,"column":62,"offset":6257},"end":{"line":178,"column":1,"offset":6280},"indent":[1]}},{"type":"inlineCode","value":"shouldReceive","position":{"start":{"line":178,"column":1,"offset":6280},"end":{"line":178,"column":16,"offset":6295},"indent":[]}},{"type":"text","value":" syntax. This is a new feature of Mockery v1, but same as with\n","position":{"start":{"line":178,"column":16,"offset":6295},"end":{"line":179,"column":1,"offset":6358},"indent":[1]}},{"type":"inlineCode","value":"allows","position":{"start":{"line":179,"column":1,"offset":6358},"end":{"line":179,"column":9,"offset":6366},"indent":[]}},{"type":"text","value":" in the previous section, it can be written in the \"old\" style.","position":{"start":{"line":179,"column":9,"offset":6366},"end":{"line":179,"column":72,"offset":6429},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":6120},"end":{"line":179,"column":72,"offset":6429},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For new users of Mockery, the above example can also be written as:","position":{"start":{"line":181,"column":1,"offset":6431},"end":{"line":181,"column":68,"offset":6498},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":6431},"end":{"line":181,"column":68,"offset":6498},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$double->shouldReceive('find')\n    ->with(123)\n    ->once()\n    ->andReturn(new Book());\n$book = $double->find(123);","position":{"start":{"line":183,"column":1,"offset":6500},"end":{"line":189,"column":4,"offset":6628},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A detailed explanation of declaring expectations on method calls, please\nread the documentation, the ","position":{"start":{"line":191,"column":1,"offset":6630},"end":{"line":192,"column":29,"offset":6731},"indent":[1]}},{"type":"link","title":null,"url":"http://docs.mockery.io/en/latest/reference/expectations.html","children":[{"type":"text","value":"Expectation declarations","position":{"start":{"line":192,"column":30,"offset":6732},"end":{"line":192,"column":54,"offset":6756},"indent":[]}}],"position":{"start":{"line":192,"column":29,"offset":6731},"end":{"line":192,"column":117,"offset":6819},"indent":[]}},{"type":"text","value":"\nsection. After that, you can also learn about the new ","position":{"start":{"line":192,"column":117,"offset":6819},"end":{"line":193,"column":55,"offset":6874},"indent":[1]}},{"type":"inlineCode","value":"allows","position":{"start":{"line":193,"column":55,"offset":6874},"end":{"line":193,"column":63,"offset":6882},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":193,"column":63,"offset":6882},"end":{"line":193,"column":68,"offset":6887},"indent":[]}},{"type":"inlineCode","value":"expects","position":{"start":{"line":193,"column":68,"offset":6887},"end":{"line":193,"column":77,"offset":6896},"indent":[]}},{"type":"text","value":" methods\nin the ","position":{"start":{"line":193,"column":77,"offset":6896},"end":{"line":194,"column":8,"offset":6912},"indent":[1]}},{"type":"link","title":null,"url":"http://docs.mockery.io/en/latest/reference/alternative_should_receive_syntax.html","children":[{"type":"text","value":"Alternative shouldReceive syntax","position":{"start":{"line":194,"column":9,"offset":6913},"end":{"line":194,"column":41,"offset":6945},"indent":[]}}],"position":{"start":{"line":194,"column":8,"offset":6912},"end":{"line":194,"column":125,"offset":7029},"indent":[]}},{"type":"text","value":"\nsection.","position":{"start":{"line":194,"column":125,"offset":7029},"end":{"line":195,"column":9,"offset":7038},"indent":[1]}}],"position":{"start":{"line":191,"column":1,"offset":6630},"end":{"line":195,"column":9,"offset":7038},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It is worth mentioning that one way of setting up expectations is no better or worse\nthan the other. Under the hood, ","position":{"start":{"line":197,"column":1,"offset":7040},"end":{"line":198,"column":33,"offset":7157},"indent":[1]}},{"type":"inlineCode","value":"allows","position":{"start":{"line":198,"column":33,"offset":7157},"end":{"line":198,"column":41,"offset":7165},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":198,"column":41,"offset":7165},"end":{"line":198,"column":46,"offset":7170},"indent":[]}},{"type":"inlineCode","value":"expects","position":{"start":{"line":198,"column":46,"offset":7170},"end":{"line":198,"column":55,"offset":7179},"indent":[]}},{"type":"text","value":" are doing the same thing as\n","position":{"start":{"line":198,"column":55,"offset":7179},"end":{"line":199,"column":1,"offset":7208},"indent":[1]}},{"type":"inlineCode","value":"shouldReceive","position":{"start":{"line":199,"column":1,"offset":7208},"end":{"line":199,"column":16,"offset":7223},"indent":[]}},{"type":"text","value":", at times in \"less words\", and as such it comes to a personal preference\nof the programmer which way to use.","position":{"start":{"line":199,"column":16,"offset":7223},"end":{"line":200,"column":36,"offset":7332},"indent":[1]}}],"position":{"start":{"line":197,"column":1,"offset":7040},"end":{"line":200,"column":36,"offset":7332},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Test Spies 🕵️","position":{"start":{"line":202,"column":4,"offset":7337},"end":{"line":202,"column":18,"offset":7351},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":7334},"end":{"line":202,"column":18,"offset":7351},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default, all test doubles created with the ","position":{"start":{"line":204,"column":1,"offset":7353},"end":{"line":204,"column":47,"offset":7399},"indent":[]}},{"type":"inlineCode","value":"Mockery::mock","position":{"start":{"line":204,"column":47,"offset":7399},"end":{"line":204,"column":62,"offset":7414},"indent":[]}},{"type":"text","value":" method will only\naccept calls that they have been configured to ","position":{"start":{"line":204,"column":62,"offset":7414},"end":{"line":205,"column":48,"offset":7479},"indent":[1]}},{"type":"inlineCode","value":"allow","position":{"start":{"line":205,"column":48,"offset":7479},"end":{"line":205,"column":55,"offset":7486},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":205,"column":55,"offset":7486},"end":{"line":205,"column":59,"offset":7490},"indent":[]}},{"type":"inlineCode","value":"expect","position":{"start":{"line":205,"column":59,"offset":7490},"end":{"line":205,"column":67,"offset":7498},"indent":[]}},{"type":"text","value":" (or in other words,\ncalls that they ","position":{"start":{"line":205,"column":67,"offset":7498},"end":{"line":206,"column":17,"offset":7535},"indent":[1]}},{"type":"inlineCode","value":"shouldReceive","position":{"start":{"line":206,"column":17,"offset":7535},"end":{"line":206,"column":32,"offset":7550},"indent":[]}},{"type":"text","value":"). Sometimes we don't necessarily care about all of the\ncalls that are going to be made to an object. To facilitate this, we can tell Mockery\nto ignore any calls it has not been told to expect or allow. To do so, we can tell a\ntest double ","position":{"start":{"line":206,"column":32,"offset":7550},"end":{"line":209,"column":13,"offset":7789},"indent":[1,1,1]}},{"type":"inlineCode","value":"shouldIgnoreMissing","position":{"start":{"line":209,"column":13,"offset":7789},"end":{"line":209,"column":34,"offset":7810},"indent":[]}},{"type":"text","value":", or we can create the double using the ","position":{"start":{"line":209,"column":34,"offset":7810},"end":{"line":209,"column":74,"offset":7850},"indent":[]}},{"type":"inlineCode","value":"Mocker::spy","position":{"start":{"line":209,"column":74,"offset":7850},"end":{"line":209,"column":87,"offset":7863},"indent":[]}},{"type":"text","value":"\nshortcut.","position":{"start":{"line":209,"column":87,"offset":7863},"end":{"line":210,"column":10,"offset":7873},"indent":[1]}}],"position":{"start":{"line":204,"column":1,"offset":7353},"end":{"line":210,"column":10,"offset":7873},"indent":[1,1,1,1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"// $double = Mockery::mock()->shouldIgnoreMissing();\n$double = Mockery::spy();\n\n$double->foo(); // null\n$double->bar(); // null","position":{"start":{"line":212,"column":1,"offset":7875},"end":{"line":218,"column":4,"offset":8014},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Further to this, sometimes we want to have the object accept any call during the test execution\nand then verify the calls afterwards. For these purposes, we need our test\ndouble to act as a Spy. All mockery test doubles record the calls that are made\nto them for verification afterwards by default:","position":{"start":{"line":220,"column":1,"offset":8016},"end":{"line":223,"column":48,"offset":8314},"indent":[1,1,1]}}],"position":{"start":{"line":220,"column":1,"offset":8016},"end":{"line":223,"column":48,"offset":8314},"indent":[1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"$double->baz(123);\n\n$double->shouldHaveReceived()->baz(123); // null\n$double->shouldHaveReceived()->baz(12345); // Uncaught Exception Mockery\\Exception\\InvalidCountException...","position":{"start":{"line":225,"column":1,"offset":8316},"end":{"line":230,"column":4,"offset":8504},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Please refer to the ","position":{"start":{"line":232,"column":1,"offset":8506},"end":{"line":232,"column":21,"offset":8526},"indent":[]}},{"type":"link","title":null,"url":"http://docs.mockery.io/en/latest/reference/spies.html","children":[{"type":"text","value":"Spies","position":{"start":{"line":232,"column":22,"offset":8527},"end":{"line":232,"column":27,"offset":8532},"indent":[]}}],"position":{"start":{"line":232,"column":21,"offset":8526},"end":{"line":232,"column":83,"offset":8588},"indent":[]}},{"type":"text","value":" section\nof the documentation to learn more about the spies.","position":{"start":{"line":232,"column":83,"offset":8588},"end":{"line":233,"column":52,"offset":8648},"indent":[1]}}],"position":{"start":{"line":232,"column":1,"offset":8506},"end":{"line":233,"column":52,"offset":8648},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Utilities 🔌","position":{"start":{"line":235,"column":4,"offset":8653},"end":{"line":235,"column":16,"offset":8665},"indent":[]}}],"position":{"start":{"line":235,"column":1,"offset":8650},"end":{"line":235,"column":16,"offset":8665},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Global Helpers","position":{"start":{"line":237,"column":5,"offset":8671},"end":{"line":237,"column":19,"offset":8685},"indent":[]}}],"position":{"start":{"line":237,"column":1,"offset":8667},"end":{"line":237,"column":19,"offset":8685},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Mockery ships with a handful of global helper methods, you just need to ask\nMockery to declare them.","position":{"start":{"line":239,"column":1,"offset":8687},"end":{"line":240,"column":25,"offset":8787},"indent":[1]}}],"position":{"start":{"line":239,"column":1,"offset":8687},"end":{"line":240,"column":25,"offset":8787},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"Mockery::globalHelpers();\n\n$mock = mock(Some::class);\n$spy = spy(Some::class);\n\n$spy->shouldHaveReceived()\n    ->foo(anyArgs());","position":{"start":{"line":242,"column":1,"offset":8789},"end":{"line":250,"column":4,"offset":8929},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All of the global helpers are wrapped in a ","position":{"start":{"line":252,"column":1,"offset":8931},"end":{"line":252,"column":44,"offset":8974},"indent":[]}},{"type":"inlineCode","value":"!function_exists","position":{"start":{"line":252,"column":44,"offset":8974},"end":{"line":252,"column":62,"offset":8992},"indent":[]}},{"type":"text","value":" call to avoid\nconflicts. So if you already have a global function called ","position":{"start":{"line":252,"column":62,"offset":8992},"end":{"line":253,"column":60,"offset":9066},"indent":[1]}},{"type":"inlineCode","value":"spy","position":{"start":{"line":253,"column":60,"offset":9066},"end":{"line":253,"column":65,"offset":9071},"indent":[]}},{"type":"text","value":", Mockery will\nsilently skip the declaring its own ","position":{"start":{"line":253,"column":65,"offset":9071},"end":{"line":254,"column":37,"offset":9122},"indent":[1]}},{"type":"inlineCode","value":"spy","position":{"start":{"line":254,"column":37,"offset":9122},"end":{"line":254,"column":42,"offset":9127},"indent":[]}},{"type":"text","value":" function.","position":{"start":{"line":254,"column":42,"offset":9127},"end":{"line":254,"column":52,"offset":9137},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":8931},"end":{"line":254,"column":52,"offset":9137},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Testing Traits","position":{"start":{"line":256,"column":5,"offset":9143},"end":{"line":256,"column":19,"offset":9157},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":9139},"end":{"line":256,"column":19,"offset":9157},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As Mockery ships with code generation capabilities, it was trivial to add\nfunctionality allowing users to create objects on the fly that use particular\ntraits. Any abstract methods defined by the trait will be created and can have\nexpectations or stubs configured like normal Test Doubles.","position":{"start":{"line":258,"column":1,"offset":9159},"end":{"line":261,"column":59,"offset":9448},"indent":[1,1,1]}}],"position":{"start":{"line":258,"column":1,"offset":9159},"end":{"line":261,"column":59,"offset":9448},"indent":[1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"trait Foo {\n    function foo() {\n        return $this->doFoo();\n    }\n\n    abstract function doFoo();\n}\n\n$double = Mockery::mock(Foo::class);\n$double->allows()->doFoo()->andReturns(123);\n$double->foo(); // int(123)","position":{"start":{"line":263,"column":1,"offset":9450},"end":{"line":275,"column":4,"offset":9676},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Versioning","position":{"start":{"line":277,"column":4,"offset":9681},"end":{"line":277,"column":14,"offset":9691},"indent":[]}}],"position":{"start":{"line":277,"column":1,"offset":9678},"end":{"line":277,"column":14,"offset":9691},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Mockery team attempts to adhere to ","position":{"start":{"line":279,"column":1,"offset":9693},"end":{"line":279,"column":40,"offset":9732},"indent":[]}},{"type":"link","title":null,"url":"http://semver.org","children":[{"type":"text","value":"Semantic Versioning","position":{"start":{"line":279,"column":41,"offset":9733},"end":{"line":279,"column":60,"offset":9752},"indent":[]}}],"position":{"start":{"line":279,"column":40,"offset":9732},"end":{"line":279,"column":80,"offset":9772},"indent":[]}},{"type":"text","value":",\nhowever, some of Mockery's internals are considered private and will be open to\nchange at any time. Just because a class isn't final, or a method isn't marked\nprivate, does not mean it constitutes part of the API we guarantee under the\nversioning scheme.","position":{"start":{"line":279,"column":80,"offset":9772},"end":{"line":283,"column":19,"offset":10028},"indent":[1,1,1,1]}}],"position":{"start":{"line":279,"column":1,"offset":9693},"end":{"line":283,"column":19,"offset":10028},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Alternative Runtimes","position":{"start":{"line":285,"column":5,"offset":10034},"end":{"line":285,"column":25,"offset":10054},"indent":[]}}],"position":{"start":{"line":285,"column":1,"offset":10030},"end":{"line":285,"column":25,"offset":10054},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Mockery 1.3 was the last version to support HHVM 3 and PHP 5. There is no support for HHVM 4+.","position":{"start":{"line":287,"column":1,"offset":10056},"end":{"line":287,"column":95,"offset":10150},"indent":[]}}],"position":{"start":{"line":287,"column":1,"offset":10056},"end":{"line":287,"column":95,"offset":10150},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"A new home for Mockery","position":{"start":{"line":289,"column":4,"offset":10155},"end":{"line":289,"column":26,"offset":10177},"indent":[]}}],"position":{"start":{"line":289,"column":1,"offset":10152},"end":{"line":289,"column":26,"offset":10177},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"⚠️️ Update your remotes! Mockery has transferred to a new location. While it was once\nat ","position":{"start":{"line":291,"column":1,"offset":10179},"end":{"line":292,"column":4,"offset":10268},"indent":[1]}},{"type":"inlineCode","value":"padraic/mockery","position":{"start":{"line":292,"column":4,"offset":10268},"end":{"line":292,"column":21,"offset":10285},"indent":[]}},{"type":"text","value":", it is now at ","position":{"start":{"line":292,"column":21,"offset":10285},"end":{"line":292,"column":36,"offset":10300},"indent":[]}},{"type":"inlineCode","value":"mockery/mockery","position":{"start":{"line":292,"column":36,"offset":10300},"end":{"line":292,"column":53,"offset":10317},"indent":[]}},{"type":"text","value":". While your\nexisting repositories will redirect transparently for any operations, take some\ntime to transition to the new URL.","position":{"start":{"line":292,"column":53,"offset":10317},"end":{"line":294,"column":35,"offset":10444},"indent":[1,1]}}],"position":{"start":{"line":291,"column":1,"offset":10179},"end":{"line":294,"column":35,"offset":10444},"indent":[1,1,1]}},{"type":"code","lang":"sh","meta":null,"value":"$ git remote set-url upstream https://github.com/mockery/mockery.git","position":{"start":{"line":295,"column":1,"offset":10445},"end":{"line":297,"column":4,"offset":10523},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Replace ","position":{"start":{"line":298,"column":1,"offset":10524},"end":{"line":298,"column":9,"offset":10532},"indent":[]}},{"type":"inlineCode","value":"upstream","position":{"start":{"line":298,"column":9,"offset":10532},"end":{"line":298,"column":19,"offset":10542},"indent":[]}},{"type":"text","value":" with the name of the remote you use locally; ","position":{"start":{"line":298,"column":19,"offset":10542},"end":{"line":298,"column":65,"offset":10588},"indent":[]}},{"type":"inlineCode","value":"upstream","position":{"start":{"line":298,"column":65,"offset":10588},"end":{"line":298,"column":75,"offset":10598},"indent":[]}},{"type":"text","value":" is commonly\nused but you may be using something else. Run ","position":{"start":{"line":298,"column":75,"offset":10598},"end":{"line":299,"column":47,"offset":10657},"indent":[1]}},{"type":"inlineCode","value":"git remote -v","position":{"start":{"line":299,"column":47,"offset":10657},"end":{"line":299,"column":62,"offset":10672},"indent":[]}},{"type":"text","value":" to see what you're actually\nusing.","position":{"start":{"line":299,"column":62,"offset":10672},"end":{"line":300,"column":7,"offset":10707},"indent":[1]}}],"position":{"start":{"line":298,"column":1,"offset":10524},"end":{"line":300,"column":7,"offset":10707},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":303,"column":1,"offset":10710},"end":{"line":303,"column":31,"offset":10740},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":303,"column":31,"offset":10740}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/wamp64/www/laravel_training/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mockery\"\n    }}>{`Mockery`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mockery/mockery/actions\"\n      }}><img alt=\"Build Status\" src=\"https://github.com/mockery/mockery/actions/workflows/tests.yml/badge.svg\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.php.net/supported-versions\"\n      }}><img alt=\"Supported PHP Version\" src=\"https://badgen.net/packagist/php/mockery/mockery?color=8892bf\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://codecov.io/gh/mockery/mockery\"\n      }}><img alt=\"Code Coverage\" src=\"https://codecov.io/gh/mockery/mockery/branch/1.6.x/graph/badge.svg?token=oxHwVM56bT\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://shepherd.dev/github/mockery/mockery\"\n      }}><img alt=\"Type Coverage\" src=\"https://shepherd.dev/github/mockery/mockery/coverage.svg\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://packagist.org/packages/mockery/mockery\"\n      }}><img alt=\"Latest Stable Version\" src=\"https://poser.pugx.org/mockery/mockery/v/stable.svg\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://packagist.org/packages/mockery/mockery\"\n      }}><img alt=\"Total Downloads\" src=\"https://poser.pugx.org/mockery/mockery/downloads.svg\" /></a></p>\n    <p>{`Mockery is a simple yet flexible PHP mock object framework for use in unit testing\nwith PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a\ntest double framework with a succinct API capable of clearly defining all possible\nobject operations and interactions using a human readable Domain Specific Language\n(DSL). Designed as a drop in alternative to PHPUnit's phpunit-mock-objects library,\nMockery is easy to integrate with PHPUnit and can operate alongside\nphpunit-mock-objects without the World ending.`}</p>\n    <p>{`Mockery is released under a New BSD License.`}</p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`To install Mockery, run the command below and you will get the latest\nversion`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`composer require --dev mockery/mockery\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"documentation\"\n    }}>{`Documentation`}</h2>\n    <p>{`In older versions, this README file was the documentation for Mockery. Over time\nwe have improved this, and have created an extensive documentation for you. Please\nuse this README file as a starting point for Mockery, but do read the documentation\nto learn how to use Mockery.`}</p>\n    <p>{`The current version can be seen at `}<a parentName=\"p\" {...{\n        \"href\": \"http://docs.mockery.io\"\n      }}>{`docs.mockery.io`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"phpunit-integration\"\n    }}>{`PHPUnit Integration`}</h2>\n    <p>{`Mockery ships with some helpers if you are using PHPUnit. You can extend the\n`}<a parentName=\"p\" {...{\n        \"href\": \"library/Mockery/Adapter/Phpunit/MockeryTestCase.php\"\n      }}><inlineCode parentName=\"a\">{`Mockery\\\\Adapter\\\\Phpunit\\\\MockeryTestCase`}</inlineCode></a>{`\nclass instead of `}<inlineCode parentName=\"p\">{`PHPUnit\\\\Framework\\\\TestCase`}</inlineCode>{`, or if you are already using a\ncustom base class for your tests, take a look at the traits available in the\n`}<a parentName=\"p\" {...{\n        \"href\": \"library/Mockery/Adapter/Phpunit\"\n      }}><inlineCode parentName=\"a\">{`Mockery\\\\Adapter\\\\Phpunit`}</inlineCode></a>{` namespace.`}</p>\n    <h2 {...{\n      \"id\": \"test-doubles\"\n    }}>{`Test Doubles`}</h2>\n    <p>{`Test doubles (often called mocks) simulate the behaviour of real objects. They are\ncommonly utilised to offer test isolation, to stand in for objects which do not\nyet exist, or to allow for the exploratory design of class APIs without\nrequiring actual implementation up front.`}</p>\n    <p>{`The benefits of a test double framework are to allow for the flexible generation\nand configuration of test doubles. They allow the setting of expected method calls\nand/or return values using a flexible API which is capable of capturing every\npossible real object behaviour in way that is stated as close as possible to a\nnatural language description. Use the `}<inlineCode parentName=\"p\">{`Mockery::mock`}</inlineCode>{` method to create a test\ndouble.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$double = Mockery::mock();\n`}</code></pre>\n    <p>{`If you need Mockery to create a test double to satisfy a particular type hint,\nyou can pass the type to the `}<inlineCode parentName=\"p\">{`mock`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class Book {}\n\ninterface BookRepository {\n    function find($id): Book;\n    function findAll(): array;\n    function add(Book $book): void;\n}\n\n$double = Mockery::mock(BookRepository::class);\n`}</code></pre>\n    <p>{`A detailed explanation of creating and working with test doubles is given in the\ndocumentation, `}<a parentName=\"p\" {...{\n        \"href\": \"http://docs.mockery.io/en/latest/reference/creating_test_doubles.html\"\n      }}>{`Creating test doubles`}</a>{`\nsection.`}</p>\n    <h2 {...{\n      \"id\": \"method-stubs-\"\n    }}>{`Method Stubs 🎫`}</h2>\n    <p>{`A method stub is a mechanism for having your test double return canned responses\nto certain method calls. With stubs, you don't care how many times, if at all,\nthe method is called. Stubs are used to provide indirect input to the system\nunder test.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$double->allows()->find(123)->andReturns(new Book());\n\n$book = $double->find(123);\n`}</code></pre>\n    <p>{`If you have used Mockery before, you might see something new in the example\nabove `}{`—`}{` we created a method stub using `}<inlineCode parentName=\"p\">{`allows`}</inlineCode>{`, instead of the \"old\"\n`}<inlineCode parentName=\"p\">{`shouldReceive`}</inlineCode>{` syntax. This is a new feature of Mockery v1, but fear not,\nthe trusty ol' `}<inlineCode parentName=\"p\">{`shouldReceive`}</inlineCode>{` is still here.`}</p>\n    <p>{`For new users of Mockery, the above example can also be written as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$double->shouldReceive('find')->with(123)->andReturn(new Book());\n$book = $double->find(123);\n`}</code></pre>\n    <p>{`If your stub doesn't require specific arguments, you can also use this shortcut\nfor setting up multiple calls at once:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$double->allows([\n    \"findAll\" => [new Book(), new Book()],\n]);\n`}</code></pre>\n    <p>{`or`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$double->shouldReceive('findAll')\n    ->andReturn([new Book(), new Book()]);\n`}</code></pre>\n    <p>{`You can also use this shortcut, which creates a double and sets up some stubs in\none call:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$double = Mockery::mock(BookRepository::class, [\n    \"findAll\" => [new Book(), new Book()],\n]);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"method-call-expectations-\"\n    }}>{`Method Call Expectations 📲`}</h2>\n    <p>{`A Method call expectation is a mechanism to allow you to verify that a\nparticular method has been called. You can specify the parameters and you can\nalso specify how many times you expect it to be called. Method call expectations\nare used to verify indirect output of the system under test.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$book = new Book();\n\n$double = Mockery::mock(BookRepository::class);\n$double->expects()->add($book);\n`}</code></pre>\n    <p>{`During the test, Mockery accept calls to the `}<inlineCode parentName=\"p\">{`add`}</inlineCode>{` method as prescribed.\nAfter you have finished exercising the system under test, you need to\ntell Mockery to check that the method was called as expected, using the\n`}<inlineCode parentName=\"p\">{`Mockery::close`}</inlineCode>{` method. One way to do that is to add it to your `}<inlineCode parentName=\"p\">{`tearDown`}</inlineCode>{`\nmethod in PHPUnit.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\npublic function tearDown()\n{\n    Mockery::close();\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`expects()`}</inlineCode>{` method automatically sets up an expectation that the method call\n(and matching parameters) is called `}<strong parentName=\"p\">{`once and once only`}</strong>{`. You can choose to change\nthis if you are expecting more calls.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$double->expects()->add($book)->twice();\n`}</code></pre>\n    <p>{`If you have used Mockery before, you might see something new in the example\nabove `}{`—`}{` we created a method expectation using `}<inlineCode parentName=\"p\">{`expects`}</inlineCode>{`, instead of the \"old\"\n`}<inlineCode parentName=\"p\">{`shouldReceive`}</inlineCode>{` syntax. This is a new feature of Mockery v1, but same as with\n`}<inlineCode parentName=\"p\">{`allows`}</inlineCode>{` in the previous section, it can be written in the \"old\" style.`}</p>\n    <p>{`For new users of Mockery, the above example can also be written as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$double->shouldReceive('find')\n    ->with(123)\n    ->once()\n    ->andReturn(new Book());\n$book = $double->find(123);\n`}</code></pre>\n    <p>{`A detailed explanation of declaring expectations on method calls, please\nread the documentation, the `}<a parentName=\"p\" {...{\n        \"href\": \"http://docs.mockery.io/en/latest/reference/expectations.html\"\n      }}>{`Expectation declarations`}</a>{`\nsection. After that, you can also learn about the new `}<inlineCode parentName=\"p\">{`allows`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`expects`}</inlineCode>{` methods\nin the `}<a parentName=\"p\" {...{\n        \"href\": \"http://docs.mockery.io/en/latest/reference/alternative_should_receive_syntax.html\"\n      }}>{`Alternative shouldReceive syntax`}</a>{`\nsection.`}</p>\n    <p>{`It is worth mentioning that one way of setting up expectations is no better or worse\nthan the other. Under the hood, `}<inlineCode parentName=\"p\">{`allows`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`expects`}</inlineCode>{` are doing the same thing as\n`}<inlineCode parentName=\"p\">{`shouldReceive`}</inlineCode>{`, at times in \"less words\", and as such it comes to a personal preference\nof the programmer which way to use.`}</p>\n    <h2 {...{\n      \"id\": \"test-spies-️\"\n    }}>{`Test Spies 🕵️`}</h2>\n    <p>{`By default, all test doubles created with the `}<inlineCode parentName=\"p\">{`Mockery::mock`}</inlineCode>{` method will only\naccept calls that they have been configured to `}<inlineCode parentName=\"p\">{`allow`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`expect`}</inlineCode>{` (or in other words,\ncalls that they `}<inlineCode parentName=\"p\">{`shouldReceive`}</inlineCode>{`). Sometimes we don't necessarily care about all of the\ncalls that are going to be made to an object. To facilitate this, we can tell Mockery\nto ignore any calls it has not been told to expect or allow. To do so, we can tell a\ntest double `}<inlineCode parentName=\"p\">{`shouldIgnoreMissing`}</inlineCode>{`, or we can create the double using the `}<inlineCode parentName=\"p\">{`Mocker::spy`}</inlineCode>{`\nshortcut.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// $double = Mockery::mock()->shouldIgnoreMissing();\n$double = Mockery::spy();\n\n$double->foo(); // null\n$double->bar(); // null\n`}</code></pre>\n    <p>{`Further to this, sometimes we want to have the object accept any call during the test execution\nand then verify the calls afterwards. For these purposes, we need our test\ndouble to act as a Spy. All mockery test doubles record the calls that are made\nto them for verification afterwards by default:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$double->baz(123);\n\n$double->shouldHaveReceived()->baz(123); // null\n$double->shouldHaveReceived()->baz(12345); // Uncaught Exception Mockery\\\\Exception\\\\InvalidCountException...\n`}</code></pre>\n    <p>{`Please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"http://docs.mockery.io/en/latest/reference/spies.html\"\n      }}>{`Spies`}</a>{` section\nof the documentation to learn more about the spies.`}</p>\n    <h2 {...{\n      \"id\": \"utilities-\"\n    }}>{`Utilities 🔌`}</h2>\n    <h3 {...{\n      \"id\": \"global-helpers\"\n    }}>{`Global Helpers`}</h3>\n    <p>{`Mockery ships with a handful of global helper methods, you just need to ask\nMockery to declare them.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Mockery::globalHelpers();\n\n$mock = mock(Some::class);\n$spy = spy(Some::class);\n\n$spy->shouldHaveReceived()\n    ->foo(anyArgs());\n`}</code></pre>\n    <p>{`All of the global helpers are wrapped in a `}<inlineCode parentName=\"p\">{`!function_exists`}</inlineCode>{` call to avoid\nconflicts. So if you already have a global function called `}<inlineCode parentName=\"p\">{`spy`}</inlineCode>{`, Mockery will\nsilently skip the declaring its own `}<inlineCode parentName=\"p\">{`spy`}</inlineCode>{` function.`}</p>\n    <h3 {...{\n      \"id\": \"testing-traits\"\n    }}>{`Testing Traits`}</h3>\n    <p>{`As Mockery ships with code generation capabilities, it was trivial to add\nfunctionality allowing users to create objects on the fly that use particular\ntraits. Any abstract methods defined by the trait will be created and can have\nexpectations or stubs configured like normal Test Doubles.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`trait Foo {\n    function foo() {\n        return $this->doFoo();\n    }\n\n    abstract function doFoo();\n}\n\n$double = Mockery::mock(Foo::class);\n$double->allows()->doFoo()->andReturns(123);\n$double->foo(); // int(123)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"versioning\"\n    }}>{`Versioning`}</h2>\n    <p>{`The Mockery team attempts to adhere to `}<a parentName=\"p\" {...{\n        \"href\": \"http://semver.org\"\n      }}>{`Semantic Versioning`}</a>{`,\nhowever, some of Mockery's internals are considered private and will be open to\nchange at any time. Just because a class isn't final, or a method isn't marked\nprivate, does not mean it constitutes part of the API we guarantee under the\nversioning scheme.`}</p>\n    <h3 {...{\n      \"id\": \"alternative-runtimes\"\n    }}>{`Alternative Runtimes`}</h3>\n    <p>{`Mockery 1.3 was the last version to support HHVM 3 and PHP 5. There is no support for HHVM 4+.`}</p>\n    <h2 {...{\n      \"id\": \"a-new-home-for-mockery\"\n    }}>{`A new home for Mockery`}</h2>\n    <p>{`⚠️️ Update your remotes! Mockery has transferred to a new location. While it was once\nat `}<inlineCode parentName=\"p\">{`padraic/mockery`}</inlineCode>{`, it is now at `}<inlineCode parentName=\"p\">{`mockery/mockery`}</inlineCode>{`. While your\nexisting repositories will redirect transparently for any operations, take some\ntime to transition to the new URL.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`$ git remote set-url upstream https://github.com/mockery/mockery.git\n`}</code></pre>\n    <p>{`Replace `}<inlineCode parentName=\"p\">{`upstream`}</inlineCode>{` with the name of the remote you use locally; `}<inlineCode parentName=\"p\">{`upstream`}</inlineCode>{` is commonly\nused but you may be using something else. Run `}<inlineCode parentName=\"p\">{`git remote -v`}</inlineCode>{` to see what you're actually\nusing.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}